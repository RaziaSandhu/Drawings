# Copyright 2017 Google Inc.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file is generated semi-automatically with this command:
#   $ src/jumper/build_stages.py

#if defined(__MACH__)
    #define HIDDEN .private_extern
    #define FUNCTION(name)
    #define BALIGN4  .align 2
    #define BALIGN16 .align 4
    #define BALIGN32 .align 5
#else
    .section .note.GNU-stack,"",%progbits
    #define HIDDEN .hidden
    #define FUNCTION(name) .type name,%function
    #define BALIGN4  .balign 4
    #define BALIGN16 .balign 16
    #define BALIGN32 .balign 32
#endif
.text
#if defined(__aarch64__)
BALIGN4

HIDDEN _sk_start_pipeline_aarch64
.globl _sk_start_pipeline_aarch64
FUNCTION(_sk_start_pipeline_aarch64)
_sk_start_pipeline_aarch64:
  .long  0xa9bd5bf7                          // stp           x23, x22, [sp, #-48]!
  .long  0xa90153f5                          // stp           x21, x20, [sp, #16]
  .long  0xa9027bf3                          // stp           x19, x30, [sp, #32]
  .long  0xaa0103f4                          // mov           x20, x1
  .long  0xf8408697                          // ldr           x23, [x20], #8
  .long  0xaa0003f5                          // mov           x21, x0
  .long  0xaa0303f3                          // mov           x19, x3
  .long  0x910012a8                          // add           x8, x21, #0x4
  .long  0xeb13011f                          // cmp           x8, x19
  .long  0xaa0203f6                          // mov           x22, x2
  .long  0x54000069                          // b.ls          34 <sk_start_pipeline_aarch64+0x34>  // b.plast
  .long  0xaa1503e0                          // mov           x0, x21
  .long  0x14000012                          // b             78 <sk_start_pipeline_aarch64+0x78>
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x6f00e405                          // movi          v5.2d, #0x0
  .long  0x6f00e406                          // movi          v6.2d, #0x0
  .long  0x6f00e407                          // movi          v7.2d, #0x0
  .long  0xaa1503e0                          // mov           x0, x21
  .long  0xaa1403e1                          // mov           x1, x20
  .long  0xaa1603e2                          // mov           x2, x22
  .long  0xd63f02e0                          // blr           x23
  .long  0x910012a0                          // add           x0, x21, #0x4
  .long  0x910022a8                          // add           x8, x21, #0x8
  .long  0xeb13011f                          // cmp           x8, x19
  .long  0xaa0003f5                          // mov           x21, x0
  .long  0x54fffe09                          // b.ls          34 <sk_start_pipeline_aarch64+0x34>  // b.plast
  .long  0xa9427bf3                          // ldp           x19, x30, [sp, #32]
  .long  0xa94153f5                          // ldp           x21, x20, [sp, #16]
  .long  0xa8c35bf7                          // ldp           x23, x22, [sp], #48
  .long  0xd65f03c0                          // ret

HIDDEN _sk_just_return_aarch64
.globl _sk_just_return_aarch64
FUNCTION(_sk_just_return_aarch64)
_sk_just_return_aarch64:
  .long  0xd65f03c0                          // ret

HIDDEN _sk_seed_shader_aarch64
.globl _sk_seed_shader_aarch64
FUNCTION(_sk_seed_shader_aarch64)
_sk_seed_shader_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x3dc00046                          // ldr           q6, [x2]
  .long  0x4e040c00                          // dup           v0.4s, w0
  .long  0x4f0167e7                          // movi          v7.4s, #0x3f, lsl #24
  .long  0x4d40c901                          // ld1r          {v1.4s}, [x8]
  .long  0x4e21d800                          // scvtf         v0.4s, v0.4s
  .long  0x4e27d400                          // fadd          v0.4s, v0.4s, v7.4s
  .long  0x4f03f602                          // fmov          v2.4s, #1.000000000000000000e+00
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x6f00e405                          // movi          v5.2d, #0x0
  .long  0x4e26d400                          // fadd          v0.4s, v0.4s, v6.4s
  .long  0x6f00e406                          // movi          v6.2d, #0x0
  .long  0x4e27d421                          // fadd          v1.4s, v1.4s, v7.4s
  .long  0x6f00e407                          // movi          v7.2d, #0x0
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_dither_aarch64
.globl _sk_dither_aarch64
FUNCTION(_sk_dither_aarch64)
_sk_dither_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x3dc00051                          // ldr           q17, [x2]
  .long  0x4e040c10                          // dup           v16.4s, w0
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0x4e31d610                          // fadd          v16.4s, v16.4s, v17.4s
  .long  0x4f000432                          // movi          v18.4s, #0x1
  .long  0x4f000454                          // movi          v20.4s, #0x2
  .long  0x4d40c935                          // ld1r          {v21.4s}, [x9]
  .long  0x4ea1ba10                          // fcvtzs        v16.4s, v16.4s
  .long  0x4e321e11                          // and           v17.16b, v16.16b, v18.16b
  .long  0x4e341e16                          // and           v22.16b, v16.16b, v20.16b
  .long  0x4f000493                          // movi          v19.4s, #0x4
  .long  0x4f245631                          // shl           v17.4s, v17.4s, #4
  .long  0x4f2156d6                          // shl           v22.4s, v22.4s, #1
  .long  0x4eb11ed1                          // orr           v17.16b, v22.16b, v17.16b
  .long  0x4e331e16                          // and           v22.16b, v16.16b, v19.16b
  .long  0x6e351e10                          // eor           v16.16b, v16.16b, v21.16b
  .long  0x6f3e06d6                          // ushr          v22.4s, v22.4s, #2
  .long  0x4e321e12                          // and           v18.16b, v16.16b, v18.16b
  .long  0x4eb61e31                          // orr           v17.16b, v17.16b, v22.16b
  .long  0x4e341e14                          // and           v20.16b, v16.16b, v20.16b
  .long  0x4f255652                          // shl           v18.4s, v18.4s, #5
  .long  0x4e331e10                          // and           v16.16b, v16.16b, v19.16b
  .long  0x4f225694                          // shl           v20.4s, v20.4s, #2
  .long  0x4eb21e31                          // orr           v17.16b, v17.16b, v18.16b
  .long  0x52a79009                          // mov           w9, #0x3c800000
  .long  0xbd400913                          // ldr           s19, [x8, #8]
  .long  0x6f3f0610                          // ushr          v16.4s, v16.4s, #1
  .long  0x4eb41e31                          // orr           v17.16b, v17.16b, v20.16b
  .long  0x4e040d36                          // dup           v22.4s, w9
  .long  0x52b7df89                          // mov           w9, #0xbefc0000
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x4e30ced5                          // fmla          v21.4s, v22.4s, v16.4s
  .long  0x4f9392b0                          // fmul          v16.4s, v21.4s, v19.s[0]
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x4e22d602                          // fadd          v2.4s, v16.4s, v2.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_constant_color_aarch64
.globl _sk_constant_color_aarch64
FUNCTION(_sk_constant_color_aarch64)
_sk_constant_color_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xaa0803ea                          // mov           x10, x8
  .long  0x4ddfc940                          // ld1r          {v0.4s}, [x10], #4
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x91003108                          // add           x8, x8, #0xc
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0x4d40c903                          // ld1r          {v3.4s}, [x8]
  .long  0x4d40c941                          // ld1r          {v1.4s}, [x10]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_clear_aarch64
.globl _sk_clear_aarch64
FUNCTION(_sk_clear_aarch64)
_sk_clear_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_srcatop_aarch64
.globl _sk_srcatop_aarch64
FUNCTION(_sk_srcatop_aarch64)
_sk_srcatop_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e27dc00                          // fmul          v0.4s, v0.4s, v7.4s
  .long  0x6e27dc21                          // fmul          v1.4s, v1.4s, v7.4s
  .long  0x6e27dc42                          // fmul          v2.4s, v2.4s, v7.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccc2                          // fmla          v2.4s, v6.4s, v16.4s
  .long  0x6e27de10                          // fmul          v16.4s, v16.4s, v7.4s
  .long  0x4e23ccf0                          // fmla          v16.4s, v7.4s, v3.4s
  .long  0x4eb01e03                          // mov           v3.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_dstatop_aarch64
.globl _sk_dstatop_aarch64
FUNCTION(_sk_dstatop_aarch64)
_sk_dstatop_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d610                          // fsub          v16.4s, v16.4s, v7.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de10                          // fmul          v16.4s, v16.4s, v3.4s
  .long  0x4e23ccf0                          // fmla          v16.4s, v7.4s, v3.4s
  .long  0x4e23cc80                          // fmla          v0.4s, v4.4s, v3.4s
  .long  0x4e23cca1                          // fmla          v1.4s, v5.4s, v3.4s
  .long  0x4e23ccc2                          // fmla          v2.4s, v6.4s, v3.4s
  .long  0x4eb01e03                          // mov           v3.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_srcin_aarch64
.globl _sk_srcin_aarch64
FUNCTION(_sk_srcin_aarch64)
_sk_srcin_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e27dc00                          // fmul          v0.4s, v0.4s, v7.4s
  .long  0x6e27dc21                          // fmul          v1.4s, v1.4s, v7.4s
  .long  0x6e27dc42                          // fmul          v2.4s, v2.4s, v7.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_dstin_aarch64
.globl _sk_dstin_aarch64
FUNCTION(_sk_dstin_aarch64)
_sk_dstin_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e24dc60                          // fmul          v0.4s, v3.4s, v4.4s
  .long  0x6e25dc61                          // fmul          v1.4s, v3.4s, v5.4s
  .long  0x6e26dc62                          // fmul          v2.4s, v3.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_srcout_aarch64
.globl _sk_srcout_aarch64
FUNCTION(_sk_srcout_aarch64)
_sk_srcout_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d610                          // fsub          v16.4s, v16.4s, v7.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_dstout_aarch64
.globl _sk_dstout_aarch64
FUNCTION(_sk_dstout_aarch64)
_sk_dstout_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x4ea3d403                          // fsub          v3.4s, v0.4s, v3.4s
  .long  0x6e24dc60                          // fmul          v0.4s, v3.4s, v4.4s
  .long  0x6e25dc61                          // fmul          v1.4s, v3.4s, v5.4s
  .long  0x6e26dc62                          // fmul          v2.4s, v3.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_srcover_aarch64
.globl _sk_srcover_aarch64
FUNCTION(_sk_srcover_aarch64)
_sk_srcover_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4e24ce00                          // fmla          v0.4s, v16.4s, v4.4s
  .long  0x4e25ce01                          // fmla          v1.4s, v16.4s, v5.4s
  .long  0x4e26ce02                          // fmla          v2.4s, v16.4s, v6.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_dstover_aarch64
.globl _sk_dstover_aarch64
FUNCTION(_sk_dstover_aarch64)
_sk_dstover_aarch64:
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea41c90                          // mov           v16.16b, v4.16b
  .long  0x4ea7d634                          // fsub          v20.4s, v17.4s, v7.4s
  .long  0x4ea51cb1                          // mov           v17.16b, v5.16b
  .long  0x4ea61cd2                          // mov           v18.16b, v6.16b
  .long  0x4ea71cf3                          // mov           v19.16b, v7.16b
  .long  0x4e20ce90                          // fmla          v16.4s, v20.4s, v0.4s
  .long  0x4e21ce91                          // fmla          v17.4s, v20.4s, v1.4s
  .long  0x4e22ce92                          // fmla          v18.4s, v20.4s, v2.4s
  .long  0x4e23ce93                          // fmla          v19.4s, v20.4s, v3.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_modulate_aarch64
.globl _sk_modulate_aarch64
FUNCTION(_sk_modulate_aarch64)
_sk_modulate_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e24dc00                          // fmul          v0.4s, v0.4s, v4.4s
  .long  0x6e25dc21                          // fmul          v1.4s, v1.4s, v5.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_multiply_aarch64
.globl _sk_multiply_aarch64
FUNCTION(_sk_multiply_aarch64)
_sk_multiply_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d613                          // fsub          v19.4s, v16.4s, v7.4s
  .long  0x4ea3d614                          // fsub          v20.4s, v16.4s, v3.4s
  .long  0x6e20de70                          // fmul          v16.4s, v19.4s, v0.4s
  .long  0x6e21de71                          // fmul          v17.4s, v19.4s, v1.4s
  .long  0x6e22de72                          // fmul          v18.4s, v19.4s, v2.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e34cc90                          // fmla          v16.4s, v4.4s, v20.4s
  .long  0x4e34ccb1                          // fmla          v17.4s, v5.4s, v20.4s
  .long  0x4e34ccd2                          // fmla          v18.4s, v6.4s, v20.4s
  .long  0x4e34ccf3                          // fmla          v19.4s, v7.4s, v20.4s
  .long  0x4e20cc90                          // fmla          v16.4s, v4.4s, v0.4s
  .long  0x4e21ccb1                          // fmla          v17.4s, v5.4s, v1.4s
  .long  0x4e22ccd2                          // fmla          v18.4s, v6.4s, v2.4s
  .long  0x4e23ccf3                          // fmla          v19.4s, v7.4s, v3.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_plus__aarch64
.globl _sk_plus__aarch64
FUNCTION(_sk_plus__aarch64)
_sk_plus__aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4e27d463                          // fadd          v3.4s, v3.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_screen_aarch64
.globl _sk_screen_aarch64
FUNCTION(_sk_screen_aarch64)
_sk_screen_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e24d410                          // fadd          v16.4s, v0.4s, v4.4s
  .long  0x4e25d431                          // fadd          v17.4s, v1.4s, v5.4s
  .long  0x4e26d452                          // fadd          v18.4s, v2.4s, v6.4s
  .long  0x4e27d473                          // fadd          v19.4s, v3.4s, v7.4s
  .long  0x4ea4cc10                          // fmls          v16.4s, v0.4s, v4.4s
  .long  0x4ea5cc31                          // fmls          v17.4s, v1.4s, v5.4s
  .long  0x4ea6cc52                          // fmls          v18.4s, v2.4s, v6.4s
  .long  0x4ea7cc73                          // fmls          v19.4s, v3.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_xor__aarch64
.globl _sk_xor__aarch64
FUNCTION(_sk_xor__aarch64)
_sk_xor__aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea7d611                          // fsub          v17.4s, v16.4s, v7.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e20de20                          // fmul          v0.4s, v17.4s, v0.4s
  .long  0x6e21de21                          // fmul          v1.4s, v17.4s, v1.4s
  .long  0x6e22de22                          // fmul          v2.4s, v17.4s, v2.4s
  .long  0x6e23de23                          // fmul          v3.4s, v17.4s, v3.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccc2                          // fmla          v2.4s, v6.4s, v16.4s
  .long  0x4e30cce3                          // fmla          v3.4s, v7.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_darken_aarch64
.globl _sk_darken_aarch64
FUNCTION(_sk_darken_aarch64)
_sk_darken_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4e31f610                          // fmax          v16.4s, v16.4s, v17.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x4e33f652                          // fmax          v18.4s, v18.4s, v19.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4e33f631                          // fmax          v17.4s, v17.4s, v19.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_lighten_aarch64
.globl _sk_lighten_aarch64
FUNCTION(_sk_lighten_aarch64)
_sk_lighten_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4eb1f610                          // fmin          v16.4s, v16.4s, v17.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x4eb3f652                          // fmin          v18.4s, v18.4s, v19.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb3f631                          // fmin          v17.4s, v17.4s, v19.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_difference_aarch64
.globl _sk_difference_aarch64
FUNCTION(_sk_difference_aarch64)
_sk_difference_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4eb1f610                          // fmin          v16.4s, v16.4s, v17.4s
  .long  0x4eb3f652                          // fmin          v18.4s, v18.4s, v19.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0x4e30d610                          // fadd          v16.4s, v16.4s, v16.4s
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e32d650                          // fadd          v16.4s, v18.4s, v18.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4eb3f631                          // fmin          v17.4s, v17.4s, v19.4s
  .long  0x4eb0d421                          // fsub          v1.4s, v1.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4e31d631                          // fadd          v17.4s, v17.4s, v17.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_exclusion_aarch64
.globl _sk_exclusion_aarch64
FUNCTION(_sk_exclusion_aarch64)
_sk_exclusion_aarch64:
  .long  0x4e24d410                          // fadd          v16.4s, v0.4s, v4.4s
  .long  0x6e24dc00                          // fmul          v0.4s, v0.4s, v4.4s
  .long  0x4e20d400                          // fadd          v0.4s, v0.4s, v0.4s
  .long  0x4ea0d600                          // fsub          v0.4s, v16.4s, v0.4s
  .long  0x4e25d430                          // fadd          v16.4s, v1.4s, v5.4s
  .long  0x6e25dc21                          // fmul          v1.4s, v1.4s, v5.4s
  .long  0x4e21d421                          // fadd          v1.4s, v1.4s, v1.4s
  .long  0x4ea1d601                          // fsub          v1.4s, v16.4s, v1.4s
  .long  0x4e26d450                          // fadd          v16.4s, v2.4s, v6.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea2d602                          // fsub          v2.4s, v16.4s, v2.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_colorburn_aarch64
.globl _sk_colorburn_aarch64
FUNCTION(_sk_colorburn_aarch64)
_sk_colorburn_aarch64:
  .long  0x4ea4d4f3                          // fsub          v19.4s, v7.4s, v4.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x6e20fe73                          // fdiv          v19.4s, v19.4s, v0.4s
  .long  0x4ea7d634                          // fsub          v20.4s, v17.4s, v7.4s
  .long  0x4eb3f4f3                          // fmin          v19.4s, v7.4s, v19.4s
  .long  0x6e20de95                          // fmul          v21.4s, v20.4s, v0.4s
  .long  0x4eb3d4f3                          // fsub          v19.4s, v7.4s, v19.4s
  .long  0x4e24d6b6                          // fadd          v22.4s, v21.4s, v4.4s
  .long  0x4e33cc75                          // fmla          v21.4s, v3.4s, v19.4s
  .long  0x4ea5d4f3                          // fsub          v19.4s, v7.4s, v5.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0x6e21fe73                          // fdiv          v19.4s, v19.4s, v1.4s
  .long  0x4ea0d812                          // fcmeq         v18.4s, v0.4s, #0.0
  .long  0x4eb3f4f3                          // fmin          v19.4s, v7.4s, v19.4s
  .long  0x6e751c12                          // bsl           v18.16b, v0.16b, v21.16b
  .long  0x6e21de80                          // fmul          v0.4s, v20.4s, v1.4s
  .long  0x4eb3d4f3                          // fsub          v19.4s, v7.4s, v19.4s
  .long  0x4e25d415                          // fadd          v21.4s, v0.4s, v5.4s
  .long  0x4e33cc60                          // fmla          v0.4s, v3.4s, v19.4s
  .long  0x4ea0d833                          // fcmeq         v19.4s, v1.4s, #0.0
  .long  0x6e601c33                          // bsl           v19.16b, v1.16b, v0.16b
  .long  0x4ea6d4e0                          // fsub          v0.4s, v7.4s, v6.4s
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x6e22fc00                          // fdiv          v0.4s, v0.4s, v2.4s
  .long  0x4ea0f4e0                          // fmin          v0.4s, v7.4s, v0.4s
  .long  0x6e22de81                          // fmul          v1.4s, v20.4s, v2.4s
  .long  0x4ea0d4e0                          // fsub          v0.4s, v7.4s, v0.4s
  .long  0x4e26d434                          // fadd          v20.4s, v1.4s, v6.4s
  .long  0x4e20cc61                          // fmla          v1.4s, v3.4s, v0.4s
  .long  0x4ea0d840                          // fcmeq         v0.4s, v2.4s, #0.0
  .long  0x4ea3d631                          // fsub          v17.4s, v17.4s, v3.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e27e490                          // fcmeq         v16.4s, v4.4s, v7.4s
  .long  0x6e611c40                          // bsl           v0.16b, v2.16b, v1.16b
  .long  0x4e31cc92                          // fmla          v18.4s, v4.4s, v17.4s
  .long  0x4e27e4a1                          // fcmeq         v1.4s, v5.4s, v7.4s
  .long  0x4e27e4c2                          // fcmeq         v2.4s, v6.4s, v7.4s
  .long  0x4e31ccb3                          // fmla          v19.4s, v5.4s, v17.4s
  .long  0x4e31ccc0                          // fmla          v0.4s, v6.4s, v17.4s
  .long  0x6e721ed0                          // bsl           v16.16b, v22.16b, v18.16b
  .long  0x6e731ea1                          // bsl           v1.16b, v21.16b, v19.16b
  .long  0x6e601e82                          // bsl           v2.16b, v20.16b, v0.16b
  .long  0x4e27ce23                          // fmla          v3.4s, v17.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_colordodge_aarch64
.globl _sk_colordodge_aarch64
FUNCTION(_sk_colordodge_aarch64)
_sk_colordodge_aarch64:
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x4ea0d474                          // fsub          v20.4s, v3.4s, v0.4s
  .long  0x6e25dc75                          // fmul          v21.4s, v3.4s, v5.4s
  .long  0x4ea1d476                          // fsub          v22.4s, v3.4s, v1.4s
  .long  0x4ea7d657                          // fsub          v23.4s, v18.4s, v7.4s
  .long  0x6e34fe31                          // fdiv          v17.4s, v17.4s, v20.4s
  .long  0x6e36feb4                          // fdiv          v20.4s, v21.4s, v22.4s
  .long  0x6e20def5                          // fmul          v21.4s, v23.4s, v0.4s
  .long  0x4eb1f4f1                          // fmin          v17.4s, v7.4s, v17.4s
  .long  0x4e23e413                          // fcmeq         v19.4s, v0.4s, v3.4s
  .long  0x4e24d6b6                          // fadd          v22.4s, v21.4s, v4.4s
  .long  0x4e31cc75                          // fmla          v21.4s, v3.4s, v17.4s
  .long  0x6e751c13                          // bsl           v19.16b, v0.16b, v21.16b
  .long  0x6e21dee0                          // fmul          v0.4s, v23.4s, v1.4s
  .long  0x4eb4f4f4                          // fmin          v20.4s, v7.4s, v20.4s
  .long  0x4e25d415                          // fadd          v21.4s, v0.4s, v5.4s
  .long  0x4e34cc60                          // fmla          v0.4s, v3.4s, v20.4s
  .long  0x4e23e434                          // fcmeq         v20.4s, v1.4s, v3.4s
  .long  0x6e601c34                          // bsl           v20.16b, v1.16b, v0.16b
  .long  0x6e26dc60                          // fmul          v0.4s, v3.4s, v6.4s
  .long  0x4ea2d461                          // fsub          v1.4s, v3.4s, v2.4s
  .long  0x6e21fc00                          // fdiv          v0.4s, v0.4s, v1.4s
  .long  0x6e22dee1                          // fmul          v1.4s, v23.4s, v2.4s
  .long  0x4ea0f4e0                          // fmin          v0.4s, v7.4s, v0.4s
  .long  0x4e26d437                          // fadd          v23.4s, v1.4s, v6.4s
  .long  0x4e20cc61                          // fmla          v1.4s, v3.4s, v0.4s
  .long  0x4e23e440                          // fcmeq         v0.4s, v2.4s, v3.4s
  .long  0x6e611c40                          // bsl           v0.16b, v2.16b, v1.16b
  .long  0x4ea3d641                          // fsub          v1.4s, v18.4s, v3.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea0d890                          // fcmeq         v16.4s, v4.4s, #0.0
  .long  0x4ea0d8b1                          // fcmeq         v17.4s, v5.4s, #0.0
  .long  0x4e21cc93                          // fmla          v19.4s, v4.4s, v1.4s
  .long  0x4e21ccb4                          // fmla          v20.4s, v5.4s, v1.4s
  .long  0x4ea0d8c2                          // fcmeq         v2.4s, v6.4s, #0.0
  .long  0x4e21ccc0                          // fmla          v0.4s, v6.4s, v1.4s
  .long  0x6e731ed0                          // bsl           v16.16b, v22.16b, v19.16b
  .long  0x6e741eb1                          // bsl           v17.16b, v21.16b, v20.16b
  .long  0x6e601ee2                          // bsl           v2.16b, v23.16b, v0.16b
  .long  0x4e27cc23                          // fmla          v3.4s, v1.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_hardlight_aarch64
.globl _sk_hardlight_aarch64
FUNCTION(_sk_hardlight_aarch64)
_sk_hardlight_aarch64:
  .long  0x4ea4d4f4                          // fsub          v20.4s, v7.4s, v4.4s
  .long  0x4ea0d475                          // fsub          v21.4s, v3.4s, v0.4s
  .long  0x6e34deb4                          // fmul          v20.4s, v21.4s, v20.4s
  .long  0x4e20d411                          // fadd          v17.4s, v0.4s, v0.4s
  .long  0x6e24dc12                          // fmul          v18.4s, v0.4s, v4.4s
  .long  0x6e27dc73                          // fmul          v19.4s, v3.4s, v7.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x6e31e471                          // fcmge         v17.4s, v3.4s, v17.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4eb4d674                          // fsub          v20.4s, v19.4s, v20.4s
  .long  0x6e741e51                          // bsl           v17.16b, v18.16b, v20.16b
  .long  0x4ea5d4f2                          // fsub          v18.4s, v7.4s, v5.4s
  .long  0x4ea1d474                          // fsub          v20.4s, v3.4s, v1.4s
  .long  0x6e32de92                          // fmul          v18.4s, v20.4s, v18.4s
  .long  0x4e21d436                          // fadd          v22.4s, v1.4s, v1.4s
  .long  0x6e25dc35                          // fmul          v21.4s, v1.4s, v5.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x6e36e476                          // fcmge         v22.4s, v3.4s, v22.4s
  .long  0x4e35d6b5                          // fadd          v21.4s, v21.4s, v21.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e721eb6                          // bsl           v22.16b, v21.16b, v18.16b
  .long  0x4ea6d4f2                          // fsub          v18.4s, v7.4s, v6.4s
  .long  0x4ea2d475                          // fsub          v21.4s, v3.4s, v2.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x4ea7d615                          // fsub          v21.4s, v16.4s, v7.4s
  .long  0x4e22d454                          // fadd          v20.4s, v2.4s, v2.4s
  .long  0x6e20dea0                          // fmul          v0.4s, v21.4s, v0.4s
  .long  0x6e21dea1                          // fmul          v1.4s, v21.4s, v1.4s
  .long  0x6e22deb5                          // fmul          v21.4s, v21.4s, v2.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e34e474                          // fcmge         v20.4s, v3.4s, v20.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccd5                          // fmla          v21.4s, v6.4s, v16.4s
  .long  0x6e721c54                          // bsl           v20.16b, v2.16b, v18.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e36d421                          // fadd          v1.4s, v1.4s, v22.4s
  .long  0x4e34d6a2                          // fadd          v2.4s, v21.4s, v20.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_overlay_aarch64
.globl _sk_overlay_aarch64
FUNCTION(_sk_overlay_aarch64)
_sk_overlay_aarch64:
  .long  0x4ea4d4f4                          // fsub          v20.4s, v7.4s, v4.4s
  .long  0x4ea0d475                          // fsub          v21.4s, v3.4s, v0.4s
  .long  0x6e34deb4                          // fmul          v20.4s, v21.4s, v20.4s
  .long  0x4e24d491                          // fadd          v17.4s, v4.4s, v4.4s
  .long  0x6e24dc12                          // fmul          v18.4s, v0.4s, v4.4s
  .long  0x6e27dc73                          // fmul          v19.4s, v3.4s, v7.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x6e31e4f1                          // fcmge         v17.4s, v7.4s, v17.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4eb4d674                          // fsub          v20.4s, v19.4s, v20.4s
  .long  0x6e741e51                          // bsl           v17.16b, v18.16b, v20.16b
  .long  0x4ea5d4f2                          // fsub          v18.4s, v7.4s, v5.4s
  .long  0x4ea1d474                          // fsub          v20.4s, v3.4s, v1.4s
  .long  0x6e32de92                          // fmul          v18.4s, v20.4s, v18.4s
  .long  0x4e25d4b6                          // fadd          v22.4s, v5.4s, v5.4s
  .long  0x6e25dc35                          // fmul          v21.4s, v1.4s, v5.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x6e36e4f6                          // fcmge         v22.4s, v7.4s, v22.4s
  .long  0x4e35d6b5                          // fadd          v21.4s, v21.4s, v21.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e721eb6                          // bsl           v22.16b, v21.16b, v18.16b
  .long  0x4ea6d4f2                          // fsub          v18.4s, v7.4s, v6.4s
  .long  0x4ea2d475                          // fsub          v21.4s, v3.4s, v2.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x4ea7d615                          // fsub          v21.4s, v16.4s, v7.4s
  .long  0x4e26d4d4                          // fadd          v20.4s, v6.4s, v6.4s
  .long  0x6e20dea0                          // fmul          v0.4s, v21.4s, v0.4s
  .long  0x6e21dea1                          // fmul          v1.4s, v21.4s, v1.4s
  .long  0x6e22deb5                          // fmul          v21.4s, v21.4s, v2.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e34e4f4                          // fcmge         v20.4s, v7.4s, v20.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccd5                          // fmla          v21.4s, v6.4s, v16.4s
  .long  0x6e721c54                          // bsl           v20.16b, v2.16b, v18.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e36d421                          // fadd          v1.4s, v1.4s, v22.4s
  .long  0x4e34d6a2                          // fadd          v2.4s, v21.4s, v20.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_softlight_aarch64
.globl _sk_softlight_aarch64
FUNCTION(_sk_softlight_aarch64)
_sk_softlight_aarch64:
  .long  0x4ea0c8f5                          // fcmgt         v21.4s, v7.4s, #0.0
  .long  0x6e27fc96                          // fdiv          v22.4s, v4.4s, v7.4s
  .long  0x6e27fcb8                          // fdiv          v24.4s, v5.4s, v7.4s
  .long  0x6e27fcd9                          // fdiv          v25.4s, v6.4s, v7.4s
  .long  0x4e351ed6                          // and           v22.16b, v22.16b, v21.16b
  .long  0x4e351f18                          // and           v24.16b, v24.16b, v21.16b
  .long  0x4e351f35                          // and           v21.16b, v25.16b, v21.16b
  .long  0x6ea1dad9                          // frsqrte       v25.4s, v22.4s
  .long  0x6e39df3d                          // fmul          v29.4s, v25.4s, v25.4s
  .long  0x4ebdfedd                          // frsqrts       v29.4s, v22.4s, v29.4s
  .long  0x6e3ddf39                          // fmul          v25.4s, v25.4s, v29.4s
  .long  0x4ea1db3d                          // frecpe        v29.4s, v25.4s
  .long  0x6ea0fada                          // fneg          v26.4s, v22.4s
  .long  0x6ea1db1b                          // frsqrte       v27.4s, v24.4s
  .long  0x4e3dff39                          // frecps        v25.4s, v25.4s, v29.4s
  .long  0x4e3dcf3a                          // fmla          v26.4s, v25.4s, v29.4s
  .long  0x6e3bdf7d                          // fmul          v29.4s, v27.4s, v27.4s
  .long  0x4ebdff1d                          // frsqrts       v29.4s, v24.4s, v29.4s
  .long  0x6e3ddf7b                          // fmul          v27.4s, v27.4s, v29.4s
  .long  0x4ea1db7d                          // frecpe        v29.4s, v27.4s
  .long  0x6ea0fb1c                          // fneg          v28.4s, v24.4s
  .long  0x6ea1dab9                          // frsqrte       v25.4s, v21.4s
  .long  0x4e3dff7b                          // frecps        v27.4s, v27.4s, v29.4s
  .long  0x4e3dcf7c                          // fmla          v28.4s, v27.4s, v29.4s
  .long  0x6e39df3d                          // fmul          v29.4s, v25.4s, v25.4s
  .long  0x4ebdfebd                          // frsqrts       v29.4s, v21.4s, v29.4s
  .long  0x6e3ddf39                          // fmul          v25.4s, v25.4s, v29.4s
  .long  0x4ea1db3d                          // frecpe        v29.4s, v25.4s
  .long  0x6ea0fabb                          // fneg          v27.4s, v21.4s
  .long  0x4e3dff39                          // frecps        v25.4s, v25.4s, v29.4s
  .long  0x4e3dcf3b                          // fmla          v27.4s, v25.4s, v29.4s
  .long  0x4e36d6d9                          // fadd          v25.4s, v22.4s, v22.4s
  .long  0x4f07f613                          // fmov          v19.4s, #-1.000000000000000000e+00
  .long  0x4e39d739                          // fadd          v25.4s, v25.4s, v25.4s
  .long  0x4e24d497                          // fadd          v23.4s, v4.4s, v4.4s
  .long  0x4e33d6dd                          // fadd          v29.4s, v22.4s, v19.4s
  .long  0x4e39cf39                          // fmla          v25.4s, v25.4s, v25.4s
  .long  0x4f00f794                          // fmov          v20.4s, #7.000000000000000000e+00
  .long  0x6e39dfb9                          // fmul          v25.4s, v29.4s, v25.4s
  .long  0x4e37d6f7                          // fadd          v23.4s, v23.4s, v23.4s
  .long  0x6e37e4f7                          // fcmge         v23.4s, v7.4s, v23.4s
  .long  0x4e36ce99                          // fmla          v25.4s, v20.4s, v22.4s
  .long  0x6e7a1f37                          // bsl           v23.16b, v25.16b, v26.16b
  .long  0x4e38d719                          // fadd          v25.4s, v24.4s, v24.4s
  .long  0x4e39d739                          // fadd          v25.4s, v25.4s, v25.4s
  .long  0x4e33d71a                          // fadd          v26.4s, v24.4s, v19.4s
  .long  0x4e39cf39                          // fmla          v25.4s, v25.4s, v25.4s
  .long  0x6e39df59                          // fmul          v25.4s, v26.4s, v25.4s
  .long  0x4e25d4ba                          // fadd          v26.4s, v5.4s, v5.4s
  .long  0x4e3ad75a                          // fadd          v26.4s, v26.4s, v26.4s
  .long  0x6e3ae4fa                          // fcmge         v26.4s, v7.4s, v26.4s
  .long  0x4e38ce99                          // fmla          v25.4s, v20.4s, v24.4s
  .long  0x6e7c1f3a                          // bsl           v26.16b, v25.16b, v28.16b
  .long  0x4e35d6bc                          // fadd          v28.4s, v21.4s, v21.4s
  .long  0x4e3cd79c                          // fadd          v28.4s, v28.4s, v28.4s
  .long  0x4e33d6b3                          // fadd          v19.4s, v21.4s, v19.4s
  .long  0x4e3ccf9c                          // fmla          v28.4s, v28.4s, v28.4s
  .long  0x6e3cde73                          // fmul          v19.4s, v19.4s, v28.4s
  .long  0x4e35ce93                          // fmla          v19.4s, v20.4s, v21.4s
  .long  0x4e26d4d4                          // fadd          v20.4s, v6.4s, v6.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x6e34e4f4                          // fcmge         v20.4s, v7.4s, v20.4s
  .long  0x4e20d411                          // fadd          v17.4s, v0.4s, v0.4s
  .long  0x6e7b1e74                          // bsl           v20.16b, v19.16b, v27.16b
  .long  0x4ea7d65b                          // fsub          v27.4s, v18.4s, v7.4s
  .long  0x4ea31c70                          // mov           v16.16b, v3.16b
  .long  0x4e21d43d                          // fadd          v29.4s, v1.4s, v1.4s
  .long  0x4e22d45c                          // fadd          v28.4s, v2.4s, v2.4s
  .long  0x6e20df60                          // fmul          v0.4s, v27.4s, v0.4s
  .long  0x6e21df61                          // fmul          v1.4s, v27.4s, v1.4s
  .long  0x6e22df62                          // fmul          v2.4s, v27.4s, v2.4s
  .long  0x4ea3d63b                          // fsub          v27.4s, v17.4s, v3.4s
  .long  0x4eb6d656                          // fsub          v22.4s, v18.4s, v22.4s
  .long  0x4ea31c79                          // mov           v25.16b, v3.16b
  .long  0x4e3bced0                          // fmla          v16.4s, v22.4s, v27.4s
  .long  0x4ea3d7b6                          // fsub          v22.4s, v29.4s, v3.4s
  .long  0x4eb8d658                          // fsub          v24.4s, v18.4s, v24.4s
  .long  0x4ea31c73                          // mov           v19.16b, v3.16b
  .long  0x4e36cf19                          // fmla          v25.4s, v24.4s, v22.4s
  .long  0x4ea3d798                          // fsub          v24.4s, v28.4s, v3.4s
  .long  0x4eb5d655                          // fsub          v21.4s, v18.4s, v21.4s
  .long  0x4e38ceb3                          // fmla          v19.4s, v21.4s, v24.4s
  .long  0x6e27df7b                          // fmul          v27.4s, v27.4s, v7.4s
  .long  0x6e27ded6                          // fmul          v22.4s, v22.4s, v7.4s
  .long  0x6e27df18                          // fmul          v24.4s, v24.4s, v7.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e37df77                          // fmul          v23.4s, v27.4s, v23.4s
  .long  0x6e3aded6                          // fmul          v22.4s, v22.4s, v26.4s
  .long  0x6e34df14                          // fmul          v20.4s, v24.4s, v20.4s
  .long  0x4ea3d652                          // fsub          v18.4s, v18.4s, v3.4s
  .long  0x6e31e471                          // fcmge         v17.4s, v3.4s, v17.4s
  .long  0x6e3de475                          // fcmge         v21.4s, v3.4s, v29.4s
  .long  0x6e3ce47c                          // fcmge         v28.4s, v3.4s, v28.4s
  .long  0x6e24de10                          // fmul          v16.4s, v16.4s, v4.4s
  .long  0x6e25df39                          // fmul          v25.4s, v25.4s, v5.4s
  .long  0x6e26de73                          // fmul          v19.4s, v19.4s, v6.4s
  .long  0x4e23cc97                          // fmla          v23.4s, v4.4s, v3.4s
  .long  0x4e23ccb6                          // fmla          v22.4s, v5.4s, v3.4s
  .long  0x4e23ccd4                          // fmla          v20.4s, v6.4s, v3.4s
  .long  0x4e32cc80                          // fmla          v0.4s, v4.4s, v18.4s
  .long  0x4e32cca1                          // fmla          v1.4s, v5.4s, v18.4s
  .long  0x4e32ccc2                          // fmla          v2.4s, v6.4s, v18.4s
  .long  0x6e771e11                          // bsl           v17.16b, v16.16b, v23.16b
  .long  0x6e761f35                          // bsl           v21.16b, v25.16b, v22.16b
  .long  0x6e741e7c                          // bsl           v28.16b, v19.16b, v20.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e35d421                          // fadd          v1.4s, v1.4s, v21.4s
  .long  0x4e3cd442                          // fadd          v2.4s, v2.4s, v28.4s
  .long  0x4e27ce43                          // fmla          v3.4s, v18.4s, v7.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_hue_aarch64
.globl _sk_hue_aarch64
FUNCTION(_sk_hue_aarch64)
_sk_hue_aarch64:
  .long  0x6e23dc32                          // fmul          v18.4s, v1.4s, v3.4s
  .long  0x6e23dc53                          // fmul          v19.4s, v2.4s, v3.4s
  .long  0x4e26f4b5                          // fmax          v21.4s, v5.4s, v6.4s
  .long  0x4ea6f4b7                          // fmin          v23.4s, v5.4s, v6.4s
  .long  0x6e23dc11                          // fmul          v17.4s, v0.4s, v3.4s
  .long  0x4e35f495                          // fmax          v21.4s, v4.4s, v21.4s
  .long  0x4eb7f497                          // fmin          v23.4s, v4.4s, v23.4s
  .long  0x4eb3f65b                          // fmin          v27.4s, v18.4s, v19.4s
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x4f03f619                          // fmov          v25.4s, #1.000000000000000000e+00
  .long  0x4e33f65c                          // fmax          v28.4s, v18.4s, v19.4s
  .long  0x4eb7d6b5                          // fsub          v21.4s, v21.4s, v23.4s
  .long  0x4ebbf63b                          // fmin          v27.4s, v17.4s, v27.4s
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4ea7d737                          // fsub          v23.4s, v25.4s, v7.4s
  .long  0x4e3cf63c                          // fmax          v28.4s, v17.4s, v28.4s
  .long  0x4ebbd652                          // fsub          v18.4s, v18.4s, v27.4s
  .long  0x6e23deb5                          // fmul          v21.4s, v21.4s, v3.4s
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x6e20dee0                          // fmul          v0.4s, v23.4s, v0.4s
  .long  0x6e21dee1                          // fmul          v1.4s, v23.4s, v1.4s
  .long  0x6e22dee2                          // fmul          v2.4s, v23.4s, v2.4s
  .long  0x4ea3d739                          // fsub          v25.4s, v25.4s, v3.4s
  .long  0x4ebbd79c                          // fsub          v28.4s, v28.4s, v27.4s
  .long  0x4ebbd631                          // fsub          v17.4s, v17.4s, v27.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x4ebbd673                          // fsub          v19.4s, v19.4s, v27.4s
  .long  0x4e39cc80                          // fmla          v0.4s, v4.4s, v25.4s
  .long  0x4e39cca1                          // fmla          v1.4s, v5.4s, v25.4s
  .long  0x4e39ccc2                          // fmla          v2.4s, v6.4s, v25.4s
  .long  0x4ea0db99                          // fcmeq         v25.4s, v28.4s, #0.0
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e3cfe52                          // fdiv          v18.4s, v18.4s, v28.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e33deb3                          // fmul          v19.4s, v21.4s, v19.4s
  .long  0x6e3cfe31                          // fdiv          v17.4s, v17.4s, v28.4s
  .long  0x4e791e52                          // bic           v18.16b, v18.16b, v25.16b
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x6e3cfe73                          // fdiv          v19.4s, v19.4s, v28.4s
  .long  0x4e791e31                          // bic           v17.16b, v17.16b, v25.16b
  .long  0x6e38de55                          // fmul          v21.4s, v18.4s, v24.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x6e38dcbb                          // fmul          v27.4s, v5.4s, v24.4s
  .long  0x4e791e73                          // bic           v19.16b, v19.16b, v25.16b
  .long  0x4e31ced5                          // fmla          v21.4s, v22.4s, v17.4s
  .long  0x4e24cedb                          // fmla          v27.4s, v22.4s, v4.4s
  .long  0x4e33cef5                          // fmla          v21.4s, v23.4s, v19.4s
  .long  0x4e26cefb                          // fmla          v27.4s, v23.4s, v6.4s
  .long  0x6ea0fab5                          // fneg          v21.4s, v21.4s
  .long  0x4e3bcc75                          // fmla          v21.4s, v3.4s, v27.4s
  .long  0x6e27dc74                          // fmul          v20.4s, v3.4s, v7.4s
  .long  0x4e27d47a                          // fadd          v26.4s, v3.4s, v7.4s
  .long  0x4e35d623                          // fadd          v3.4s, v17.4s, v21.4s
  .long  0x4e35d651                          // fadd          v17.4s, v18.4s, v21.4s
  .long  0x6e38de38                          // fmul          v24.4s, v17.4s, v24.4s
  .long  0x4e35d672                          // fadd          v18.4s, v19.4s, v21.4s
  .long  0x4e23ced8                          // fmla          v24.4s, v22.4s, v3.4s
  .long  0x4eb2f633                          // fmin          v19.4s, v17.4s, v18.4s
  .long  0x4e32cef8                          // fmla          v24.4s, v23.4s, v18.4s
  .long  0x4eb3f473                          // fmin          v19.4s, v3.4s, v19.4s
  .long  0x4eb8d479                          // fsub          v25.4s, v3.4s, v24.4s
  .long  0x6ea0ca76                          // fcmge         v22.4s, v19.4s, #0.0
  .long  0x4eb3d713                          // fsub          v19.4s, v24.4s, v19.4s
  .long  0x6e39df19                          // fmul          v25.4s, v24.4s, v25.4s
  .long  0x6e33ff39                          // fdiv          v25.4s, v25.4s, v19.4s
  .long  0x4e32f635                          // fmax          v21.4s, v17.4s, v18.4s
  .long  0x4eb61edb                          // mov           v27.16b, v22.16b
  .long  0x4e39d719                          // fadd          v25.4s, v24.4s, v25.4s
  .long  0x4e35f475                          // fmax          v21.4s, v3.4s, v21.4s
  .long  0x6e791c7b                          // bsl           v27.16b, v3.16b, v25.16b
  .long  0x4eb8d623                          // fsub          v3.4s, v17.4s, v24.4s
  .long  0x6e23df03                          // fmul          v3.4s, v24.4s, v3.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x4eb61ed9                          // mov           v25.16b, v22.16b
  .long  0x4e23d703                          // fadd          v3.4s, v24.4s, v3.4s
  .long  0x6e631e39                          // bsl           v25.16b, v17.16b, v3.16b
  .long  0x4eb8d651                          // fsub          v17.4s, v18.4s, v24.4s
  .long  0x6e31df11                          // fmul          v17.4s, v24.4s, v17.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x6e711e56                          // bsl           v22.16b, v18.16b, v17.16b
  .long  0x4eb8d69c                          // fsub          v28.4s, v20.4s, v24.4s
  .long  0x4eb8d771                          // fsub          v17.4s, v27.4s, v24.4s
  .long  0x4eb8d732                          // fsub          v18.4s, v25.4s, v24.4s
  .long  0x4eb8d6d3                          // fsub          v19.4s, v22.4s, v24.4s
  .long  0x6eb4e6b7                          // fcmgt         v23.4s, v21.4s, v20.4s
  .long  0x4eb8d6b5                          // fsub          v21.4s, v21.4s, v24.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e32df92                          // fmul          v18.4s, v28.4s, v18.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e35fe31                          // fdiv          v17.4s, v17.4s, v21.4s
  .long  0x6e35fe52                          // fdiv          v18.4s, v18.4s, v21.4s
  .long  0x6e35fe73                          // fdiv          v19.4s, v19.4s, v21.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4eb71ee3                          // mov           v3.16b, v23.16b
  .long  0x4eb71efc                          // mov           v28.16b, v23.16b
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x4e32d712                          // fadd          v18.4s, v24.4s, v18.4s
  .long  0x4e33d713                          // fadd          v19.4s, v24.4s, v19.4s
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e791e5c                          // bsl           v28.16b, v18.16b, v25.16b
  .long  0x6e761e77                          // bsl           v23.16b, v19.16b, v22.16b
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0x4e30f791                          // fmax          v17.4s, v28.4s, v16.4s
  .long  0x4e30f6f0                          // fmax          v16.4s, v23.4s, v16.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e30d442                          // fadd          v2.4s, v2.4s, v16.4s
  .long  0x4eb4d743                          // fsub          v3.4s, v26.4s, v20.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_saturation_aarch64
.globl _sk_saturation_aarch64
FUNCTION(_sk_saturation_aarch64)
_sk_saturation_aarch64:
  .long  0x6e25dc72                          // fmul          v18.4s, v3.4s, v5.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4e22f435                          // fmax          v21.4s, v1.4s, v2.4s
  .long  0x4ea2f437                          // fmin          v23.4s, v1.4s, v2.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x4e35f415                          // fmax          v21.4s, v0.4s, v21.4s
  .long  0x4eb7f417                          // fmin          v23.4s, v0.4s, v23.4s
  .long  0x4eb3f65b                          // fmin          v27.4s, v18.4s, v19.4s
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x4f03f619                          // fmov          v25.4s, #1.000000000000000000e+00
  .long  0x4e33f65c                          // fmax          v28.4s, v18.4s, v19.4s
  .long  0x4eb7d6b5                          // fsub          v21.4s, v21.4s, v23.4s
  .long  0x4ebbf63b                          // fmin          v27.4s, v17.4s, v27.4s
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4ea7d737                          // fsub          v23.4s, v25.4s, v7.4s
  .long  0x4e3cf63c                          // fmax          v28.4s, v17.4s, v28.4s
  .long  0x4ebbd652                          // fsub          v18.4s, v18.4s, v27.4s
  .long  0x6e27deb5                          // fmul          v21.4s, v21.4s, v7.4s
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x6e20dee0                          // fmul          v0.4s, v23.4s, v0.4s
  .long  0x6e21dee1                          // fmul          v1.4s, v23.4s, v1.4s
  .long  0x6e22dee2                          // fmul          v2.4s, v23.4s, v2.4s
  .long  0x4ea3d739                          // fsub          v25.4s, v25.4s, v3.4s
  .long  0x4ebbd79c                          // fsub          v28.4s, v28.4s, v27.4s
  .long  0x4ebbd631                          // fsub          v17.4s, v17.4s, v27.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x4ebbd673                          // fsub          v19.4s, v19.4s, v27.4s
  .long  0x4e39cc80                          // fmla          v0.4s, v4.4s, v25.4s
  .long  0x4e39cca1                          // fmla          v1.4s, v5.4s, v25.4s
  .long  0x4e39ccc2                          // fmla          v2.4s, v6.4s, v25.4s
  .long  0x4ea0db99                          // fcmeq         v25.4s, v28.4s, #0.0
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e3cfe52                          // fdiv          v18.4s, v18.4s, v28.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e33deb3                          // fmul          v19.4s, v21.4s, v19.4s
  .long  0x6e3cfe31                          // fdiv          v17.4s, v17.4s, v28.4s
  .long  0x4e791e52                          // bic           v18.16b, v18.16b, v25.16b
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x6e3cfe73                          // fdiv          v19.4s, v19.4s, v28.4s
  .long  0x4e791e31                          // bic           v17.16b, v17.16b, v25.16b
  .long  0x6e38de55                          // fmul          v21.4s, v18.4s, v24.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x6e38dcbb                          // fmul          v27.4s, v5.4s, v24.4s
  .long  0x4e791e73                          // bic           v19.16b, v19.16b, v25.16b
  .long  0x4e31ced5                          // fmla          v21.4s, v22.4s, v17.4s
  .long  0x4e24cedb                          // fmla          v27.4s, v22.4s, v4.4s
  .long  0x4e33cef5                          // fmla          v21.4s, v23.4s, v19.4s
  .long  0x4e26cefb                          // fmla          v27.4s, v23.4s, v6.4s
  .long  0x6ea0fab5                          // fneg          v21.4s, v21.4s
  .long  0x4e3bcc75                          // fmla          v21.4s, v3.4s, v27.4s
  .long  0x6e27dc74                          // fmul          v20.4s, v3.4s, v7.4s
  .long  0x4e27d47a                          // fadd          v26.4s, v3.4s, v7.4s
  .long  0x4e35d623                          // fadd          v3.4s, v17.4s, v21.4s
  .long  0x4e35d651                          // fadd          v17.4s, v18.4s, v21.4s
  .long  0x6e38de38                          // fmul          v24.4s, v17.4s, v24.4s
  .long  0x4e35d672                          // fadd          v18.4s, v19.4s, v21.4s
  .long  0x4e23ced8                          // fmla          v24.4s, v22.4s, v3.4s
  .long  0x4eb2f633                          // fmin          v19.4s, v17.4s, v18.4s
  .long  0x4e32cef8                          // fmla          v24.4s, v23.4s, v18.4s
  .long  0x4eb3f473                          // fmin          v19.4s, v3.4s, v19.4s
  .long  0x4eb8d479                          // fsub          v25.4s, v3.4s, v24.4s
  .long  0x6ea0ca76                          // fcmge         v22.4s, v19.4s, #0.0
  .long  0x4eb3d713                          // fsub          v19.4s, v24.4s, v19.4s
  .long  0x6e39df19                          // fmul          v25.4s, v24.4s, v25.4s
  .long  0x6e33ff39                          // fdiv          v25.4s, v25.4s, v19.4s
  .long  0x4e32f635                          // fmax          v21.4s, v17.4s, v18.4s
  .long  0x4eb61edb                          // mov           v27.16b, v22.16b
  .long  0x4e39d719                          // fadd          v25.4s, v24.4s, v25.4s
  .long  0x4e35f475                          // fmax          v21.4s, v3.4s, v21.4s
  .long  0x6e791c7b                          // bsl           v27.16b, v3.16b, v25.16b
  .long  0x4eb8d623                          // fsub          v3.4s, v17.4s, v24.4s
  .long  0x6e23df03                          // fmul          v3.4s, v24.4s, v3.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x4eb61ed9                          // mov           v25.16b, v22.16b
  .long  0x4e23d703                          // fadd          v3.4s, v24.4s, v3.4s
  .long  0x6e631e39                          // bsl           v25.16b, v17.16b, v3.16b
  .long  0x4eb8d651                          // fsub          v17.4s, v18.4s, v24.4s
  .long  0x6e31df11                          // fmul          v17.4s, v24.4s, v17.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x6e711e56                          // bsl           v22.16b, v18.16b, v17.16b
  .long  0x4eb8d69c                          // fsub          v28.4s, v20.4s, v24.4s
  .long  0x4eb8d771                          // fsub          v17.4s, v27.4s, v24.4s
  .long  0x4eb8d732                          // fsub          v18.4s, v25.4s, v24.4s
  .long  0x4eb8d6d3                          // fsub          v19.4s, v22.4s, v24.4s
  .long  0x6eb4e6b7                          // fcmgt         v23.4s, v21.4s, v20.4s
  .long  0x4eb8d6b5                          // fsub          v21.4s, v21.4s, v24.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e32df92                          // fmul          v18.4s, v28.4s, v18.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e35fe31                          // fdiv          v17.4s, v17.4s, v21.4s
  .long  0x6e35fe52                          // fdiv          v18.4s, v18.4s, v21.4s
  .long  0x6e35fe73                          // fdiv          v19.4s, v19.4s, v21.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4eb71ee3                          // mov           v3.16b, v23.16b
  .long  0x4eb71efc                          // mov           v28.16b, v23.16b
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x4e32d712                          // fadd          v18.4s, v24.4s, v18.4s
  .long  0x4e33d713                          // fadd          v19.4s, v24.4s, v19.4s
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e791e5c                          // bsl           v28.16b, v18.16b, v25.16b
  .long  0x6e761e77                          // bsl           v23.16b, v19.16b, v22.16b
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0x4e30f791                          // fmax          v17.4s, v28.4s, v16.4s
  .long  0x4e30f6f0                          // fmax          v16.4s, v23.4s, v16.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e30d442                          // fadd          v2.4s, v2.4s, v16.4s
  .long  0x4eb4d743                          // fsub          v3.4s, v26.4s, v20.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_color_aarch64
.globl _sk_color_aarch64
FUNCTION(_sk_color_aarch64)
_sk_color_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x6e27dc33                          // fmul          v19.4s, v1.4s, v7.4s
  .long  0x4e040d15                          // dup           v21.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e27dc11                          // fmul          v17.4s, v0.4s, v7.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4f03f617                          // fmov          v23.4s, #1.000000000000000000e+00
  .long  0x6e35de7c                          // fmul          v28.4s, v19.4s, v21.4s
  .long  0x6e27dc54                          // fmul          v20.4s, v2.4s, v7.4s
  .long  0x4e040d19                          // dup           v25.4s, w8
  .long  0x4ea7d6fa                          // fsub          v26.4s, v23.4s, v7.4s
  .long  0x6e35dcbb                          // fmul          v27.4s, v5.4s, v21.4s
  .long  0x4e31ce5c                          // fmla          v28.4s, v18.4s, v17.4s
  .long  0x4ea3d6f7                          // fsub          v23.4s, v23.4s, v3.4s
  .long  0x6e20df40                          // fmul          v0.4s, v26.4s, v0.4s
  .long  0x6e21df41                          // fmul          v1.4s, v26.4s, v1.4s
  .long  0x6e22df42                          // fmul          v2.4s, v26.4s, v2.4s
  .long  0x4e24ce5b                          // fmla          v27.4s, v18.4s, v4.4s
  .long  0x4e34cf3c                          // fmla          v28.4s, v25.4s, v20.4s
  .long  0x4e37cc80                          // fmla          v0.4s, v4.4s, v23.4s
  .long  0x4e37cca1                          // fmla          v1.4s, v5.4s, v23.4s
  .long  0x4e37ccc2                          // fmla          v2.4s, v6.4s, v23.4s
  .long  0x4e26cf3b                          // fmla          v27.4s, v25.4s, v6.4s
  .long  0x6ea0fb97                          // fneg          v23.4s, v28.4s
  .long  0x4e3bcc77                          // fmla          v23.4s, v3.4s, v27.4s
  .long  0x6e27dc70                          // fmul          v16.4s, v3.4s, v7.4s
  .long  0x4e27d478                          // fadd          v24.4s, v3.4s, v7.4s
  .long  0x4e37d623                          // fadd          v3.4s, v17.4s, v23.4s
  .long  0x4e37d671                          // fadd          v17.4s, v19.4s, v23.4s
  .long  0x6e35de35                          // fmul          v21.4s, v17.4s, v21.4s
  .long  0x4e37d693                          // fadd          v19.4s, v20.4s, v23.4s
  .long  0x4e23ce55                          // fmla          v21.4s, v18.4s, v3.4s
  .long  0x4eb3f634                          // fmin          v20.4s, v17.4s, v19.4s
  .long  0x4e33cf35                          // fmla          v21.4s, v25.4s, v19.4s
  .long  0x4eb4f474                          // fmin          v20.4s, v3.4s, v20.4s
  .long  0x4eb5d47a                          // fsub          v26.4s, v3.4s, v21.4s
  .long  0x6ea0ca92                          // fcmge         v18.4s, v20.4s, #0.0
  .long  0x4eb4d6b4                          // fsub          v20.4s, v21.4s, v20.4s
  .long  0x6e3adeba                          // fmul          v26.4s, v21.4s, v26.4s
  .long  0x6e34ff5a                          // fdiv          v26.4s, v26.4s, v20.4s
  .long  0x4e33f637                          // fmax          v23.4s, v17.4s, v19.4s
  .long  0x4eb21e5b                          // mov           v27.16b, v18.16b
  .long  0x4e3ad6ba                          // fadd          v26.4s, v21.4s, v26.4s
  .long  0x4e37f477                          // fmax          v23.4s, v3.4s, v23.4s
  .long  0x6e7a1c7b                          // bsl           v27.16b, v3.16b, v26.16b
  .long  0x4eb5d623                          // fsub          v3.4s, v17.4s, v21.4s
  .long  0x6e23dea3                          // fmul          v3.4s, v21.4s, v3.4s
  .long  0x6e34fc63                          // fdiv          v3.4s, v3.4s, v20.4s
  .long  0x4eb21e5a                          // mov           v26.16b, v18.16b
  .long  0x4e23d6a3                          // fadd          v3.4s, v21.4s, v3.4s
  .long  0x6e631e3a                          // bsl           v26.16b, v17.16b, v3.16b
  .long  0x4eb5d671                          // fsub          v17.4s, v19.4s, v21.4s
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e34fe31                          // fdiv          v17.4s, v17.4s, v20.4s
  .long  0x4e31d6b1                          // fadd          v17.4s, v21.4s, v17.4s
  .long  0x6e711e72                          // bsl           v18.16b, v19.16b, v17.16b
  .long  0x4eb5d61c                          // fsub          v28.4s, v16.4s, v21.4s
  .long  0x4eb5d771                          // fsub          v17.4s, v27.4s, v21.4s
  .long  0x4eb5d753                          // fsub          v19.4s, v26.4s, v21.4s
  .long  0x4eb5d654                          // fsub          v20.4s, v18.4s, v21.4s
  .long  0x6eb0e6f9                          // fcmgt         v25.4s, v23.4s, v16.4s
  .long  0x4eb5d6f7                          // fsub          v23.4s, v23.4s, v21.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e34df94                          // fmul          v20.4s, v28.4s, v20.4s
  .long  0x6e37fe31                          // fdiv          v17.4s, v17.4s, v23.4s
  .long  0x6e37fe73                          // fdiv          v19.4s, v19.4s, v23.4s
  .long  0x6e37fe94                          // fdiv          v20.4s, v20.4s, v23.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4eb91f23                          // mov           v3.16b, v25.16b
  .long  0x4eb91f3c                          // mov           v28.16b, v25.16b
  .long  0x4e31d6b1                          // fadd          v17.4s, v21.4s, v17.4s
  .long  0x4e33d6b3                          // fadd          v19.4s, v21.4s, v19.4s
  .long  0x4e34d6b4                          // fadd          v20.4s, v21.4s, v20.4s
  .long  0x6f00e416                          // movi          v22.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e7a1e7c                          // bsl           v28.16b, v19.16b, v26.16b
  .long  0x6e721e99                          // bsl           v25.16b, v20.16b, v18.16b
  .long  0x4e36f463                          // fmax          v3.4s, v3.4s, v22.4s
  .long  0x4e36f791                          // fmax          v17.4s, v28.4s, v22.4s
  .long  0x4e36f732                          // fmax          v18.4s, v25.4s, v22.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e32d442                          // fadd          v2.4s, v2.4s, v18.4s
  .long  0x4eb0d703                          // fsub          v3.4s, v24.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_luminosity_aarch64
.globl _sk_luminosity_aarch64
FUNCTION(_sk_luminosity_aarch64)
_sk_luminosity_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4e040d15                          // dup           v21.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4f03f617                          // fmov          v23.4s, #1.000000000000000000e+00
  .long  0x6e35de7b                          // fmul          v27.4s, v19.4s, v21.4s
  .long  0x6e26dc74                          // fmul          v20.4s, v3.4s, v6.4s
  .long  0x6e27dc70                          // fmul          v16.4s, v3.4s, v7.4s
  .long  0x4e27d478                          // fadd          v24.4s, v3.4s, v7.4s
  .long  0x4e040d19                          // dup           v25.4s, w8
  .long  0x4ea7d6fa                          // fsub          v26.4s, v23.4s, v7.4s
  .long  0x4ea3d6e3                          // fsub          v3.4s, v23.4s, v3.4s
  .long  0x6e35dc37                          // fmul          v23.4s, v1.4s, v21.4s
  .long  0x4e31ce5b                          // fmla          v27.4s, v18.4s, v17.4s
  .long  0x4e20ce57                          // fmla          v23.4s, v18.4s, v0.4s
  .long  0x4e34cf3b                          // fmla          v27.4s, v25.4s, v20.4s
  .long  0x6e20df5c                          // fmul          v28.4s, v26.4s, v0.4s
  .long  0x4e22cf37                          // fmla          v23.4s, v25.4s, v2.4s
  .long  0x6ea0fb60                          // fneg          v0.4s, v27.4s
  .long  0x6e21df41                          // fmul          v1.4s, v26.4s, v1.4s
  .long  0x6e22df5a                          // fmul          v26.4s, v26.4s, v2.4s
  .long  0x4e37cce0                          // fmla          v0.4s, v7.4s, v23.4s
  .long  0x4e23cc9c                          // fmla          v28.4s, v4.4s, v3.4s
  .long  0x4e23cca1                          // fmla          v1.4s, v5.4s, v3.4s
  .long  0x4e23ccda                          // fmla          v26.4s, v6.4s, v3.4s
  .long  0x4e20d663                          // fadd          v3.4s, v19.4s, v0.4s
  .long  0x4e20d622                          // fadd          v2.4s, v17.4s, v0.4s
  .long  0x4e20d680                          // fadd          v0.4s, v20.4s, v0.4s
  .long  0x6e35dc74                          // fmul          v20.4s, v3.4s, v21.4s
  .long  0x4e22ce54                          // fmla          v20.4s, v18.4s, v2.4s
  .long  0x4ea0f471                          // fmin          v17.4s, v3.4s, v0.4s
  .long  0x4e20cf34                          // fmla          v20.4s, v25.4s, v0.4s
  .long  0x4eb1f451                          // fmin          v17.4s, v2.4s, v17.4s
  .long  0x4eb4d457                          // fsub          v23.4s, v2.4s, v20.4s
  .long  0x6ea0ca32                          // fcmge         v18.4s, v17.4s, #0.0
  .long  0x4eb1d691                          // fsub          v17.4s, v20.4s, v17.4s
  .long  0x6e37de97                          // fmul          v23.4s, v20.4s, v23.4s
  .long  0x6e31fef7                          // fdiv          v23.4s, v23.4s, v17.4s
  .long  0x4e20f473                          // fmax          v19.4s, v3.4s, v0.4s
  .long  0x4eb21e59                          // mov           v25.16b, v18.16b
  .long  0x4e37d697                          // fadd          v23.4s, v20.4s, v23.4s
  .long  0x4e33f453                          // fmax          v19.4s, v2.4s, v19.4s
  .long  0x6e771c59                          // bsl           v25.16b, v2.16b, v23.16b
  .long  0x4eb4d462                          // fsub          v2.4s, v3.4s, v20.4s
  .long  0x6e22de82                          // fmul          v2.4s, v20.4s, v2.4s
  .long  0x6e31fc42                          // fdiv          v2.4s, v2.4s, v17.4s
  .long  0x4eb21e57                          // mov           v23.16b, v18.16b
  .long  0x4e22d682                          // fadd          v2.4s, v20.4s, v2.4s
  .long  0x6e621c77                          // bsl           v23.16b, v3.16b, v2.16b
  .long  0x4eb4d403                          // fsub          v3.4s, v0.4s, v20.4s
  .long  0x6e23de83                          // fmul          v3.4s, v20.4s, v3.4s
  .long  0x6e31fc63                          // fdiv          v3.4s, v3.4s, v17.4s
  .long  0x4e23d683                          // fadd          v3.4s, v20.4s, v3.4s
  .long  0x6e631c12                          // bsl           v18.16b, v0.16b, v3.16b
  .long  0x4eb4d61b                          // fsub          v27.4s, v16.4s, v20.4s
  .long  0x4eb4d720                          // fsub          v0.4s, v25.4s, v20.4s
  .long  0x4eb4d6e3                          // fsub          v3.4s, v23.4s, v20.4s
  .long  0x4eb4d651                          // fsub          v17.4s, v18.4s, v20.4s
  .long  0x6eb0e675                          // fcmgt         v21.4s, v19.4s, v16.4s
  .long  0x4eb4d673                          // fsub          v19.4s, v19.4s, v20.4s
  .long  0x6e20df60                          // fmul          v0.4s, v27.4s, v0.4s
  .long  0x6e23df63                          // fmul          v3.4s, v27.4s, v3.4s
  .long  0x6e31df71                          // fmul          v17.4s, v27.4s, v17.4s
  .long  0x6e33fc00                          // fdiv          v0.4s, v0.4s, v19.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4eb51ea2                          // mov           v2.16b, v21.16b
  .long  0x4eb51ebb                          // mov           v27.16b, v21.16b
  .long  0x4e20d680                          // fadd          v0.4s, v20.4s, v0.4s
  .long  0x4e23d683                          // fadd          v3.4s, v20.4s, v3.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x6f00e416                          // movi          v22.2d, #0x0
  .long  0x6e791c02                          // bsl           v2.16b, v0.16b, v25.16b
  .long  0x6e771c7b                          // bsl           v27.16b, v3.16b, v23.16b
  .long  0x6e721e35                          // bsl           v21.16b, v17.16b, v18.16b
  .long  0x4e36f440                          // fmax          v0.4s, v2.4s, v22.4s
  .long  0x4e36f762                          // fmax          v2.4s, v27.4s, v22.4s
  .long  0x4e36f6a3                          // fmax          v3.4s, v21.4s, v22.4s
  .long  0x4e20d780                          // fadd          v0.4s, v28.4s, v0.4s
  .long  0x4e22d421                          // fadd          v1.4s, v1.4s, v2.4s
  .long  0x4e23d742                          // fadd          v2.4s, v26.4s, v3.4s
  .long  0x4eb0d703                          // fsub          v3.4s, v24.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_clamp_0_aarch64
.globl _sk_clamp_0_aarch64
FUNCTION(_sk_clamp_0_aarch64)
_sk_clamp_0_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x4e30f400                          // fmax          v0.4s, v0.4s, v16.4s
  .long  0x4e30f421                          // fmax          v1.4s, v1.4s, v16.4s
  .long  0x4e30f442                          // fmax          v2.4s, v2.4s, v16.4s
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_clamp_1_aarch64
.globl _sk_clamp_1_aarch64
FUNCTION(_sk_clamp_1_aarch64)
_sk_clamp_1_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0x4eb0f421                          // fmin          v1.4s, v1.4s, v16.4s
  .long  0x4eb0f442                          // fmin          v2.4s, v2.4s, v16.4s
  .long  0x4eb0f463                          // fmin          v3.4s, v3.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_clamp_a_aarch64
.globl _sk_clamp_a_aarch64
FUNCTION(_sk_clamp_a_aarch64)
_sk_clamp_a_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f463                          // fmin          v3.4s, v3.4s, v16.4s
  .long  0x4ea3f400                          // fmin          v0.4s, v0.4s, v3.4s
  .long  0x4ea3f421                          // fmin          v1.4s, v1.4s, v3.4s
  .long  0x4ea3f442                          // fmin          v2.4s, v2.4s, v3.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_set_rgb_aarch64
.globl _sk_set_rgb_aarch64
FUNCTION(_sk_set_rgb_aarch64)
_sk_set_rgb_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x4ddfc920                          // ld1r          {v0.4s}, [x9], #4
  .long  0x91002108                          // add           x8, x8, #0x8
  .long  0x4d40c902                          // ld1r          {v2.4s}, [x8]
  .long  0x4d40c921                          // ld1r          {v1.4s}, [x9]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_swap_rb_aarch64
.globl _sk_swap_rb_aarch64
FUNCTION(_sk_swap_rb_aarch64)
_sk_swap_rb_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea01c10                          // mov           v16.16b, v0.16b
  .long  0x4ea21c40                          // mov           v0.16b, v2.16b
  .long  0x4eb01e02                          // mov           v2.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_swap_aarch64
.globl _sk_swap_aarch64
FUNCTION(_sk_swap_aarch64)
_sk_swap_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea31c70                          // mov           v16.16b, v3.16b
  .long  0x4ea21c51                          // mov           v17.16b, v2.16b
  .long  0x4ea11c32                          // mov           v18.16b, v1.16b
  .long  0x4ea01c13                          // mov           v19.16b, v0.16b
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0x4eb31e64                          // mov           v4.16b, v19.16b
  .long  0x4eb21e45                          // mov           v5.16b, v18.16b
  .long  0x4eb11e26                          // mov           v6.16b, v17.16b
  .long  0x4eb01e07                          // mov           v7.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_move_src_dst_aarch64
.globl _sk_move_src_dst_aarch64
FUNCTION(_sk_move_src_dst_aarch64)
_sk_move_src_dst_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea01c04                          // mov           v4.16b, v0.16b
  .long  0x4ea11c25                          // mov           v5.16b, v1.16b
  .long  0x4ea21c46                          // mov           v6.16b, v2.16b
  .long  0x4ea31c67                          // mov           v7.16b, v3.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_move_dst_src_aarch64
.globl _sk_move_dst_src_aarch64
FUNCTION(_sk_move_dst_src_aarch64)
_sk_move_dst_src_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_premul_aarch64
.globl _sk_premul_aarch64
FUNCTION(_sk_premul_aarch64)
_sk_premul_aarch64:
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x6e23dc21                          // fmul          v1.4s, v1.4s, v3.4s
  .long  0x6e23dc42                          // fmul          v2.4s, v2.4s, v3.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_unpremul_aarch64
.globl _sk_unpremul_aarch64
FUNCTION(_sk_unpremul_aarch64)
_sk_unpremul_aarch64:
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea0d870                          // fcmeq         v16.4s, v3.4s, #0.0
  .long  0x6e23fe31                          // fdiv          v17.4s, v17.4s, v3.4s
  .long  0x4e701e30                          // bic           v16.16b, v17.16b, v16.16b
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_from_srgb_aarch64
.globl _sk_from_srgb_aarch64
FUNCTION(_sk_from_srgb_aarch64)
_sk_from_srgb_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a7e648                          // mov           w8, #0x3f320000
  .long  0x7291eb88                          // movk          w8, #0x8f5c
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a76468                          // mov           w8, #0x3b230000
  .long  0x729ae148                          // movk          w8, #0xd70a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7b3c8                          // mov           w8, #0x3d9e0000
  .long  0x72907228                          // movk          w8, #0x8391
  .long  0x6e22dc54                          // fmul          v20.4s, v2.4s, v2.4s
  .long  0x4eb11e35                          // mov           v21.16b, v17.16b
  .long  0x4eb11e37                          // mov           v23.16b, v17.16b
  .long  0x4e22ce11                          // fmla          v17.4s, v16.4s, v2.4s
  .long  0x4eb21e56                          // mov           v22.16b, v18.16b
  .long  0x4eb21e58                          // mov           v24.16b, v18.16b
  .long  0x4e34ce32                          // fmla          v18.4s, v17.4s, v20.4s
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7ac28                          // mov           w8, #0x3d610000
  .long  0x6e20dc13                          // fmul          v19.4s, v0.4s, v0.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4e20ce15                          // fmla          v21.4s, v16.4s, v0.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e21dc34                          // fmul          v20.4s, v1.4s, v1.4s
  .long  0x4e33ceb6                          // fmla          v22.4s, v21.4s, v19.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e21ce17                          // fmla          v23.4s, v16.4s, v1.4s
  .long  0x6e31dc15                          // fmul          v21.4s, v0.4s, v17.4s
  .long  0x6ea0e660                          // fcmgt         v0.4s, v19.4s, v0.4s
  .long  0x6e31dc30                          // fmul          v16.4s, v1.4s, v17.4s
  .long  0x6ea1e661                          // fcmgt         v1.4s, v19.4s, v1.4s
  .long  0x6e31dc51                          // fmul          v17.4s, v2.4s, v17.4s
  .long  0x6ea2e662                          // fcmgt         v2.4s, v19.4s, v2.4s
  .long  0x4e34cef8                          // fmla          v24.4s, v23.4s, v20.4s
  .long  0x6e761ea0                          // bsl           v0.16b, v21.16b, v22.16b
  .long  0x6e781e01                          // bsl           v1.16b, v16.16b, v24.16b
  .long  0x6e721e22                          // bsl           v2.16b, v17.16b, v18.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_to_srgb_aarch64
.globl _sk_to_srgb_aarch64
FUNCTION(_sk_to_srgb_aarch64)
_sk_to_srgb_aarch64:
  .long  0x52a828e8                          // mov           w8, #0x41470000
  .long  0x728b8528                          // movk          w8, #0x5c29
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7e608                          // mov           w8, #0x3f300000
  .long  0x728df9c8                          // movk          w8, #0x6fce
  .long  0x6ea1d811                          // frsqrte       v17.4s, v0.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52b7b948                          // mov           w8, #0xbdca0000
  .long  0x728af508                          // movk          w8, #0x57a8
  .long  0x6ea1d834                          // frsqrte       v20.4s, v1.4s
  .long  0x6e31de36                          // fmul          v22.4s, v17.4s, v17.4s
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a77188                          // mov           w8, #0x3b8c0000
  .long  0x6ea1d855                          // frsqrte       v21.4s, v2.4s
  .long  0x6e34de98                          // fmul          v24.4s, v20.4s, v20.4s
  .long  0x4eb6fc16                          // frsqrts       v22.4s, v0.4s, v22.4s
  .long  0x729ce088                          // movk          w8, #0xe704
  .long  0x6e35deb9                          // fmul          v25.4s, v21.4s, v21.4s
  .long  0x4eb8fc38                          // frsqrts       v24.4s, v1.4s, v24.4s
  .long  0x6e36de31                          // fmul          v17.4s, v17.4s, v22.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x4eb9fc59                          // frsqrts       v25.4s, v2.4s, v25.4s
  .long  0x6e38de94                          // fmul          v20.4s, v20.4s, v24.4s
  .long  0x4ea1da36                          // frecpe        v22.4s, v17.4s
  .long  0x6e32dc1a                          // fmul          v26.4s, v0.4s, v18.4s
  .long  0x6ea0e6e0                          // fcmgt         v0.4s, v23.4s, v0.4s
  .long  0x6e32dc3c                          // fmul          v28.4s, v1.4s, v18.4s
  .long  0x6ea1e6e1                          // fcmgt         v1.4s, v23.4s, v1.4s
  .long  0x6e32dc52                          // fmul          v18.4s, v2.4s, v18.4s
  .long  0x6ea2e6e2                          // fcmgt         v2.4s, v23.4s, v2.4s
  .long  0x6e39deb5                          // fmul          v21.4s, v21.4s, v25.4s
  .long  0x4ea1da97                          // frecpe        v23.4s, v20.4s
  .long  0x4e36fe39                          // frecps        v25.4s, v17.4s, v22.4s
  .long  0x4ea1dab8                          // frecpe        v24.4s, v21.4s
  .long  0x6e39ded6                          // fmul          v22.4s, v22.4s, v25.4s
  .long  0x4e37fe99                          // frecps        v25.4s, v20.4s, v23.4s
  .long  0x4eb01e1b                          // mov           v27.16b, v16.16b
  .long  0x6e39def7                          // fmul          v23.4s, v23.4s, v25.4s
  .long  0x4e38feb9                          // frecps        v25.4s, v21.4s, v24.4s
  .long  0x6e39df18                          // fmul          v24.4s, v24.4s, v25.4s
  .long  0x4eb01e19                          // mov           v25.16b, v16.16b
  .long  0x4e36ce7b                          // fmla          v27.4s, v19.4s, v22.4s
  .long  0x6ea1da36                          // frsqrte       v22.4s, v17.4s
  .long  0x4e37ce79                          // fmla          v25.4s, v19.4s, v23.4s
  .long  0x6ea1da97                          // frsqrte       v23.4s, v20.4s
  .long  0x4e38ce70                          // fmla          v16.4s, v19.4s, v24.4s
  .long  0x6e36ded8                          // fmul          v24.4s, v22.4s, v22.4s
  .long  0x6ea1dab3                          // frsqrte       v19.4s, v21.4s
  .long  0x4eb8fe31                          // frsqrts       v17.4s, v17.4s, v24.4s
  .long  0x6e37def8                          // fmul          v24.4s, v23.4s, v23.4s
  .long  0x4eb8fe94                          // frsqrts       v20.4s, v20.4s, v24.4s
  .long  0x6e33de78                          // fmul          v24.4s, v19.4s, v19.4s
  .long  0x52a7da48                          // mov           w8, #0x3ed20000
  .long  0x4eb8feb5                          // frsqrts       v21.4s, v21.4s, v24.4s
  .long  0x7290f848                          // movk          w8, #0x87c2
  .long  0x6e31ded1                          // fmul          v17.4s, v22.4s, v17.4s
  .long  0x6e34def4                          // fmul          v20.4s, v23.4s, v20.4s
  .long  0x6e35de73                          // fmul          v19.4s, v19.4s, v21.4s
  .long  0x4e040d15                          // dup           v21.4s, w8
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e31cebb                          // fmla          v27.4s, v21.4s, v17.4s
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x4e34ceb9                          // fmla          v25.4s, v21.4s, v20.4s
  .long  0x4e33ceb0                          // fmla          v16.4s, v21.4s, v19.4s
  .long  0x4ebbf633                          // fmin          v19.4s, v17.4s, v27.4s
  .long  0x4eb9f634                          // fmin          v20.4s, v17.4s, v25.4s
  .long  0x4eb0f630                          // fmin          v16.4s, v17.4s, v16.4s
  .long  0x6e731f40                          // bsl           v0.16b, v26.16b, v19.16b
  .long  0x6e741f81                          // bsl           v1.16b, v28.16b, v20.16b
  .long  0x6e701e42                          // bsl           v2.16b, v18.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_rgb_to_hsl_aarch64
.globl _sk_rgb_to_hsl_aarch64
FUNCTION(_sk_rgb_to_hsl_aarch64)
_sk_rgb_to_hsl_aarch64:
  .long  0x4e21f410                          // fmax          v16.4s, v0.4s, v1.4s
  .long  0x4ea1f411                          // fmin          v17.4s, v0.4s, v1.4s
  .long  0x6ea1e454                          // fcmgt         v20.4s, v2.4s, v1.4s
  .long  0x4f00f715                          // fmov          v21.4s, #6.000000000000000000e+00
  .long  0x4e22f610                          // fmax          v16.4s, v16.4s, v2.4s
  .long  0x4ea2f631                          // fmin          v17.4s, v17.4s, v2.4s
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x4e341eb4                          // and           v20.16b, v21.16b, v20.16b
  .long  0x4eb1d615                          // fsub          v21.4s, v16.4s, v17.4s
  .long  0x4ea2d433                          // fsub          v19.4s, v1.4s, v2.4s
  .long  0x4ea0d456                          // fsub          v22.4s, v2.4s, v0.4s
  .long  0x4f026417                          // movi          v23.4s, #0x40, lsl #24
  .long  0x6e35fe42                          // fdiv          v2.4s, v18.4s, v21.4s
  .long  0x4ea1d418                          // fsub          v24.4s, v0.4s, v1.4s
  .long  0x4f00f619                          // fmov          v25.4s, #4.000000000000000000e+00
  .long  0x4f0167fa                          // movi          v26.4s, #0x3f, lsl #24
  .long  0x4eb0d6f2                          // fsub          v18.4s, v23.4s, v16.4s
  .long  0x4e36cc57                          // fmla          v23.4s, v2.4s, v22.4s
  .long  0x4e31e616                          // fcmeq         v22.4s, v16.4s, v17.4s
  .long  0x4e20e600                          // fcmeq         v0.4s, v16.4s, v0.4s
  .long  0x4e21e601                          // fcmeq         v1.4s, v16.4s, v1.4s
  .long  0x4e31d610                          // fadd          v16.4s, v16.4s, v17.4s
  .long  0x52a7c548                          // mov           w8, #0x3e2a0000
  .long  0x4e33cc54                          // fmla          v20.4s, v2.4s, v19.4s
  .long  0x4e38cc59                          // fmla          v25.4s, v2.4s, v24.4s
  .long  0x6e3ade02                          // fmul          v2.4s, v16.4s, v26.4s
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4eb1d651                          // fsub          v17.4s, v18.4s, v17.4s
  .long  0x6ebae452                          // fcmgt         v18.4s, v2.4s, v26.4s
  .long  0x6e791ee1                          // bsl           v1.16b, v23.16b, v25.16b
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x6e701e32                          // bsl           v18.16b, v17.16b, v16.16b
  .long  0x6e611e80                          // bsl           v0.16b, v20.16b, v1.16b
  .long  0x6e32fea1                          // fdiv          v1.4s, v21.4s, v18.4s
  .long  0x6e33dc00                          // fmul          v0.4s, v0.4s, v19.4s
  .long  0x4e761c00                          // bic           v0.16b, v0.16b, v22.16b
  .long  0x4e761c21                          // bic           v1.16b, v1.16b, v22.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_hsl_to_rgb_aarch64
.globl _sk_hsl_to_rgb_aarch64
FUNCTION(_sk_hsl_to_rgb_aarch64)
_sk_hsl_to_rgb_aarch64:
  .long  0x52a7d548                          // mov           w8, #0x3eaa0000
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x4e040d14                          // dup           v20.4s, w8
  .long  0x52a7e548                          // mov           w8, #0x3f2a0000
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x4f0167f1                          // movi          v17.4s, #0x3f, lsl #24
  .long  0x6e22dc32                          // fmul          v18.4s, v1.4s, v2.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x52b7d548                          // mov           w8, #0xbeaa0000
  .long  0x4ea0d830                          // fcmeq         v16.4s, v1.4s, #0.0
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x6e31e45a                          // fcmge         v26.4s, v2.4s, v17.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x4e219819                          // frintm        v25.4s, v0.4s
  .long  0x6e721c3a                          // bsl           v26.16b, v1.16b, v18.16b
  .long  0x4e34d401                          // fadd          v1.4s, v0.4s, v20.4s
  .long  0x4eb9d419                          // fsub          v25.4s, v0.4s, v25.4s
  .long  0x4e38d400                          // fadd          v0.4s, v0.4s, v24.4s
  .long  0x4e22d754                          // fadd          v20.4s, v26.4s, v2.4s
  .long  0x4e219838                          // frintm        v24.4s, v1.4s
  .long  0x4f026413                          // movi          v19.4s, #0x40, lsl #24
  .long  0x4f00f715                          // fmov          v21.4s, #6.000000000000000000e+00
  .long  0x4e21981b                          // frintm        v27.4s, v0.4s
  .long  0x6ea0fa9c                          // fneg          v28.4s, v20.4s
  .long  0x4eb8d421                          // fsub          v1.4s, v1.4s, v24.4s
  .long  0x4f00f616                          // fmov          v22.4s, #4.000000000000000000e+00
  .long  0x4ebbd418                          // fsub          v24.4s, v0.4s, v27.4s
  .long  0x4e22ce7c                          // fmla          v28.4s, v19.4s, v2.4s
  .long  0x6e35dc20                          // fmul          v0.4s, v1.4s, v21.4s
  .long  0x6e35df32                          // fmul          v18.4s, v25.4s, v21.4s
  .long  0x6e35df13                          // fmul          v19.4s, v24.4s, v21.4s
  .long  0x4ebcd695                          // fsub          v21.4s, v20.4s, v28.4s
  .long  0x4ea0d6db                          // fsub          v27.4s, v22.4s, v0.4s
  .long  0x4ebc1f9d                          // mov           v29.16b, v28.16b
  .long  0x4e3bcebd                          // fmla          v29.4s, v21.4s, v27.4s
  .long  0x4ebc1f9b                          // mov           v27.16b, v28.16b
  .long  0x4eb2d6da                          // fsub          v26.4s, v22.4s, v18.4s
  .long  0x4e20cebb                          // fmla          v27.4s, v21.4s, v0.4s
  .long  0x4ebc1f80                          // mov           v0.16b, v28.16b
  .long  0x4e3acea0                          // fmla          v0.4s, v21.4s, v26.4s
  .long  0x4ebc1f9a                          // mov           v26.16b, v28.16b
  .long  0x4eb3d6d6                          // fsub          v22.4s, v22.4s, v19.4s
  .long  0x4e32ceba                          // fmla          v26.4s, v21.4s, v18.4s
  .long  0x4ebc1f92                          // mov           v18.16b, v28.16b
  .long  0x52a7c548                          // mov           w8, #0x3e2a0000
  .long  0x4e36ceb2                          // fmla          v18.4s, v21.4s, v22.4s
  .long  0x6e37e436                          // fcmge         v22.4s, v1.4s, v23.4s
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x6e7d1f96                          // bsl           v22.16b, v28.16b, v29.16b
  .long  0x6e37e73d                          // fcmge         v29.4s, v25.4s, v23.4s
  .long  0x6e37e717                          // fcmge         v23.4s, v24.4s, v23.4s
  .long  0x6e601f9d                          // bsl           v29.16b, v28.16b, v0.16b
  .long  0x4e040d1e                          // dup           v30.4s, w8
  .long  0x6e721f97                          // bsl           v23.16b, v28.16b, v18.16b
  .long  0x4e33cebc                          // fmla          v28.4s, v21.4s, v19.4s
  .long  0x6e31e732                          // fcmge         v18.4s, v25.4s, v17.4s
  .long  0x6e31e435                          // fcmge         v21.4s, v1.4s, v17.4s
  .long  0x6e31e711                          // fcmge         v17.4s, v24.4s, v17.4s
  .long  0x6e3ee718                          // fcmge         v24.4s, v24.4s, v30.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e741ef1                          // bsl           v17.16b, v23.16b, v20.16b
  .long  0x6e3ee733                          // fcmge         v19.4s, v25.4s, v30.4s
  .long  0x6e3ee439                          // fcmge         v25.4s, v1.4s, v30.4s
  .long  0x6e741ed5                          // bsl           v21.16b, v22.16b, v20.16b
  .long  0x6e741fb2                          // bsl           v18.16b, v29.16b, v20.16b
  .long  0x6e7c1e38                          // bsl           v24.16b, v17.16b, v28.16b
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb01e01                          // mov           v1.16b, v16.16b
  .long  0x6e7b1eb9                          // bsl           v25.16b, v21.16b, v27.16b
  .long  0x6e7a1e53                          // bsl           v19.16b, v18.16b, v26.16b
  .long  0x6e781c50                          // bsl           v16.16b, v2.16b, v24.16b
  .long  0x6e791c40                          // bsl           v0.16b, v2.16b, v25.16b
  .long  0x6e731c41                          // bsl           v1.16b, v2.16b, v19.16b
  .long  0x4eb01e02                          // mov           v2.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_scale_1_float_aarch64
.globl _sk_scale_1_float_aarch64
FUNCTION(_sk_scale_1_float_aarch64)
_sk_scale_1_float_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4f909000                          // fmul          v0.4s, v0.4s, v16.s[0]
  .long  0x4f909021                          // fmul          v1.4s, v1.4s, v16.s[0]
  .long  0x4f909042                          // fmul          v2.4s, v2.4s, v16.s[0]
  .long  0x4f909063                          // fmul          v3.4s, v3.4s, v16.s[0]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_scale_u8_aarch64
.globl _sk_scale_u8_aarch64
FUNCTION(_sk_scale_u8_aarch64)
_sk_scale_u8_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b000108                          // add           x8, x8, x0
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d31                          // mov           v17.h[0], w9
  .long  0x4e061d51                          // mov           v17.h[1], w10
  .long  0x4e0a1d71                          // mov           v17.h[2], w11
  .long  0x4e0e1d11                          // mov           v17.h[3], w8
  .long  0x2f10a631                          // uxtl          v17.4s, v17.4h
  .long  0x6e21da31                          // ucvtf         v17.4s, v17.4s
  .long  0x6e30de30                          // fmul          v16.4s, v17.4s, v16.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_lerp_1_float_aarch64
.globl _sk_lerp_1_float_aarch64
FUNCTION(_sk_lerp_1_float_aarch64)
_sk_lerp_1_float_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x4ea4d411                          // fsub          v17.4s, v0.4s, v4.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea5d432                          // fsub          v18.4s, v1.4s, v5.4s
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4f901220                          // fmla          v0.4s, v17.4s, v16.s[0]
  .long  0x4ea6d451                          // fsub          v17.4s, v2.4s, v6.4s
  .long  0x4f901241                          // fmla          v1.4s, v18.4s, v16.s[0]
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea7d472                          // fsub          v18.4s, v3.4s, v7.4s
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0x4f901222                          // fmla          v2.4s, v17.4s, v16.s[0]
  .long  0x4f901243                          // fmla          v3.4s, v18.4s, v16.s[0]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_lerp_u8_aarch64
.globl _sk_lerp_u8_aarch64
FUNCTION(_sk_lerp_u8_aarch64)
_sk_lerp_u8_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4ea4d412                          // fsub          v18.4s, v0.4s, v4.4s
  .long  0x8b000108                          // add           x8, x8, x0
  .long  0x3940010a                          // ldrb          w10, [x8]
  .long  0x39400509                          // ldrb          w9, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d51                          // mov           v17.h[0], w10
  .long  0x4e061d31                          // mov           v17.h[1], w9
  .long  0x4e0a1d71                          // mov           v17.h[2], w11
  .long  0x4e0e1d11                          // mov           v17.h[3], w8
  .long  0x2f10a620                          // uxtl          v0.4s, v17.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e30dc10                          // fmul          v16.4s, v0.4s, v16.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea5d431                          // fsub          v17.4s, v1.4s, v5.4s
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4e32ce00                          // fmla          v0.4s, v16.4s, v18.4s
  .long  0x4ea6d452                          // fsub          v18.4s, v2.4s, v6.4s
  .long  0x4e31ce01                          // fmla          v1.4s, v16.4s, v17.4s
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea7d471                          // fsub          v17.4s, v3.4s, v7.4s
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0x4e32ce02                          // fmla          v2.4s, v16.4s, v18.4s
  .long  0x4e31ce03                          // fmla          v3.4s, v16.4s, v17.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_lerp_565_aarch64
.globl _sk_lerp_565_aarch64
FUNCTION(_sk_lerp_565_aarch64)
_sk_lerp_565_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xd37ff809                          // lsl           x9, x0, #1
  .long  0x4f072711                          // movi          v17.4s, #0xf8, lsl #8
  .long  0x4ea4d416                          // fsub          v22.4s, v0.4s, v4.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4f0007f4                          // movi          v20.4s, #0x1f
  .long  0x4ea7d463                          // fsub          v3.4s, v3.4s, v7.4s
  .long  0xfc696910                          // ldr           d16, [x8, x9]
  .long  0x52a6f088                          // mov           w8, #0x37840000
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x321b17e8                          // orr           w8, wzr, #0x7e0
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a74048                          // mov           w8, #0x3a020000
  .long  0x2f10a600                          // uxtl          v0.4s, v16.4h
  .long  0x72810428                          // movk          w8, #0x821
  .long  0x4e311c10                          // and           v16.16b, v0.16b, v17.16b
  .long  0x4e040d15                          // dup           v21.4s, w8
  .long  0x52a7a088                          // mov           w8, #0x3d040000
  .long  0x4e331c11                          // and           v17.16b, v0.16b, v19.16b
  .long  0x4e341c13                          // and           v19.16b, v0.16b, v20.16b
  .long  0x4ea5d434                          // fsub          v20.4s, v1.4s, v5.4s
  .long  0x4e21da01                          // scvtf         v1.4s, v16.4s
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x6e32dc30                          // fmul          v16.4s, v1.4s, v18.4s
  .long  0x4ea6d452                          // fsub          v18.4s, v2.4s, v6.4s
  .long  0x4e21da22                          // scvtf         v2.4s, v17.4s
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x6e35dc51                          // fmul          v17.4s, v2.4s, v21.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x4e21da73                          // scvtf         v19.4s, v19.4s
  .long  0x6e22de73                          // fmul          v19.4s, v19.4s, v2.4s
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea71cf5                          // mov           v21.16b, v7.16b
  .long  0x4e34ce21                          // fmla          v1.4s, v17.4s, v20.4s
  .long  0x4ea71cf4                          // mov           v20.16b, v7.16b
  .long  0x4e32ce62                          // fmla          v2.4s, v19.4s, v18.4s
  .long  0x4ea71cf2                          // mov           v18.16b, v7.16b
  .long  0x4e23ce35                          // fmla          v21.4s, v17.4s, v3.4s
  .long  0x4e23ce74                          // fmla          v20.4s, v19.4s, v3.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4e23ce12                          // fmla          v18.4s, v16.4s, v3.4s
  .long  0x4e34f6a3                          // fmax          v3.4s, v21.4s, v20.4s
  .long  0x4e36ce00                          // fmla          v0.4s, v16.4s, v22.4s
  .long  0x4e23f643                          // fmax          v3.4s, v18.4s, v3.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_tables_aarch64
.globl _sk_load_tables_aarch64
FUNCTION(_sk_load_tables_aarch64)
_sk_load_tables_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xd37ef409                          // lsl           x9, x0, #2
  .long  0x6f00e620                          // movi          v0.2d, #0xff000000ff
  .long  0x52a7700b                          // mov           w11, #0x3b800000
  .long  0xa940310a                          // ldp           x10, x12, [x8]
  .long  0x7290102b                          // movk          w11, #0x8081
  .long  0x4e040d63                          // dup           v3.4s, w11
  .long  0x3ce96942                          // ldr           q2, [x10, x9]
  .long  0xa9412109                          // ldp           x9, x8, [x8, #16]
  .long  0x4e201c41                          // and           v1.16b, v2.16b, v0.16b
  .long  0x1e26002e                          // fmov          w14, s1
  .long  0x6f380450                          // ushr          v16.4s, v2.4s, #8
  .long  0x6f300451                          // ushr          v17.4s, v2.4s, #16
  .long  0x8b2e498e                          // add           x14, x12, w14, uxtw #2
  .long  0x0e0c3c2a                          // mov           w10, v1.s[1]
  .long  0x0e143c2b                          // mov           w11, v1.s[2]
  .long  0x0e1c3c2d                          // mov           w13, v1.s[3]
  .long  0x4e201e01                          // and           v1.16b, v16.16b, v0.16b
  .long  0x4e201e30                          // and           v16.16b, v17.16b, v0.16b
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x8b2a498a                          // add           x10, x12, w10, uxtw #2
  .long  0xbc6b5991                          // ldr           s17, [x12, w11, uxtw #2]
  .long  0xbc6d5992                          // ldr           s18, [x12, w13, uxtw #2]
  .long  0x0e0c3c2b                          // mov           w11, v1.s[1]
  .long  0x0e143c2c                          // mov           w12, v1.s[2]
  .long  0x0e1c3c2d                          // mov           w13, v1.s[3]
  .long  0x1e26002e                          // fmov          w14, s1
  .long  0x8b2e492e                          // add           x14, x9, w14, uxtw #2
  .long  0xbc6c5933                          // ldr           s19, [x9, w12, uxtw #2]
  .long  0xbc6d5934                          // ldr           s20, [x9, w13, uxtw #2]
  .long  0x8b2b4929                          // add           x9, x9, w11, uxtw #2
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x6f280442                          // ushr          v2.4s, v2.4s, #24
  .long  0x0d409140                          // ld1           {v0.s}[1], [x10]
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x8b2b490a                          // add           x10, x8, w11, uxtw #2
  .long  0x0d4081c1                          // ld1           {v1.s}[0], [x14]
  .long  0x6e23dc43                          // fmul          v3.4s, v2.4s, v3.4s
  .long  0x0d408142                          // ld1           {v2.s}[0], [x10]
  .long  0x0e0c3e0f                          // mov           w15, v16.s[1]
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0x8b2f490a                          // add           x10, x8, w15, uxtw #2
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0xbc6c5910                          // ldr           s16, [x8, w12, uxtw #2]
  .long  0x0d409121                          // ld1           {v1.s}[1], [x9]
  .long  0x0d409142                          // ld1           {v2.s}[1], [x10]
  .long  0x6e140620                          // mov           v0.s[2], v17.s[0]
  .long  0xbc6d5911                          // ldr           s17, [x8, w13, uxtw #2]
  .long  0x6e140661                          // mov           v1.s[2], v19.s[0]
  .long  0x6e140602                          // mov           v2.s[2], v16.s[0]
  .long  0x6e1c0640                          // mov           v0.s[3], v18.s[0]
  .long  0x6e1c0681                          // mov           v1.s[3], v20.s[0]
  .long  0x6e1c0622                          // mov           v2.s[3], v17.s[0]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_tables_u16_be_aarch64
.globl _sk_load_tables_u16_be_aarch64
FUNCTION(_sk_load_tables_u16_be_aarch64)
_sk_load_tables_u16_be_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x52a6f00a                          // mov           w10, #0x37800000
  .long  0x7280100a                          // movk          w10, #0x80
  .long  0x4e040d50                          // dup           v16.4s, w10
  .long  0xa9402d09                          // ldp           x9, x11, [x8]
  .long  0x8b000d29                          // add           x9, x9, x0, lsl #3
  .long  0x0c400520                          // ld4           {v0.4h-v3.4h}, [x9]
  .long  0xa9412109                          // ldp           x9, x8, [x8, #16]
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f10a411                          // uxtl          v17.4s, v0.4h
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0x1e26022e                          // fmov          w14, s17
  .long  0x0e0c3e2a                          // mov           w10, v17.s[1]
  .long  0x0e143e2c                          // mov           w12, v17.s[2]
  .long  0x0e1c3e2d                          // mov           w13, v17.s[3]
  .long  0x8b2e496e                          // add           x14, x11, w14, uxtw #2
  .long  0x2f10a431                          // uxtl          v17.4s, v1.4h
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f10a453                          // uxtl          v19.4s, v2.4h
  .long  0x2f180462                          // ushr          v2.4h, v3.4h, #8
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x0f185474                          // shl           v20.4h, v3.4h, #8
  .long  0x0ea21e82                          // orr           v2.8b, v20.8b, v2.8b
  .long  0x8b2a496a                          // add           x10, x11, w10, uxtw #2
  .long  0x1e26022e                          // fmov          w14, s17
  .long  0x1e26026f                          // fmov          w15, s19
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x8b2e492e                          // add           x14, x9, w14, uxtw #2
  .long  0x0d409140                          // ld1           {v0.s}[1], [x10]
  .long  0x8b2f490a                          // add           x10, x8, w15, uxtw #2
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x0d4081c1                          // ld1           {v1.s}[0], [x14]
  .long  0x6e30dc43                          // fmul          v3.4s, v2.4s, v16.4s
  .long  0x0d408142                          // ld1           {v2.s}[0], [x10]
  .long  0xbc6c5972                          // ldr           s18, [x11, w12, uxtw #2]
  .long  0xbc6d5975                          // ldr           s21, [x11, w13, uxtw #2]
  .long  0x0e0c3e2b                          // mov           w11, v17.s[1]
  .long  0x0e143e2c                          // mov           w12, v17.s[2]
  .long  0x0e1c3e2d                          // mov           w13, v17.s[3]
  .long  0x8b2b492b                          // add           x11, x9, w11, uxtw #2
  .long  0xbc6c5931                          // ldr           s17, [x9, w12, uxtw #2]
  .long  0xbc6d5936                          // ldr           s22, [x9, w13, uxtw #2]
  .long  0x0e0c3e69                          // mov           w9, v19.s[1]
  .long  0x0e143e6c                          // mov           w12, v19.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e6d                          // mov           w13, v19.s[3]
  .long  0xbc6c5913                          // ldr           s19, [x8, w12, uxtw #2]
  .long  0x0d409161                          // ld1           {v1.s}[1], [x11]
  .long  0x0d409122                          // ld1           {v2.s}[1], [x9]
  .long  0xbc6d5910                          // ldr           s16, [x8, w13, uxtw #2]
  .long  0x6e140640                          // mov           v0.s[2], v18.s[0]
  .long  0x6e140621                          // mov           v1.s[2], v17.s[0]
  .long  0x6e140662                          // mov           v2.s[2], v19.s[0]
  .long  0x6e1c06a0                          // mov           v0.s[3], v21.s[0]
  .long  0x6e1c06c1                          // mov           v1.s[3], v22.s[0]
  .long  0x6e1c0602                          // mov           v2.s[3], v16.s[0]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_tables_rgb_u16_be_aarch64
.globl _sk_load_tables_rgb_u16_be_aarch64
FUNCTION(_sk_load_tables_rgb_u16_be_aarch64)
_sk_load_tables_rgb_u16_be_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x321f07ea                          // orr           w10, wzr, #0x6
  .long  0xa9402d09                          // ldp           x9, x11, [x8]
  .long  0x9b0a2409                          // madd          x9, x0, x10, x9
  .long  0x0c404521                          // ld3           {v1.4h-v3.4h}, [x9]
  .long  0xa9412109                          // ldp           x9, x8, [x8, #16]
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0x2f10a420                          // uxtl          v0.4s, v1.4h
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x1e26000e                          // fmov          w14, s0
  .long  0x0e143c0c                          // mov           w12, v0.s[2]
  .long  0x8b2e496e                          // add           x14, x11, w14, uxtw #2
  .long  0x2f10a450                          // uxtl          v16.4s, v2.4h
  .long  0x0e0c3c0a                          // mov           w10, v0.s[1]
  .long  0x0e1c3c0d                          // mov           w13, v0.s[3]
  .long  0xbc6c5971                          // ldr           s17, [x11, w12, uxtw #2]
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0x1e26020e                          // fmov          w14, s16
  .long  0x2f07b7e3                          // bic           v3.4h, #0xff, lsl #8
  .long  0x8b2a496a                          // add           x10, x11, w10, uxtw #2
  .long  0xbc6d5972                          // ldr           s18, [x11, w13, uxtw #2]
  .long  0x0e0c3e0b                          // mov           w11, v16.s[1]
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0xbc6c5930                          // ldr           s16, [x9, w12, uxtw #2]
  .long  0x8b2e492c                          // add           x12, x9, w14, uxtw #2
  .long  0x2f10a462                          // uxtl          v2.4s, v3.4h
  .long  0xbc6d5923                          // ldr           s3, [x9, w13, uxtw #2]
  .long  0x0d408181                          // ld1           {v1.s}[0], [x12]
  .long  0x0e143c4c                          // mov           w12, v2.s[2]
  .long  0x1e26004d                          // fmov          w13, s2
  .long  0xbc6c5913                          // ldr           s19, [x8, w12, uxtw #2]
  .long  0x8b2d490c                          // add           x12, x8, w13, uxtw #2
  .long  0x8b2b492b                          // add           x11, x9, w11, uxtw #2
  .long  0x0e0c3c49                          // mov           w9, v2.s[1]
  .long  0x0d409140                          // ld1           {v0.s}[1], [x10]
  .long  0x0e1c3c4a                          // mov           w10, v2.s[3]
  .long  0x0d408182                          // ld1           {v2.s}[0], [x12]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0d409161                          // ld1           {v1.s}[1], [x11]
  .long  0x6e140620                          // mov           v0.s[2], v17.s[0]
  .long  0x0d409122                          // ld1           {v2.s}[1], [x9]
  .long  0xbc6a5911                          // ldr           s17, [x8, w10, uxtw #2]
  .long  0x6e140601                          // mov           v1.s[2], v16.s[0]
  .long  0x6e1c0640                          // mov           v0.s[3], v18.s[0]
  .long  0x6e140662                          // mov           v2.s[2], v19.s[0]
  .long  0x6e1c0461                          // mov           v1.s[3], v3.s[0]
  .long  0x6e1c0622                          // mov           v2.s[3], v17.s[0]
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_byte_tables_aarch64
.globl _sk_byte_tables_aarch64
FUNCTION(_sk_byte_tables_aarch64)
_sk_byte_tables_aarch64:
  .long  0xd10083ff                          // sub           sp, sp, #0x20
  .long  0xaa0103e8                          // mov           x8, x1
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xa9014ff4                          // stp           x20, x19, [sp, #16]
  .long  0xf90007e9                          // str           x9, [sp, #8]
  .long  0xf8410429                          // ldr           x9, [x1], #16
  .long  0x52a86fea                          // mov           w10, #0x437f0000
  .long  0x4e040d51                          // dup           v17.4s, w10
  .long  0x52a7700b                          // mov           w11, #0x3b800000
  .long  0xa9405126                          // ldp           x6, x20, [x9]
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x7290102b                          // movk          w11, #0x8081
  .long  0x6e21a800                          // fcvtnu        v0.4s, v0.4s
  .long  0x4e040d70                          // dup           v16.4s, w11
  .long  0x0e0c3c0a                          // mov           w10, v0.s[1]
  .long  0x0e143c0b                          // mov           w11, v0.s[2]
  .long  0x0e1c3c0c                          // mov           w12, v0.s[3]
  .long  0x1e26000d                          // fmov          w13, s0
  .long  0x386d48cd                          // ldrb          w13, [x6, w13, uxtw]
  .long  0x386a48ca                          // ldrb          w10, [x6, w10, uxtw]
  .long  0x386b48cb                          // ldrb          w11, [x6, w11, uxtw]
  .long  0x386c48cc                          // ldrb          w12, [x6, w12, uxtw]
  .long  0xa9412526                          // ldp           x6, x9, [x9, #16]
  .long  0x6e31dc42                          // fmul          v2.4s, v2.4s, v17.4s
  .long  0x6e31dc21                          // fmul          v1.4s, v1.4s, v17.4s
  .long  0x6e31dc63                          // fmul          v3.4s, v3.4s, v17.4s
  .long  0x6e21a842                          // fcvtnu        v2.4s, v2.4s
  .long  0x6e21a821                          // fcvtnu        v1.4s, v1.4s
  .long  0x6e21a863                          // fcvtnu        v3.4s, v3.4s
  .long  0x0e0c3c52                          // mov           w18, v2.s[1]
  .long  0x0e143c43                          // mov           w3, v2.s[2]
  .long  0x0e1c3c44                          // mov           w4, v2.s[3]
  .long  0x1e260045                          // fmov          w5, s2
  .long  0x1e260031                          // fmov          w17, s1
  .long  0x386548c5                          // ldrb          w5, [x6, w5, uxtw]
  .long  0x387248d2                          // ldrb          w18, [x6, w18, uxtw]
  .long  0x386348c3                          // ldrb          w3, [x6, w3, uxtw]
  .long  0x386448c4                          // ldrb          w4, [x6, w4, uxtw]
  .long  0x1e260066                          // fmov          w6, s3
  .long  0x0e0c3c2e                          // mov           w14, v1.s[1]
  .long  0x0e0c3c67                          // mov           w7, v3.s[1]
  .long  0x38714a91                          // ldrb          w17, [x20, w17, uxtw]
  .long  0x38664926                          // ldrb          w6, [x9, w6, uxtw]
  .long  0x0e143c2f                          // mov           w15, v1.s[2]
  .long  0x0e1c3c30                          // mov           w16, v1.s[3]
  .long  0x0e143c73                          // mov           w19, v3.s[2]
  .long  0x386e4a8e                          // ldrb          w14, [x20, w14, uxtw]
  .long  0x38674927                          // ldrb          w7, [x9, w7, uxtw]
  .long  0x386f4a8f                          // ldrb          w15, [x20, w15, uxtw]
  .long  0x38704a90                          // ldrb          w16, [x20, w16, uxtw]
  .long  0x0e1c3c74                          // mov           w20, v3.s[3]
  .long  0x38734933                          // ldrb          w19, [x9, w19, uxtw]
  .long  0x38744929                          // ldrb          w9, [x9, w20, uxtw]
  .long  0x4e021da0                          // mov           v0.h[0], w13
  .long  0x4e021e21                          // mov           v1.h[0], w17
  .long  0x4e021ca2                          // mov           v2.h[0], w5
  .long  0x4e021cc3                          // mov           v3.h[0], w6
  .long  0x4e061d40                          // mov           v0.h[1], w10
  .long  0x4e061dc1                          // mov           v1.h[1], w14
  .long  0x4e061e42                          // mov           v2.h[1], w18
  .long  0x4e061ce3                          // mov           v3.h[1], w7
  .long  0x4e0a1d60                          // mov           v0.h[2], w11
  .long  0x4e0a1de1                          // mov           v1.h[2], w15
  .long  0x4e0a1c62                          // mov           v2.h[2], w3
  .long  0x4e0a1e63                          // mov           v3.h[2], w19
  .long  0x4e0e1d80                          // mov           v0.h[3], w12
  .long  0x4e0e1e01                          // mov           v1.h[3], w16
  .long  0x4e0e1c82                          // mov           v2.h[3], w4
  .long  0x4e0e1d23                          // mov           v3.h[3], w9
  .long  0xf9400505                          // ldr           x5, [x8, #8]
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f07b7e3                          // bic           v3.4h, #0xff, lsl #8
  .long  0xa9414ff4                          // ldp           x20, x19, [sp, #16]
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x2f10a463                          // uxtl          v3.4s, v3.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e21d863                          // ucvtf         v3.4s, v3.4s
  .long  0x6e30dc00                          // fmul          v0.4s, v0.4s, v16.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0x6e30dc63                          // fmul          v3.4s, v3.4s, v16.4s
  .long  0x910083ff                          // add           sp, sp, #0x20
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_byte_tables_rgb_aarch64
.globl _sk_byte_tables_rgb_aarch64
FUNCTION(_sk_byte_tables_rgb_aarch64)
_sk_byte_tables_rgb_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0xb9401909                          // ldr           w9, [x8, #24]
  .long  0xa9402d0a                          // ldp           x10, x11, [x8]
  .long  0xf9400908                          // ldr           x8, [x8, #16]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e21da31                          // scvtf         v17.4s, v17.4s
  .long  0x6e21de21                          // fmul          v1.4s, v17.4s, v1.4s
  .long  0x6e20de20                          // fmul          v0.4s, v17.4s, v0.4s
  .long  0x6e22de22                          // fmul          v2.4s, v17.4s, v2.4s
  .long  0x6e21a821                          // fcvtnu        v1.4s, v1.4s
  .long  0x6e21a800                          // fcvtnu        v0.4s, v0.4s
  .long  0x6e21a842                          // fcvtnu        v2.4s, v2.4s
  .long  0x0e0c3c2f                          // mov           w15, v1.s[1]
  .long  0x0e143c30                          // mov           w16, v1.s[2]
  .long  0x0e1c3c31                          // mov           w17, v1.s[3]
  .long  0x1e260032                          // fmov          w18, s1
  .long  0x1e26000e                          // fmov          w14, s0
  .long  0x38724972                          // ldrb          w18, [x11, w18, uxtw]
  .long  0x386f496f                          // ldrb          w15, [x11, w15, uxtw]
  .long  0x38704970                          // ldrb          w16, [x11, w16, uxtw]
  .long  0x3871496b                          // ldrb          w11, [x11, w17, uxtw]
  .long  0x1e260051                          // fmov          w17, s2
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386e494e                          // ldrb          w14, [x10, w14, uxtw]
  .long  0x0e0c3c44                          // mov           w4, v2.s[1]
  .long  0x38714911                          // ldrb          w17, [x8, w17, uxtw]
  .long  0x0e143c0c                          // mov           w12, v0.s[2]
  .long  0x0e1c3c0d                          // mov           w13, v0.s[3]
  .long  0x0e143c45                          // mov           w5, v2.s[2]
  .long  0x38694949                          // ldrb          w9, [x10, w9, uxtw]
  .long  0x38644904                          // ldrb          w4, [x8, w4, uxtw]
  .long  0x386c494c                          // ldrb          w12, [x10, w12, uxtw]
  .long  0x386d494a                          // ldrb          w10, [x10, w13, uxtw]
  .long  0x0e1c3c4d                          // mov           w13, v2.s[3]
  .long  0x38654905                          // ldrb          w5, [x8, w5, uxtw]
  .long  0x386d4908                          // ldrb          w8, [x8, w13, uxtw]
  .long  0x4e021dc0                          // mov           v0.h[0], w14
  .long  0x4e021e41                          // mov           v1.h[0], w18
  .long  0x4e021e22                          // mov           v2.h[0], w17
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e061de1                          // mov           v1.h[1], w15
  .long  0x4e061c82                          // mov           v2.h[1], w4
  .long  0x4e0a1d80                          // mov           v0.h[2], w12
  .long  0x4e0a1e01                          // mov           v1.h[2], w16
  .long  0x4e0a1ca2                          // mov           v2.h[2], w5
  .long  0x4e0e1d40                          // mov           v0.h[3], w10
  .long  0x4e0e1d61                          // mov           v1.h[3], w11
  .long  0x4e0e1d02                          // mov           v2.h[3], w8
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e30dc00                          // fmul          v0.4s, v0.4s, v16.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_table_r_aarch64
.globl _sk_table_r_aarch64
FUNCTION(_sk_table_r_aarch64)
_sk_table_r_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21a810                          // fcvtnu        v16.4s, v0.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408160                          // ld1           {v0.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140600                          // mov           v0.s[2], v16.s[0]
  .long  0x6e1c0620                          // mov           v0.s[3], v17.s[0]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_table_g_aarch64
.globl _sk_table_g_aarch64
FUNCTION(_sk_table_g_aarch64)
_sk_table_g_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e21a830                          // fcvtnu        v16.4s, v1.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408161                          // ld1           {v1.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409121                          // ld1           {v1.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140601                          // mov           v1.s[2], v16.s[0]
  .long  0x6e1c0621                          // mov           v1.s[3], v17.s[0]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_table_b_aarch64
.globl _sk_table_b_aarch64
FUNCTION(_sk_table_b_aarch64)
_sk_table_b_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e21a850                          // fcvtnu        v16.4s, v2.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408162                          // ld1           {v2.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409122                          // ld1           {v2.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140602                          // mov           v2.s[2], v16.s[0]
  .long  0x6e1c0622                          // mov           v2.s[3], v17.s[0]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_table_a_aarch64
.globl _sk_table_a_aarch64
FUNCTION(_sk_table_a_aarch64)
_sk_table_a_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0x6e21a870                          // fcvtnu        v16.4s, v3.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408163                          // ld1           {v3.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409123                          // ld1           {v3.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140603                          // mov           v3.s[2], v16.s[0]
  .long  0x6e1c0623                          // mov           v3.s[3], v17.s[0]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_parametric_r_aarch64
.globl _sk_parametric_r_aarch64
FUNCTION(_sk_parametric_r_aarch64)
_sk_parametric_r_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911010                          // fmla          v16.4s, v0.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951014                          // fmla          v20.4s, v0.4s, v21.s[0]
  .long  0x6e20e640                          // fcmge         v0.4s, v18.4s, v0.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e00                          // bsl           v0.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f400                          // fmax          v0.4s, v0.4s, v18.4s
  .long  0x4eb5f400                          // fmin          v0.4s, v0.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_parametric_g_aarch64
.globl _sk_parametric_g_aarch64
FUNCTION(_sk_parametric_g_aarch64)
_sk_parametric_g_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911030                          // fmla          v16.4s, v1.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951034                          // fmla          v20.4s, v1.4s, v21.s[0]
  .long  0x6e21e641                          // fcmge         v1.4s, v18.4s, v1.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e01                          // bsl           v1.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f421                          // fmax          v1.4s, v1.4s, v18.4s
  .long  0x4eb5f421                          // fmin          v1.4s, v1.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_parametric_b_aarch64
.globl _sk_parametric_b_aarch64
FUNCTION(_sk_parametric_b_aarch64)
_sk_parametric_b_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911050                          // fmla          v16.4s, v2.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951054                          // fmla          v20.4s, v2.4s, v21.s[0]
  .long  0x6e22e642                          // fcmge         v2.4s, v18.4s, v2.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e02                          // bsl           v2.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f442                          // fmax          v2.4s, v2.4s, v18.4s
  .long  0x4eb5f442                          // fmin          v2.4s, v2.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_parametric_a_aarch64
.globl _sk_parametric_a_aarch64
FUNCTION(_sk_parametric_a_aarch64)
_sk_parametric_a_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911070                          // fmla          v16.4s, v3.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951074                          // fmla          v20.4s, v3.4s, v21.s[0]
  .long  0x6e23e643                          // fcmge         v3.4s, v18.4s, v3.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e03                          // bsl           v3.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f463                          // fmax          v3.4s, v3.4s, v18.4s
  .long  0x4eb5f463                          // fmin          v3.4s, v3.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_lab_to_xyz_aarch64
.globl _sk_lab_to_xyz_aarch64
FUNCTION(_sk_lab_to_xyz_aarch64)
_sk_lab_to_xyz_aarch64:
  .long  0x52a85908                          // mov           w8, #0x42c80000
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a86fe8                          // mov           w8, #0x437f0000
  .long  0x4f066471                          // movi          v17.4s, #0xc3, lsl #24
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a781a8                          // mov           w8, #0x3c0d0000
  .long  0x7287b968                          // movk          w8, #0x3dcb
  .long  0x4eb11e34                          // mov           v20.16b, v17.16b
  .long  0x4e21ce74                          // fmla          v20.4s, v19.4s, v1.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a76068                          // mov           w8, #0x3b030000
  .long  0x72824de8                          // movk          w8, #0x126f
  .long  0x4e22ce71                          // fmla          v17.4s, v19.4s, v2.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a77468                          // mov           w8, #0x3ba30000
  .long  0x729ae148                          // movk          w8, #0xd70a
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a78228                          // mov           w8, #0x3c110000
  .long  0x4f01f612                          // fmov          v18.4s, #1.600000000000000000e+01
  .long  0x72831848                          // movk          w8, #0x18c2
  .long  0x4e20ce12                          // fmla          v18.4s, v16.4s, v0.4s
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52b7c1a8                          // mov           w8, #0xbe0d0000
  .long  0x7287b968                          // movk          w8, #0x3dcb
  .long  0x6e21de41                          // fmul          v1.4s, v18.4s, v1.4s
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a7c068                          // mov           w8, #0x3e030000
  .long  0x4ea11c32                          // mov           v18.16b, v1.16b
  .long  0x72900a08                          // movk          w8, #0x8050
  .long  0x4eb3ce32                          // fmls          v18.4s, v17.4s, v19.4s
  .long  0x6e21dc31                          // fmul          v17.4s, v1.4s, v1.4s
  .long  0x4ea11c35                          // mov           v21.16b, v1.16b
  .long  0x4e30d433                          // fadd          v19.4s, v1.4s, v16.4s
  .long  0x6e31dc31                          // fmul          v17.4s, v1.4s, v17.4s
  .long  0x4e34cc55                          // fmla          v21.4s, v2.4s, v20.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x6e22de73                          // fmul          v19.4s, v19.4s, v2.4s
  .long  0x6ea0e621                          // fcmgt         v1.4s, v17.4s, v0.4s
  .long  0x6e731e21                          // bsl           v1.16b, v17.16b, v19.16b
  .long  0x6e32de51                          // fmul          v17.4s, v18.4s, v18.4s
  .long  0x4e30d653                          // fadd          v19.4s, v18.4s, v16.4s
  .long  0x6e31de51                          // fmul          v17.4s, v18.4s, v17.4s
  .long  0x52a7eec8                          // mov           w8, #0x3f760000
  .long  0x6e22de72                          // fmul          v18.4s, v19.4s, v2.4s
  .long  0x6ea0e633                          // fcmgt         v19.4s, v17.4s, v0.4s
  .long  0x729ae3e8                          // movk          w8, #0xd71f
  .long  0x6e721e33                          // bsl           v19.16b, v17.16b, v18.16b
  .long  0x6e35deb2                          // fmul          v18.4s, v21.4s, v21.4s
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7ea68                          // mov           w8, #0x3f530000
  .long  0x4e30d6b0                          // fadd          v16.4s, v21.4s, v16.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x72881ec8                          // movk          w8, #0x40f6
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6ea0e640                          // fcmgt         v0.4s, v18.4s, v0.4s
  .long  0x4e040d14                          // dup           v20.4s, w8
  .long  0x6e621e40                          // bsl           v0.16b, v18.16b, v2.16b
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x6e34de62                          // fmul          v2.4s, v19.4s, v20.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_a8_aarch64
.globl _sk_load_a8_aarch64
FUNCTION(_sk_load_a8_aarch64)
_sk_load_a8_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e040d22                          // dup           v2.4s, w9
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x8b000108                          // add           x8, x8, x0
  .long  0x3940010a                          // ldrb          w10, [x8]
  .long  0x3940050b                          // ldrb          w11, [x8, #1]
  .long  0x3940090c                          // ldrb          w12, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d43                          // mov           v3.h[0], w10
  .long  0x4e061d63                          // mov           v3.h[1], w11
  .long  0x4e0a1d83                          // mov           v3.h[2], w12
  .long  0x4e0e1d03                          // mov           v3.h[3], w8
  .long  0x2f10a463                          // uxtl          v3.4s, v3.4h
  .long  0x6e21d863                          // ucvtf         v3.4s, v3.4s
  .long  0x6e22dc63                          // fmul          v3.4s, v3.4s, v2.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_gather_a8_aarch64
.globl _sk_gather_a8_aarch64
FUNCTION(_sk_gather_a8_aarch64)
_sk_gather_a8_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386c490c                          // ldrb          w12, [x8, w12, uxtw]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x38694909                          // ldrb          w9, [x8, w9, uxtw]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x386b4908                          // ldrb          w8, [x8, w11, uxtw]
  .long  0x4e021d82                          // mov           v2.h[0], w12
  .long  0x4e061d22                          // mov           v2.h[1], w9
  .long  0x4e0a1d42                          // mov           v2.h[2], w10
  .long  0x4e0e1d02                          // mov           v2.h[3], w8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6e23dc43                          // fmul          v3.4s, v2.4s, v3.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_store_a8_aarch64
.globl _sk_store_a8_aarch64
FUNCTION(_sk_store_a8_aarch64)
_sk_store_a8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a86fe9                          // mov           w9, #0x437f0000
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0x0e0e3e09                          // umov          w9, v16.h[3]
  .long  0x8b000108                          // add           x8, x8, x0
  .long  0x39000d09                          // strb          w9, [x8, #3]
  .long  0x0e0a3e09                          // umov          w9, v16.h[2]
  .long  0x39000909                          // strb          w9, [x8, #2]
  .long  0x0e063e09                          // umov          w9, v16.h[1]
  .long  0x39000509                          // strb          w9, [x8, #1]
  .long  0x0e023e09                          // umov          w9, v16.h[0]
  .long  0x39000109                          // strb          w9, [x8]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_g8_aarch64
.globl _sk_load_g8_aarch64
FUNCTION(_sk_load_g8_aarch64)
_sk_load_g8_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e040d20                          // dup           v0.4s, w9
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0x8b000108                          // add           x8, x8, x0
  .long  0x3940010a                          // ldrb          w10, [x8]
  .long  0x39400509                          // ldrb          w9, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d41                          // mov           v1.h[0], w10
  .long  0x4e061d21                          // mov           v1.h[1], w9
  .long  0x4e0a1d61                          // mov           v1.h[2], w11
  .long  0x4e0e1d01                          // mov           v1.h[3], w8
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4ea01c01                          // mov           v1.16b, v0.16b
  .long  0x4ea01c02                          // mov           v2.16b, v0.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_gather_g8_aarch64
.globl _sk_gather_g8_aarch64
FUNCTION(_sk_gather_g8_aarch64)
_sk_gather_g8_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386c490c                          // ldrb          w12, [x8, w12, uxtw]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x38694909                          // ldrb          w9, [x8, w9, uxtw]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x386b4908                          // ldrb          w8, [x8, w11, uxtw]
  .long  0x4e021d80                          // mov           v0.h[0], w12
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0x4ea01c01                          // mov           v1.16b, v0.16b
  .long  0x4ea01c02                          // mov           v2.16b, v0.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_gather_i8_aarch64
.globl _sk_gather_i8_aarch64
FUNCTION(_sk_gather_i8_aarch64)
_sk_gather_i8_aarch64:
  .long  0xaa0103e8                          // mov           x8, x1
  .long  0xf8408429                          // ldr           x9, [x1], #8
  .long  0xb4000069                          // cbz           x9, 241c <sk_gather_i8_aarch64+0x14>
  .long  0xaa0903ea                          // mov           x10, x9
  .long  0x14000003                          // b             2424 <sk_gather_i8_aarch64+0x1c>
  .long  0xf940050a                          // ldr           x10, [x8, #8]
  .long  0x91004101                          // add           x1, x8, #0x10
  .long  0xf8410548                          // ldr           x8, [x10], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0xf9400529                          // ldr           x9, [x9, #8]
  .long  0x4d40c942                          // ld1r          {v2.4s}, [x10]
  .long  0x6f00e623                          // movi          v3.2d, #0xff000000ff
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000d                          // fmov          w13, s0
  .long  0x0e0c3c0a                          // mov           w10, v0.s[1]
  .long  0x386d490d                          // ldrb          w13, [x8, w13, uxtw]
  .long  0x0e143c0b                          // mov           w11, v0.s[2]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x0e1c3c0c                          // mov           w12, v0.s[3]
  .long  0x386b490b                          // ldrb          w11, [x8, w11, uxtw]
  .long  0x386c4908                          // ldrb          w8, [x8, w12, uxtw]
  .long  0x4e021da0                          // mov           v0.h[0], w13
  .long  0x4e061d40                          // mov           v0.h[1], w10
  .long  0x4e0a1d60                          // mov           v0.h[2], w11
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e231c00                          // and           v0.16b, v0.16b, v3.16b
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c492c                          // add           x12, x9, w12, uxtw #2
  .long  0x0e0c3c08                          // mov           w8, v0.s[1]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408180                          // ld1           {v0.s}[0], [x12]
  .long  0x8b284928                          // add           x8, x9, w8, uxtw #2
  .long  0xb86a592a                          // ldr           w10, [x9, w10, uxtw #2]
  .long  0x52a7700c                          // mov           w12, #0x3b800000
  .long  0x0d409100                          // ld1           {v0.s}[1], [x8]
  .long  0xb86b5928                          // ldr           w8, [x9, w11, uxtw #2]
  .long  0x7290102c                          // movk          w12, #0x8081
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4e141d40                          // mov           v0.s[2], w10
  .long  0x4e1c1d00                          // mov           v0.s[3], w8
  .long  0x4e231c01                          // and           v1.16b, v0.16b, v3.16b
  .long  0x6f380402                          // ushr          v2.4s, v0.4s, #8
  .long  0x6f300411                          // ushr          v17.4s, v0.4s, #16
  .long  0x4e040d90                          // dup           v16.4s, w12
  .long  0x6f280400                          // ushr          v0.4s, v0.4s, #24
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x4e231c42                          // and           v2.16b, v2.16b, v3.16b
  .long  0x4e231e23                          // and           v3.16b, v17.16b, v3.16b
  .long  0x4e21d811                          // scvtf         v17.4s, v0.4s
  .long  0x6e30dc20                          // fmul          v0.4s, v1.4s, v16.4s
  .long  0x4e21d841                          // scvtf         v1.4s, v2.4s
  .long  0x4e21d862                          // scvtf         v2.4s, v3.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0x6e30de23                          // fmul          v3.4s, v17.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_565_aarch64
.globl _sk_load_565_aarch64
FUNCTION(_sk_load_565_aarch64)
_sk_load_565_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xd37ff809                          // lsl           x9, x0, #1
  .long  0x4f072701                          // movi          v1.4s, #0xf8, lsl #8
  .long  0x4f0007e3                          // movi          v3.4s, #0x1f
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0xfc696900                          // ldr           d0, [x8, x9]
  .long  0x321b17e8                          // orr           w8, wzr, #0x7e0
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a6f088                          // mov           w8, #0x37840000
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a74048                          // mov           w8, #0x3a020000
  .long  0x72810428                          // movk          w8, #0x821
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a7a088                          // mov           w8, #0x3d040000
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x6e21dc41                          // fmul          v1.4s, v2.4s, v1.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e22dc62                          // fmul          v2.4s, v3.4s, v2.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_gather_565_aarch64
.globl _sk_gather_565_aarch64
FUNCTION(_sk_gather_565_aarch64)
_sk_gather_565_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x321b17e9                          // orr           w9, wzr, #0x7e0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x8b2c450c                          // add           x12, x8, w12, uxtw #1
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d404180                          // ld1           {v0.h}[0], [x12]
  .long  0x78695909                          // ldrh          w9, [x8, w9, uxtw #1]
  .long  0x786a590a                          // ldrh          w10, [x8, w10, uxtw #1]
  .long  0x786b5908                          // ldrh          w8, [x8, w11, uxtw #1]
  .long  0x4f072701                          // movi          v1.4s, #0xf8, lsl #8
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x52a6f08b                          // mov           w11, #0x37840000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x7284210b                          // movk          w11, #0x2108
  .long  0x52a74049                          // mov           w9, #0x3a020000
  .long  0x4f0007e2                          // movi          v2.4s, #0x1f
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x72810429                          // movk          w9, #0x821
  .long  0x52a7a08a                          // mov           w10, #0x3d040000
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e040d60                          // dup           v0.4s, w11
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x7284210a                          // movk          w10, #0x2108
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e21dc61                          // fmul          v1.4s, v3.4s, v1.4s
  .long  0x4e040d43                          // dup           v3.4s, w10
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x6e23dc42                          // fmul          v2.4s, v2.4s, v3.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_store_565_aarch64
.globl _sk_store_565_aarch64
FUNCTION(_sk_store_565_aarch64)
_sk_store_565_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a84f8a                          // mov           w10, #0x427c0000
  .long  0x4f01f7f0                          // fmov          v16.4s, #3.100000000000000000e+01
  .long  0x4e040d52                          // dup           v18.4s, w10
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e32dc32                          // fmul          v18.4s, v1.4s, v18.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x6e30dc50                          // fmul          v16.4s, v2.4s, v16.4s
  .long  0x4f2b5631                          // shl           v17.4s, v17.4s, #11
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4f255652                          // shl           v18.4s, v18.4s, #5
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0xd37ff809                          // lsl           x9, x0, #1
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0xfc296910                          // str           d16, [x8, x9]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_4444_aarch64
.globl _sk_load_4444_aarch64
FUNCTION(_sk_load_4444_aarch64)
_sk_load_4444_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xd37ff809                          // lsl           x9, x0, #1
  .long  0x4f072601                          // movi          v1.4s, #0xf0, lsl #8
  .long  0x4f0025e2                          // movi          v2.4s, #0xf, lsl #8
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4f070603                          // movi          v3.4s, #0xf0
  .long  0x4f0005f0                          // movi          v16.4s, #0xf
  .long  0xfc696900                          // ldr           d0, [x8, x9]
  .long  0x52a6f108                          // mov           w8, #0x37880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e301c10                          // and           v16.16b, v0.16b, v16.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a73108                          // mov           w8, #0x39880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a77108                          // mov           w8, #0x3b880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x6e21dc41                          // fmul          v1.4s, v2.4s, v1.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a7b108                          // mov           w8, #0x3d880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e22dc62                          // fmul          v2.4s, v3.4s, v2.4s
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_gather_4444_aarch64
.globl _sk_gather_4444_aarch64
FUNCTION(_sk_gather_4444_aarch64)
_sk_gather_4444_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x4f070603                          // movi          v3.4s, #0xf0
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4f0005f0                          // movi          v16.4s, #0xf
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x8b2c450c                          // add           x12, x8, w12, uxtw #1
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d404180                          // ld1           {v0.h}[0], [x12]
  .long  0x78695909                          // ldrh          w9, [x8, w9, uxtw #1]
  .long  0x786a590a                          // ldrh          w10, [x8, w10, uxtw #1]
  .long  0x786b5908                          // ldrh          w8, [x8, w11, uxtw #1]
  .long  0x4f072601                          // movi          v1.4s, #0xf0, lsl #8
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x52a6f10b                          // mov           w11, #0x37880000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x7291112b                          // movk          w11, #0x8889
  .long  0x4f0025e2                          // movi          v2.4s, #0xf, lsl #8
  .long  0x52a73109                          // mov           w9, #0x39880000
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x72911129                          // movk          w9, #0x8889
  .long  0x52a7710a                          // mov           w10, #0x3b880000
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e301c10                          // and           v16.16b, v0.16b, v16.16b
  .long  0x4e040d60                          // dup           v0.4s, w11
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x7291112a                          // movk          w10, #0x8889
  .long  0x52a7b108                          // mov           w8, #0x3d880000
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x6e21dc41                          // fmul          v1.4s, v2.4s, v1.4s
  .long  0x4e040d42                          // dup           v2.4s, w10
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e22dc62                          // fmul          v2.4s, v3.4s, v2.4s
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_store_4444_aarch64
.globl _sk_store_4444_aarch64
FUNCTION(_sk_store_4444_aarch64)
_sk_store_4444_aarch64:
  .long  0x4f01f5d0                          // fmov          v16.4s, #1.500000000000000000e+01
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e30dc32                          // fmul          v18.4s, v1.4s, v16.4s
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x4f2c5631                          // shl           v17.4s, v17.4s, #12
  .long  0x4f285652                          // shl           v18.4s, v18.4s, #8
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x6e30dc52                          // fmul          v18.4s, v2.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0x4f245652                          // shl           v18.4s, v18.4s, #4
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4eb21e31                          // orr           v17.16b, v17.16b, v18.16b
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0xd37ff809                          // lsl           x9, x0, #1
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0xfc296910                          // str           d16, [x8, x9]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_8888_aarch64
.globl _sk_load_8888_aarch64
FUNCTION(_sk_load_8888_aarch64)
_sk_load_8888_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xd37ef409                          // lsl           x9, x0, #2
  .long  0x6f00e621                          // movi          v1.2d, #0xff000000ff
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x3ce96900                          // ldr           q0, [x8, x9]
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x6f380410                          // ushr          v16.4s, v0.4s, #8
  .long  0x6f300411                          // ushr          v17.4s, v0.4s, #16
  .long  0x4e211c03                          // and           v3.16b, v0.16b, v1.16b
  .long  0x6f280400                          // ushr          v0.4s, v0.4s, #24
  .long  0x4e211e10                          // and           v16.16b, v16.16b, v1.16b
  .long  0x4e211e21                          // and           v1.16b, v17.16b, v1.16b
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x4e21d811                          // scvtf         v17.4s, v0.4s
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x4e21d832                          // scvtf         v18.4s, v1.4s
  .long  0x6e22dc60                          // fmul          v0.4s, v3.4s, v2.4s
  .long  0x6e22de23                          // fmul          v3.4s, v17.4s, v2.4s
  .long  0x6e22de01                          // fmul          v1.4s, v16.4s, v2.4s
  .long  0x6e22de42                          // fmul          v2.4s, v18.4s, v2.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_gather_8888_aarch64
.globl _sk_gather_8888_aarch64
FUNCTION(_sk_gather_8888_aarch64)
_sk_gather_8888_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c490c                          // add           x12, x8, w12, uxtw #2
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408180                          // ld1           {v0.s}[0], [x12]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0xb86a590a                          // ldr           w10, [x8, w10, uxtw #2]
  .long  0xb86b5908                          // ldr           w8, [x8, w11, uxtw #2]
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0x6f00e621                          // movi          v1.2d, #0xff000000ff
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e141d40                          // mov           v0.s[2], w10
  .long  0x4e1c1d00                          // mov           v0.s[3], w8
  .long  0x6f380410                          // ushr          v16.4s, v0.4s, #8
  .long  0x6f300411                          // ushr          v17.4s, v0.4s, #16
  .long  0x4e211c03                          // and           v3.16b, v0.16b, v1.16b
  .long  0x6f280400                          // ushr          v0.4s, v0.4s, #24
  .long  0x4e211e10                          // and           v16.16b, v16.16b, v1.16b
  .long  0x4e211e21                          // and           v1.16b, v17.16b, v1.16b
  .long  0x4e040d22                          // dup           v2.4s, w9
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x4e21d811                          // scvtf         v17.4s, v0.4s
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x4e21d832                          // scvtf         v18.4s, v1.4s
  .long  0x6e22dc60                          // fmul          v0.4s, v3.4s, v2.4s
  .long  0x6e22de23                          // fmul          v3.4s, v17.4s, v2.4s
  .long  0x6e22de01                          // fmul          v1.4s, v16.4s, v2.4s
  .long  0x6e22de42                          // fmul          v2.4s, v18.4s, v2.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_store_8888_aarch64
.globl _sk_store_8888_aarch64
FUNCTION(_sk_store_8888_aarch64)
_sk_store_8888_aarch64:
  .long  0x52a86fea                          // mov           w10, #0x437f0000
  .long  0x4e040d50                          // dup           v16.4s, w10
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6e30dc32                          // fmul          v18.4s, v1.4s, v16.4s
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x4f285652                          // shl           v18.4s, v18.4s, #8
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x6e30dc52                          // fmul          v18.4s, v2.4s, v16.4s
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4f305652                          // shl           v18.4s, v18.4s, #16
  .long  0x4eb21e31                          // orr           v17.16b, v17.16b, v18.16b
  .long  0x4f385610                          // shl           v16.4s, v16.4s, #24
  .long  0xd37ef409                          // lsl           x9, x0, #2
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0x3ca96910                          // str           q16, [x8, x9]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_f16_aarch64
.globl _sk_load_f16_aarch64
FUNCTION(_sk_load_f16_aarch64)
_sk_load_f16_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b000d08                          // add           x8, x8, x0, lsl #3
  .long  0x0c400510                          // ld4           {v16.4h-v19.4h}, [x8]
  .long  0x0e217a00                          // fcvtl         v0.4s, v16.4h
  .long  0x0e217a21                          // fcvtl         v1.4s, v17.4h
  .long  0x0e217a42                          // fcvtl         v2.4s, v18.4h
  .long  0x0e217a63                          // fcvtl         v3.4s, v19.4h
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_gather_f16_aarch64
.globl _sk_gather_f16_aarch64
FUNCTION(_sk_gather_f16_aarch64)
_sk_gather_f16_aarch64:
  .long  0xa9bf7bfd                          // stp           x29, x30, [sp, #-16]!
  .long  0xd100c3e9                          // sub           x9, sp, #0x30
  .long  0x910003fd                          // mov           x29, sp
  .long  0x927be93f                          // and           sp, x9, #0xffffffffffffffe0
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c4d0c                          // add           x12, x8, w12, uxtw #3
  .long  0x8b2a4d0a                          // add           x10, x8, w10, uxtw #3
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408540                          // ld1           {v0.d}[0], [x10]
  .long  0x0d408581                          // ld1           {v1.d}[0], [x12]
  .long  0x8b294d09                          // add           x9, x8, w9, uxtw #3
  .long  0x8b2b4d08                          // add           x8, x8, w11, uxtw #3
  .long  0x4d408500                          // ld1           {v0.d}[1], [x8]
  .long  0x4d408521                          // ld1           {v1.d}[1], [x9]
  .long  0x910003e8                          // mov           x8, sp
  .long  0xad0003e1                          // stp           q1, q0, [sp]
  .long  0x0c400510                          // ld4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400428                          // ldr           x8, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x0e217a00                          // fcvtl         v0.4s, v16.4h
  .long  0x0e217a21                          // fcvtl         v1.4s, v17.4h
  .long  0x0e217a42                          // fcvtl         v2.4s, v18.4h
  .long  0x0e217a63                          // fcvtl         v3.4s, v19.4h
  .long  0xd63f0100                          // blr           x8
  .long  0x910003bf                          // mov           sp, x29
  .long  0xa8c17bfd                          // ldp           x29, x30, [sp], #16
  .long  0xd65f03c0                          // ret

HIDDEN _sk_store_f16_aarch64
.globl _sk_store_f16_aarch64
FUNCTION(_sk_store_f16_aarch64)
_sk_store_f16_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x0e216810                          // fcvtn         v16.4h, v0.4s
  .long  0x0e216831                          // fcvtn         v17.4h, v1.4s
  .long  0x0e216852                          // fcvtn         v18.4h, v2.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x0e216873                          // fcvtn         v19.4h, v3.4s
  .long  0x8b000d08                          // add           x8, x8, x0, lsl #3
  .long  0x0c000510                          // st4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_u16_be_aarch64
.globl _sk_load_u16_be_aarch64
FUNCTION(_sk_load_u16_be_aarch64)
_sk_load_u16_be_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b000d08                          // add           x8, x8, x0, lsl #3
  .long  0x0c400500                          // ld4           {v0.4h-v3.4h}, [x8]
  .long  0x52a6f008                          // mov           w8, #0x37800000
  .long  0x72801008                          // movk          w8, #0x80
  .long  0x0f185410                          // shl           v16.4h, v0.4h, #8
  .long  0x2f180411                          // ushr          v17.4h, v0.4h, #8
  .long  0x0f185432                          // shl           v18.4h, v1.4h, #8
  .long  0x2f180433                          // ushr          v19.4h, v1.4h, #8
  .long  0x0f185454                          // shl           v20.4h, v2.4h, #8
  .long  0x2f180455                          // ushr          v21.4h, v2.4h, #8
  .long  0x0f185476                          // shl           v22.4h, v3.4h, #8
  .long  0x2f180460                          // ushr          v0.4h, v3.4h, #8
  .long  0x0eb11e01                          // orr           v1.8b, v16.8b, v17.8b
  .long  0x0eb31e42                          // orr           v2.8b, v18.8b, v19.8b
  .long  0x0eb51e90                          // orr           v16.8b, v20.8b, v21.8b
  .long  0x0ea01ec0                          // orr           v0.8b, v22.8b, v0.8b
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x2f10a610                          // uxtl          v16.4s, v16.4h
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e21da10                          // ucvtf         v16.4s, v16.4s
  .long  0x6e21d811                          // ucvtf         v17.4s, v0.4s
  .long  0x6e23dc20                          // fmul          v0.4s, v1.4s, v3.4s
  .long  0x6e23dc41                          // fmul          v1.4s, v2.4s, v3.4s
  .long  0x6e23de02                          // fmul          v2.4s, v16.4s, v3.4s
  .long  0x6e23de23                          // fmul          v3.4s, v17.4s, v3.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_rgb_u16_be_aarch64
.globl _sk_load_rgb_u16_be_aarch64
FUNCTION(_sk_load_rgb_u16_be_aarch64)
_sk_load_rgb_u16_be_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x321f07e9                          // orr           w9, wzr, #0x6
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x9b092008                          // madd          x8, x0, x9, x8
  .long  0x0c404500                          // ld3           {v0.4h-v2.4h}, [x8]
  .long  0x52a6f008                          // mov           w8, #0x37800000
  .long  0x72801008                          // movk          w8, #0x80
  .long  0x0f185403                          // shl           v3.4h, v0.4h, #8
  .long  0x2f180410                          // ushr          v16.4h, v0.4h, #8
  .long  0x0f185431                          // shl           v17.4h, v1.4h, #8
  .long  0x2f180432                          // ushr          v18.4h, v1.4h, #8
  .long  0x0f185453                          // shl           v19.4h, v2.4h, #8
  .long  0x2f180440                          // ushr          v0.4h, v2.4h, #8
  .long  0x0eb01c61                          // orr           v1.8b, v3.8b, v16.8b
  .long  0x0eb21e23                          // orr           v3.8b, v17.8b, v18.8b
  .long  0x0ea01e60                          // orr           v0.8b, v19.8b, v0.8b
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a463                          // uxtl          v3.4s, v3.4h
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d863                          // ucvtf         v3.4s, v3.4s
  .long  0x6e21d810                          // ucvtf         v16.4s, v0.4s
  .long  0x6e22dc20                          // fmul          v0.4s, v1.4s, v2.4s
  .long  0x6e22dc61                          // fmul          v1.4s, v3.4s, v2.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_store_u16_be_aarch64
.globl _sk_store_u16_be_aarch64
FUNCTION(_sk_store_u16_be_aarch64)
_sk_store_u16_be_aarch64:
  .long  0x52a8efe9                          // mov           w9, #0x477f0000
  .long  0x729fe009                          // movk          w9, #0xff00
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x0e612a31                          // xtn           v17.4h, v17.4s
  .long  0x6e30dc32                          // fmul          v18.4s, v1.4s, v16.4s
  .long  0x0f185633                          // shl           v19.4h, v17.4h, #8
  .long  0x2f180631                          // ushr          v17.4h, v17.4h, #8
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x0eb11e75                          // orr           v21.8b, v19.8b, v17.8b
  .long  0x6e30dc51                          // fmul          v17.4s, v2.4s, v16.4s
  .long  0x0e612a52                          // xtn           v18.4h, v18.4s
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x0f185654                          // shl           v20.4h, v18.4h, #8
  .long  0x2f180652                          // ushr          v18.4h, v18.4h, #8
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x0e612a31                          // xtn           v17.4h, v17.4s
  .long  0x0eb21e96                          // orr           v22.8b, v20.8b, v18.8b
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0x0f185632                          // shl           v18.4h, v17.4h, #8
  .long  0x2f180631                          // ushr          v17.4h, v17.4h, #8
  .long  0x0eb11e57                          // orr           v23.8b, v18.8b, v17.8b
  .long  0x0f185611                          // shl           v17.4h, v16.4h, #8
  .long  0x2f180610                          // ushr          v16.4h, v16.4h, #8
  .long  0x8b000d08                          // add           x8, x8, x0, lsl #3
  .long  0x0eb01e38                          // orr           v24.8b, v17.8b, v16.8b
  .long  0x0c000515                          // st4           {v21.4h-v24.4h}, [x8]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_load_f32_aarch64
.globl _sk_load_f32_aarch64
FUNCTION(_sk_load_f32_aarch64)
_sk_load_f32_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b001108                          // add           x8, x8, x0, lsl #4
  .long  0x4c400900                          // ld4           {v0.4s-v3.4s}, [x8]
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_store_f32_aarch64
.globl _sk_store_f32_aarch64
FUNCTION(_sk_store_f32_aarch64)
_sk_store_f32_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b001108                          // add           x8, x8, x0, lsl #4
  .long  0x4c000900                          // st4           {v0.4s-v3.4s}, [x8]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_clamp_x_aarch64
.globl _sk_clamp_x_aarch64
FUNCTION(_sk_clamp_x_aarch64)
_sk_clamp_x_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0x4e20f620                          // fmax          v0.4s, v17.4s, v0.4s
  .long  0x4d40c910                          // ld1r          {v16.4s}, [x8]
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_clamp_y_aarch64
.globl _sk_clamp_y_aarch64
FUNCTION(_sk_clamp_y_aarch64)
_sk_clamp_y_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0x4e21f621                          // fmax          v1.4s, v17.4s, v1.4s
  .long  0x4d40c910                          // ld1r          {v16.4s}, [x8]
  .long  0x4eb0f421                          // fmin          v1.4s, v1.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_repeat_x_aarch64
.globl _sk_repeat_x_aarch64
FUNCTION(_sk_repeat_x_aarch64)
_sk_repeat_x_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4e040611                          // dup           v17.4s, v16.s[0]
  .long  0x6e31fc12                          // fdiv          v18.4s, v0.4s, v17.4s
  .long  0x4e219a52                          // frintm        v18.4s, v18.4s
  .long  0x4f905240                          // fmls          v0.4s, v18.4s, v16.s[0]
  .long  0x4eb1f400                          // fmin          v0.4s, v0.4s, v17.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_repeat_y_aarch64
.globl _sk_repeat_y_aarch64
FUNCTION(_sk_repeat_y_aarch64)
_sk_repeat_y_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4e040611                          // dup           v17.4s, v16.s[0]
  .long  0x6e31fc32                          // fdiv          v18.4s, v1.4s, v17.4s
  .long  0x4e219a52                          // frintm        v18.4s, v18.4s
  .long  0x4f905241                          // fmls          v1.4s, v18.4s, v16.s[0]
  .long  0x4eb1f421                          // fmin          v1.4s, v1.4s, v17.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_mirror_x_aarch64
.globl _sk_mirror_x_aarch64
FUNCTION(_sk_mirror_x_aarch64)
_sk_mirror_x_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4e040611                          // dup           v17.4s, v16.s[0]
  .long  0x1e302a10                          // fadd          s16, s16, s16
  .long  0x4eb1d400                          // fsub          v0.4s, v0.4s, v17.4s
  .long  0x4e040612                          // dup           v18.4s, v16.s[0]
  .long  0x6e32fc12                          // fdiv          v18.4s, v0.4s, v18.4s
  .long  0x4e219a52                          // frintm        v18.4s, v18.4s
  .long  0x4f905240                          // fmls          v0.4s, v18.4s, v16.s[0]
  .long  0x4eb1d400                          // fsub          v0.4s, v0.4s, v17.4s
  .long  0x4ea0f800                          // fabs          v0.4s, v0.4s
  .long  0x4eb1f400                          // fmin          v0.4s, v0.4s, v17.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_mirror_y_aarch64
.globl _sk_mirror_y_aarch64
FUNCTION(_sk_mirror_y_aarch64)
_sk_mirror_y_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4e040611                          // dup           v17.4s, v16.s[0]
  .long  0x1e302a10                          // fadd          s16, s16, s16
  .long  0x4eb1d421                          // fsub          v1.4s, v1.4s, v17.4s
  .long  0x4e040612                          // dup           v18.4s, v16.s[0]
  .long  0x6e32fc32                          // fdiv          v18.4s, v1.4s, v18.4s
  .long  0x4e219a52                          // frintm        v18.4s, v18.4s
  .long  0x4f905241                          // fmls          v1.4s, v18.4s, v16.s[0]
  .long  0x4eb1d421                          // fsub          v1.4s, v1.4s, v17.4s
  .long  0x4ea0f821                          // fabs          v1.4s, v1.4s
  .long  0x4eb1f421                          // fmin          v1.4s, v1.4s, v17.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_luminance_to_alpha_aarch64
.globl _sk_luminance_to_alpha_aarch64
FUNCTION(_sk_luminance_to_alpha_aarch64)
_sk_luminance_to_alpha_aarch64:
  .long  0x52a7cb28                          // mov           w8, #0x3e590000
  .long  0x72967a08                          // movk          w8, #0xb3d0
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7e6e8                          // mov           w8, #0x3f370000
  .long  0x7282eb28                          // movk          w8, #0x1759
  .long  0x4ea01c10                          // mov           v16.16b, v0.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a7b268                          // mov           w8, #0x3d930000
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x729bb308                          // movk          w8, #0xdd98
  .long  0x6e20dc23                          // fmul          v3.4s, v1.4s, v0.4s
  .long  0x4e30ce23                          // fmla          v3.4s, v17.4s, v16.4s
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x4e22ce03                          // fmla          v3.4s, v16.4s, v2.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_matrix_2x3_aarch64
.globl _sk_matrix_2x3_aarch64
FUNCTION(_sk_matrix_2x3_aarch64)
_sk_matrix_2x3_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100410a                          // add           x10, x8, #0x10
  .long  0x4ddfc932                          // ld1r          {v18.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x2d415113                          // ldp           s19, s20, [x8, #8]
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x4f931030                          // fmla          v16.4s, v1.4s, v19.s[0]
  .long  0xbd400133                          // ldr           s19, [x9]
  .long  0x4f941031                          // fmla          v17.4s, v1.4s, v20.s[0]
  .long  0x4e20ce50                          // fmla          v16.4s, v18.4s, v0.4s
  .long  0x4f931011                          // fmla          v17.4s, v0.4s, v19.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_matrix_3x4_aarch64
.globl _sk_matrix_3x4_aarch64
FUNCTION(_sk_matrix_3x4_aarch64)
_sk_matrix_3x4_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100910a                          // add           x10, x8, #0x24
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9100a10a                          // add           x10, x8, #0x28
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9100b10a                          // add           x10, x8, #0x2c
  .long  0x2d435514                          // ldp           s20, s21, [x8, #24]
  .long  0xbd402116                          // ldr           s22, [x8, #32]
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x4f941050                          // fmla          v16.4s, v2.4s, v20.s[0]
  .long  0x4f951051                          // fmla          v17.4s, v2.4s, v21.s[0]
  .long  0x4f961052                          // fmla          v18.4s, v2.4s, v22.s[0]
  .long  0x2d425502                          // ldp           s2, s21, [x8, #16]
  .long  0x2d415d14                          // ldp           s20, s23, [x8, #8]
  .long  0x4f821031                          // fmla          v17.4s, v1.4s, v2.s[0]
  .long  0xbd400122                          // ldr           s2, [x9]
  .long  0x4f971030                          // fmla          v16.4s, v1.4s, v23.s[0]
  .long  0x4f951032                          // fmla          v18.4s, v1.4s, v21.s[0]
  .long  0x4e20ce70                          // fmla          v16.4s, v19.4s, v0.4s
  .long  0x4f941012                          // fmla          v18.4s, v0.4s, v20.s[0]
  .long  0x4f821011                          // fmla          v17.4s, v0.4s, v2.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_matrix_4x5_aarch64
.globl _sk_matrix_4x5_aarch64
FUNCTION(_sk_matrix_4x5_aarch64)
_sk_matrix_4x5_aarch64:
  .long  0xf9400029                          // ldr           x9, [x1]
  .long  0xaa0903e8                          // mov           x8, x9
  .long  0x9101012a                          // add           x10, x9, #0x40
  .long  0x4ddfc914                          // ld1r          {v20.4s}, [x8], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9101112a                          // add           x10, x9, #0x44
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9101212a                          // add           x10, x9, #0x48
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x2d465533                          // ldp           s19, s21, [x9, #48]
  .long  0x2d475d36                          // ldp           s22, s23, [x9, #56]
  .long  0x9101312a                          // add           x10, x9, #0x4c
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f931070                          // fmla          v16.4s, v3.4s, v19.s[0]
  .long  0x4d40c953                          // ld1r          {v19.4s}, [x10]
  .long  0x4f951071                          // fmla          v17.4s, v3.4s, v21.s[0]
  .long  0x4f961072                          // fmla          v18.4s, v3.4s, v22.s[0]
  .long  0x2d445935                          // ldp           s21, s22, [x9, #32]
  .long  0x4f971073                          // fmla          v19.4s, v3.4s, v23.s[0]
  .long  0x2d455d23                          // ldp           s3, s23, [x9, #40]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x4f951050                          // fmla          v16.4s, v2.4s, v21.s[0]
  .long  0x4f961051                          // fmla          v17.4s, v2.4s, v22.s[0]
  .long  0x2d425935                          // ldp           s21, s22, [x9, #16]
  .long  0x4f971053                          // fmla          v19.4s, v2.4s, v23.s[0]
  .long  0x4f831052                          // fmla          v18.4s, v2.4s, v3.s[0]
  .long  0x2d410d22                          // ldp           s2, s3, [x9, #8]
  .long  0x4f951030                          // fmla          v16.4s, v1.4s, v21.s[0]
  .long  0x2d435d35                          // ldp           s21, s23, [x9, #24]
  .long  0x4f961031                          // fmla          v17.4s, v1.4s, v22.s[0]
  .long  0xbd400116                          // ldr           s22, [x8]
  .long  0x4e20ce90                          // fmla          v16.4s, v20.4s, v0.4s
  .long  0x4f951032                          // fmla          v18.4s, v1.4s, v21.s[0]
  .long  0x4f971033                          // fmla          v19.4s, v1.4s, v23.s[0]
  .long  0x4f821012                          // fmla          v18.4s, v0.4s, v2.s[0]
  .long  0x4f831013                          // fmla          v19.4s, v0.4s, v3.s[0]
  .long  0x4f961011                          // fmla          v17.4s, v0.4s, v22.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_matrix_perspective_aarch64
.globl _sk_matrix_perspective_aarch64
FUNCTION(_sk_matrix_perspective_aarch64)
_sk_matrix_perspective_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4ddfc930                          // ld1r          {v16.4s}, [x9], #4
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9100810a                          // add           x10, x8, #0x20
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x2d41d113                          // ldp           s19, s20, [x8, #12]
  .long  0x2d435915                          // ldp           s21, s22, [x8, #24]
  .long  0x91002108                          // add           x8, x8, #0x8
  .long  0x4f941031                          // fmla          v17.4s, v1.4s, v20.s[0]
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f961032                          // fmla          v18.4s, v1.4s, v22.s[0]
  .long  0xbd400136                          // ldr           s22, [x9]
  .long  0x4f951012                          // fmla          v18.4s, v0.4s, v21.s[0]
  .long  0x4f931011                          // fmla          v17.4s, v0.4s, v19.s[0]
  .long  0x4f961034                          // fmla          v20.4s, v1.4s, v22.s[0]
  .long  0x4ea1da41                          // frecpe        v1.4s, v18.4s
  .long  0x4e21fe52                          // frecps        v18.4s, v18.4s, v1.4s
  .long  0x6e32dc32                          // fmul          v18.4s, v1.4s, v18.4s
  .long  0x4e20ce14                          // fmla          v20.4s, v16.4s, v0.4s
  .long  0x6e32de21                          // fmul          v1.4s, v17.4s, v18.4s
  .long  0x6e32de80                          // fmul          v0.4s, v20.4s, v18.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_gradient_aarch64
.globl _sk_gradient_aarch64
FUNCTION(_sk_gradient_aarch64)
_sk_gradient_aarch64:
  .long  0xf9400029                          // ldr           x9, [x1]
  .long  0x91004128                          // add           x8, x9, #0x10
  .long  0x9100512a                          // add           x10, x9, #0x14
  .long  0x4d40c910                          // ld1r          {v16.4s}, [x8]
  .long  0x91006128                          // add           x8, x9, #0x18
  .long  0x4d40c941                          // ld1r          {v1.4s}, [x10]
  .long  0x9100712a                          // add           x10, x9, #0x1c
  .long  0x4d40c902                          // ld1r          {v2.4s}, [x8]
  .long  0xf9400128                          // ldr           x8, [x9]
  .long  0x4d40c943                          // ld1r          {v3.4s}, [x10]
  .long  0xb40006c8                          // cbz           x8, 2fc0 <sk_gradient_aarch64+0x100>
  .long  0x6dbf23e9                          // stp           d9, d8, [sp, #-16]!
  .long  0xf9400529                          // ldr           x9, [x9, #8]
  .long  0x6f00e413                          // movi          v19.2d, #0x0
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x91004129                          // add           x9, x9, #0x10
  .long  0x6f00e414                          // movi          v20.2d, #0x0
  .long  0xd100412a                          // sub           x10, x9, #0x10
  .long  0x4d40c955                          // ld1r          {v21.4s}, [x10]
  .long  0xd100312b                          // sub           x11, x9, #0xc
  .long  0xd100212a                          // sub           x10, x9, #0x8
  .long  0x4d40c976                          // ld1r          {v22.4s}, [x11]
  .long  0xd100112b                          // sub           x11, x9, #0x4
  .long  0x4d40c957                          // ld1r          {v23.4s}, [x10]
  .long  0xaa0903ea                          // mov           x10, x9
  .long  0x4d40c978                          // ld1r          {v24.4s}, [x11]
  .long  0x4ddfc959                          // ld1r          {v25.4s}, [x10], #4
  .long  0x9100412b                          // add           x11, x9, #0x10
  .long  0x4ea31c7b                          // mov           v27.16b, v3.16b
  .long  0x6ea0e6a3                          // fcmgt         v3.4s, v21.4s, v0.4s
  .long  0x4d40c97a                          // ld1r          {v26.4s}, [x11]
  .long  0x4eb41e95                          // mov           v21.16b, v20.16b
  .long  0x4ea31c74                          // mov           v20.16b, v3.16b
  .long  0x9100212b                          // add           x11, x9, #0x8
  .long  0x4eb31e69                          // mov           v9.16b, v19.16b
  .long  0x4ea31c73                          // mov           v19.16b, v3.16b
  .long  0x6e771eb4                          // bsl           v20.16b, v21.16b, v23.16b
  .long  0x4d40c975                          // ld1r          {v21.4s}, [x11]
  .long  0x9100312b                          // add           x11, x9, #0xc
  .long  0x6e761d33                          // bsl           v19.16b, v9.16b, v22.16b
  .long  0x4d40c976                          // ld1r          {v22.4s}, [x11]
  .long  0x4d40c957                          // ld1r          {v23.4s}, [x10]
  .long  0x4eb21e5c                          // mov           v28.16b, v18.16b
  .long  0x4eb11e3d                          // mov           v29.16b, v17.16b
  .long  0x4eb01e1e                          // mov           v30.16b, v16.16b
  .long  0x4ea11c3f                          // mov           v31.16b, v1.16b
  .long  0x4ea21c48                          // mov           v8.16b, v2.16b
  .long  0x4ea31c72                          // mov           v18.16b, v3.16b
  .long  0x4ea31c71                          // mov           v17.16b, v3.16b
  .long  0x4ea31c70                          // mov           v16.16b, v3.16b
  .long  0x4ea31c61                          // mov           v1.16b, v3.16b
  .long  0x4ea31c62                          // mov           v2.16b, v3.16b
  .long  0x6e7a1f63                          // bsl           v3.16b, v27.16b, v26.16b
  .long  0x6e781f92                          // bsl           v18.16b, v28.16b, v24.16b
  .long  0x6e791fb1                          // bsl           v17.16b, v29.16b, v25.16b
  .long  0x6e751fe1                          // bsl           v1.16b, v31.16b, v21.16b
  .long  0x6e761d02                          // bsl           v2.16b, v8.16b, v22.16b
  .long  0xd1000508                          // sub           x8, x8, #0x1
  .long  0x6e771fd0                          // bsl           v16.16b, v30.16b, v23.16b
  .long  0x91009129                          // add           x9, x9, #0x24
  .long  0xb5fffaa8                          // cbnz          x8, 2f08 <sk_gradient_aarch64+0x48>
  .long  0x6cc123e9                          // ldp           d9, d8, [sp], #16
  .long  0x14000005                          // b             2fd0 <sk_gradient_aarch64+0x110>
  .long  0x6f00e414                          // movi          v20.2d, #0x0
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0x6f00e413                          // movi          v19.2d, #0x0
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4e20ce70                          // fmla          v16.4s, v19.4s, v0.4s
  .long  0x4e20ce81                          // fmla          v1.4s, v20.4s, v0.4s
  .long  0x4e20ce42                          // fmla          v2.4s, v18.4s, v0.4s
  .long  0x4e20ce23                          // fmla          v3.4s, v17.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_evenly_spaced_2_stop_gradient_aarch64
.globl _sk_evenly_spaced_2_stop_gradient_aarch64
FUNCTION(_sk_evenly_spaced_2_stop_gradient_aarch64)
_sk_evenly_spaced_2_stop_gradient_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100410a                          // add           x10, x8, #0x10
  .long  0x4ddfc931                          // ld1r          {v17.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4d40c941                          // ld1r          {v1.4s}, [x10]
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c942                          // ld1r          {v2.4s}, [x10]
  .long  0x9100710a                          // add           x10, x8, #0x1c
  .long  0x2d414d12                          // ldp           s18, s19, [x8, #8]
  .long  0x4d40c943                          // ld1r          {v3.4s}, [x10]
  .long  0x4e20ce30                          // fmla          v16.4s, v17.4s, v0.4s
  .long  0xbd400131                          // ldr           s17, [x9]
  .long  0x4f921002                          // fmla          v2.4s, v0.4s, v18.s[0]
  .long  0x4f931003                          // fmla          v3.4s, v0.4s, v19.s[0]
  .long  0x4f911001                          // fmla          v1.4s, v0.4s, v17.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_xy_to_unit_angle_aarch64
.globl _sk_xy_to_unit_angle_aarch64
FUNCTION(_sk_xy_to_unit_angle_aarch64)
_sk_xy_to_unit_angle_aarch64:
  .long  0x52b77ce8                          // mov           w8, #0xbbe70000
  .long  0x72856de8                          // movk          w8, #0x2b6f
  .long  0x4ea0f810                          // fabs          v16.4s, v0.4s
  .long  0x4ea0f831                          // fabs          v17.4s, v1.4s
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a79948                          // mov           w8, #0x3cca0000
  .long  0x729af3e8                          // movk          w8, #0xd79f
  .long  0x4eb1f614                          // fmin          v20.4s, v16.4s, v17.4s
  .long  0x4e31f615                          // fmax          v21.4s, v16.4s, v17.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52b7aa88                          // mov           w8, #0xbd540000
  .long  0x6e35fe94                          // fdiv          v20.4s, v20.4s, v21.4s
  .long  0x728c9a88                          // movk          w8, #0x64d4
  .long  0x6e34de95                          // fmul          v21.4s, v20.4s, v20.4s
  .long  0x4e35ce53                          // fmla          v19.4s, v18.4s, v21.4s
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7c448                          // mov           w8, #0x3e220000
  .long  0x729e1528                          // movk          w8, #0xf0a9
  .long  0x4e35ce72                          // fmla          v18.4s, v19.4s, v21.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e35ce53                          // fmla          v19.4s, v18.4s, v21.4s
  .long  0x4f02f612                          // fmov          v18.4s, #2.500000000000000000e-01
  .long  0x6e33de93                          // fmul          v19.4s, v20.4s, v19.4s
  .long  0x6eb0e630                          // fcmgt         v16.4s, v17.4s, v16.4s
  .long  0x4eb3d652                          // fsub          v18.4s, v18.4s, v19.4s
  .long  0x4f0167f5                          // movi          v21.4s, #0x3f, lsl #24
  .long  0x6e731e50                          // bsl           v16.16b, v18.16b, v19.16b
  .long  0x4ea0e800                          // fcmlt         v0.4s, v0.4s, #0.0
  .long  0x4eb0d6b2                          // fsub          v18.4s, v21.4s, v16.4s
  .long  0x4f03f614                          // fmov          v20.4s, #1.000000000000000000e+00
  .long  0x6e701e40                          // bsl           v0.16b, v18.16b, v16.16b
  .long  0x4ea0e831                          // fcmlt         v17.4s, v1.4s, #0.0
  .long  0x4ea0d690                          // fsub          v16.4s, v20.4s, v0.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x6e601e11                          // bsl           v17.16b, v16.16b, v0.16b
  .long  0x6ea0ca20                          // fcmge         v0.4s, v17.4s, #0.0
  .long  0x4ea0ea30                          // fcmlt         v16.4s, v17.4s, #0.0
  .long  0x4ea01e00                          // orr           v0.16b, v16.16b, v0.16b
  .long  0x4e201e20                          // and           v0.16b, v17.16b, v0.16b
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_xy_to_radius_aarch64
.globl _sk_xy_to_radius_aarch64
FUNCTION(_sk_xy_to_radius_aarch64)
_sk_xy_to_radius_aarch64:
  .long  0x6e21dc30                          // fmul          v16.4s, v1.4s, v1.4s
  .long  0x4e20cc10                          // fmla          v16.4s, v0.4s, v0.4s
  .long  0x6ea1da00                          // frsqrte       v0.4s, v16.4s
  .long  0x6e20dc11                          // fmul          v17.4s, v0.4s, v0.4s
  .long  0x4eb1fe10                          // frsqrts       v16.4s, v16.4s, v17.4s
  .long  0x6e30dc00                          // fmul          v0.4s, v0.4s, v16.4s
  .long  0xf8408423                          // ldr           x3, [x1], #8
  .long  0x4ea1d810                          // frecpe        v16.4s, v0.4s
  .long  0x4e30fc00                          // frecps        v0.4s, v0.4s, v16.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_save_xy_aarch64
.globl _sk_save_xy_aarch64
FUNCTION(_sk_save_xy_aarch64)
_sk_save_xy_aarch64:
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4e30d411                          // fadd          v17.4s, v0.4s, v16.4s
  .long  0x4e30d430                          // fadd          v16.4s, v1.4s, v16.4s
  .long  0x4e219a32                          // frintm        v18.4s, v17.4s
  .long  0x4eb2d631                          // fsub          v17.4s, v17.4s, v18.4s
  .long  0x4e219a12                          // frintm        v18.4s, v16.4s
  .long  0x4eb2d610                          // fsub          v16.4s, v16.4s, v18.4s
  .long  0x3d800100                          // str           q0, [x8]
  .long  0x3d800901                          // str           q1, [x8, #32]
  .long  0x3d801111                          // str           q17, [x8, #64]
  .long  0x3d801910                          // str           q16, [x8, #96]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_accumulate_aarch64
.globl _sk_accumulate_aarch64
FUNCTION(_sk_accumulate_aarch64)
_sk_accumulate_aarch64:
  .long  0xa8c10c28                          // ldp           x8, x3, [x1], #16
  .long  0x3dc02110                          // ldr           q16, [x8, #128]
  .long  0x3dc02911                          // ldr           q17, [x8, #160]
  .long  0x6e31de10                          // fmul          v16.4s, v16.4s, v17.4s
  .long  0x4e30cc04                          // fmla          v4.4s, v0.4s, v16.4s
  .long  0x4e30cc25                          // fmla          v5.4s, v1.4s, v16.4s
  .long  0x4e30cc46                          // fmla          v6.4s, v2.4s, v16.4s
  .long  0x4e30cc67                          // fmla          v7.4s, v3.4s, v16.4s
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bilinear_nx_aarch64
.globl _sk_bilinear_nx_aarch64
FUNCTION(_sk_bilinear_nx_aarch64)
_sk_bilinear_nx_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x3dc01100                          // ldr           q0, [x8, #64]
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x4ea0d620                          // fsub          v0.4s, v17.4s, v0.4s
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f0567e0                          // movi          v0.4s, #0xbf, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bilinear_px_aarch64
.globl _sk_bilinear_px_aarch64
FUNCTION(_sk_bilinear_px_aarch64)
_sk_bilinear_px_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x3dc01100                          // ldr           q0, [x8, #64]
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f0167e0                          // movi          v0.4s, #0x3f, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bilinear_ny_aarch64
.globl _sk_bilinear_ny_aarch64
FUNCTION(_sk_bilinear_ny_aarch64)
_sk_bilinear_ny_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x3dc01901                          // ldr           q1, [x8, #96]
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x4ea1d621                          // fsub          v1.4s, v17.4s, v1.4s
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f0567e1                          // movi          v1.4s, #0xbf, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bilinear_py_aarch64
.globl _sk_bilinear_py_aarch64
FUNCTION(_sk_bilinear_py_aarch64)
_sk_bilinear_py_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x3dc01901                          // ldr           q1, [x8, #96]
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f0167e1                          // movi          v1.4s, #0x3f, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bicubic_n3x_aarch64
.globl _sk_bicubic_n3x_aarch64
FUNCTION(_sk_bicubic_n3x_aarch64)
_sk_bicubic_n3x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x3dc01111                          // ldr           q17, [x8, #64]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x4eb1d400                          // fsub          v0.4s, v0.4s, v17.4s
  .long  0x6e20dc11                          // fmul          v17.4s, v0.4s, v0.4s
  .long  0x4e20ce12                          // fmla          v18.4s, v16.4s, v0.4s
  .long  0x6e32de20                          // fmul          v0.4s, v17.4s, v18.4s
  .long  0x3dc00113                          // ldr           q19, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f07f700                          // fmov          v0.4s, #-1.500000000000000000e+00
  .long  0x4e20d660                          // fadd          v0.4s, v19.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bicubic_n1x_aarch64
.globl _sk_bicubic_n1x_aarch64
FUNCTION(_sk_bicubic_n1x_aarch64)
_sk_bicubic_n1x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x3dc01110                          // ldr           q16, [x8, #64]
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x4f0167f2                          // movi          v18.4s, #0x3f, lsl #24
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e20ce11                          // fmla          v17.4s, v16.4s, v0.4s
  .long  0x4e20ce32                          // fmla          v18.4s, v17.4s, v0.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e20ce51                          // fmla          v17.4s, v18.4s, v0.4s
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x3d802111                          // str           q17, [x8, #128]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f0567e0                          // movi          v0.4s, #0xbf, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bicubic_p1x_aarch64
.globl _sk_bicubic_p1x_aarch64
FUNCTION(_sk_bicubic_p1x_aarch64)
_sk_bicubic_p1x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x3dc01112                          // ldr           q18, [x8, #64]
  .long  0x3dc00100                          // ldr           q0, [x8]
  .long  0x4e040d33                          // dup           v19.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e32ce71                          // fmla          v17.4s, v19.4s, v18.4s
  .long  0x4e30d400                          // fadd          v0.4s, v0.4s, v16.4s
  .long  0x4e32ce30                          // fmla          v16.4s, v17.4s, v18.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e32ce11                          // fmla          v17.4s, v16.4s, v18.4s
  .long  0x3d802111                          // str           q17, [x8, #128]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bicubic_p3x_aarch64
.globl _sk_bicubic_p3x_aarch64
FUNCTION(_sk_bicubic_p3x_aarch64)
_sk_bicubic_p3x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d20                          // dup           v0.4s, w9
  .long  0x3dc01110                          // ldr           q16, [x8, #64]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x6e30de13                          // fmul          v19.4s, v16.4s, v16.4s
  .long  0x4e30cc11                          // fmla          v17.4s, v0.4s, v16.4s
  .long  0x6e31de60                          // fmul          v0.4s, v19.4s, v17.4s
  .long  0x3dc00112                          // ldr           q18, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f03f700                          // fmov          v0.4s, #1.500000000000000000e+00
  .long  0x4e20d640                          // fadd          v0.4s, v18.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bicubic_n3y_aarch64
.globl _sk_bicubic_n3y_aarch64
FUNCTION(_sk_bicubic_n3y_aarch64)
_sk_bicubic_n3y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x3dc01911                          // ldr           q17, [x8, #96]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x4f03f601                          // fmov          v1.4s, #1.000000000000000000e+00
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x4eb1d421                          // fsub          v1.4s, v1.4s, v17.4s
  .long  0x6e21dc31                          // fmul          v17.4s, v1.4s, v1.4s
  .long  0x4e21ce12                          // fmla          v18.4s, v16.4s, v1.4s
  .long  0x6e32de21                          // fmul          v1.4s, v17.4s, v18.4s
  .long  0x3dc00913                          // ldr           q19, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f07f701                          // fmov          v1.4s, #-1.500000000000000000e+00
  .long  0x4e21d661                          // fadd          v1.4s, v19.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bicubic_n1y_aarch64
.globl _sk_bicubic_n1y_aarch64
FUNCTION(_sk_bicubic_n1y_aarch64)
_sk_bicubic_n1y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x4f03f601                          // fmov          v1.4s, #1.000000000000000000e+00
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x3dc01910                          // ldr           q16, [x8, #96]
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x4f0167f2                          // movi          v18.4s, #0x3f, lsl #24
  .long  0x4eb0d421                          // fsub          v1.4s, v1.4s, v16.4s
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e21ce11                          // fmla          v17.4s, v16.4s, v1.4s
  .long  0x4e21ce32                          // fmla          v18.4s, v17.4s, v1.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e21ce51                          // fmla          v17.4s, v18.4s, v1.4s
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x3d802911                          // str           q17, [x8, #160]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f0567e1                          // movi          v1.4s, #0xbf, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bicubic_p1y_aarch64
.globl _sk_bicubic_p1y_aarch64
FUNCTION(_sk_bicubic_p1y_aarch64)
_sk_bicubic_p1y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x3dc01912                          // ldr           q18, [x8, #96]
  .long  0x3dc00901                          // ldr           q1, [x8, #32]
  .long  0x4e040d33                          // dup           v19.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e32ce71                          // fmla          v17.4s, v19.4s, v18.4s
  .long  0x4e30d421                          // fadd          v1.4s, v1.4s, v16.4s
  .long  0x4e32ce30                          // fmla          v16.4s, v17.4s, v18.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e32ce11                          // fmla          v17.4s, v16.4s, v18.4s
  .long  0x3d802911                          // str           q17, [x8, #160]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_bicubic_p3y_aarch64
.globl _sk_bicubic_p3y_aarch64
FUNCTION(_sk_bicubic_p3y_aarch64)
_sk_bicubic_p3y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x3dc01910                          // ldr           q16, [x8, #96]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x6e30de13                          // fmul          v19.4s, v16.4s, v16.4s
  .long  0x4e30cc31                          // fmla          v17.4s, v1.4s, v16.4s
  .long  0x6e31de61                          // fmul          v1.4s, v19.4s, v17.4s
  .long  0x3dc00912                          // ldr           q18, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400423                          // ldr           x3, [x1, #8]
  .long  0x4f03f701                          // fmov          v1.4s, #1.500000000000000000e+00
  .long  0x4e21d641                          // fadd          v1.4s, v18.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f0060                          // br            x3

HIDDEN _sk_callback_aarch64
.globl _sk_callback_aarch64
FUNCTION(_sk_callback_aarch64)
_sk_callback_aarch64:
  .long  0xd101c3ff                          // sub           sp, sp, #0x70
  .long  0xf90023f6                          // str           x22, [sp, #64]
  .long  0xa90553f5                          // stp           x21, x20, [sp, #80]
  .long  0xa9067bf3                          // stp           x19, x30, [sp, #96]
  .long  0xad011fe6                          // stp           q6, q7, [sp, #32]
  .long  0xad0017e4                          // stp           q4, q5, [sp]
  .long  0xaa0103f4                          // mov           x20, x1
  .long  0xf9400295                          // ldr           x21, [x20]
  .long  0xaa0003f6                          // mov           x22, x0
  .long  0x321e03e1                          // orr           w1, wzr, #0x4
  .long  0xaa0203f3                          // mov           x19, x2
  .long  0x910022a8                          // add           x8, x21, #0x8
  .long  0x4c000900                          // st4           {v0.4s-v3.4s}, [x8]
  .long  0xf94002a8                          // ldr           x8, [x21]
  .long  0xaa1503e0                          // mov           x0, x21
  .long  0xd63f0100                          // blr           x8
  .long  0xf94046a8                          // ldr           x8, [x21, #136]
  .long  0xf9400683                          // ldr           x3, [x20, #8]
  .long  0x91004281                          // add           x1, x20, #0x10
  .long  0xaa1603e0                          // mov           x0, x22
  .long  0x4c400900                          // ld4           {v0.4s-v3.4s}, [x8]
  .long  0xaa1303e2                          // mov           x2, x19
  .long  0xad4017e4                          // ldp           q4, q5, [sp]
  .long  0xad411fe6                          // ldp           q6, q7, [sp, #32]
  .long  0xa9467bf3                          // ldp           x19, x30, [sp, #96]
  .long  0xa94553f5                          // ldp           x21, x20, [sp, #80]
  .long  0xf94023f6                          // ldr           x22, [sp, #64]
  .long  0x9101c3ff                          // add           sp, sp, #0x70
  .long  0xd61f0060                          // br            x3
#elif defined(__arm__)
BALIGN4

HIDDEN _sk_start_pipeline_vfp4
.globl _sk_start_pipeline_vfp4
FUNCTION(_sk_start_pipeline_vfp4)
_sk_start_pipeline_vfp4:
  .long  0xe92d41f0                          // push          {r4, r5, r6, r7, r8, lr}
  .long  0xe1a04000                          // mov           r4, r0
  .long  0xe2840002                          // add           r0, r4, #2
  .long  0xe1a05003                          // mov           r5, r3
  .long  0xe1a08002                          // mov           r8, r2
  .long  0xe1a07001                          // mov           r7, r1
  .long  0xe1500005                          // cmp           r0, r5
  .long  0x8a000010                          // bhi           64 <sk_start_pipeline_vfp4+0x64>
  .long  0xe4976004                          // ldr           r6, [r7], #4
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xe1a00004                          // mov           r0, r4
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xe1a01007                          // mov           r1, r7
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xe1a02008                          // mov           r2, r8
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xf2804010                          // vmov.i32      d4, #0
  .long  0xf2805010                          // vmov.i32      d5, #0
  .long  0xf2806010                          // vmov.i32      d6, #0
  .long  0xf2807010                          // vmov.i32      d7, #0
  .long  0xe12fff36                          // blx           r6
  .long  0xe2840004                          // add           r0, r4, #4
  .long  0xe2844002                          // add           r4, r4, #2
  .long  0xe1500005                          // cmp           r0, r5
  .long  0x9affffef                          // bls           24 <sk_start_pipeline_vfp4+0x24>
  .long  0xe1a00004                          // mov           r0, r4
  .long  0xe8bd81f0                          // pop           {r4, r5, r6, r7, r8, pc}

HIDDEN _sk_just_return_vfp4
.globl _sk_just_return_vfp4
FUNCTION(_sk_just_return_vfp4)
_sk_just_return_vfp4:
  .long  0xe12fff1e                          // bx            lr

HIDDEN _sk_seed_shader_vfp4
.globl _sk_seed_shader_vfp4
FUNCTION(_sk_seed_shader_vfp4)
_sk_seed_shader_vfp4:
  .long  0xee800b90                          // vdup.32       d16, r0
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xedd23b00                          // vldr          d19, [r2]
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf2872f10                          // vmov.f32      d2, #1
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2400da1                          // vadd.f32      d16, d16, d17
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xf2804010                          // vmov.i32      d4, #0
  .long  0xf2021da1                          // vadd.f32      d1, d18, d17
  .long  0xf2000da3                          // vadd.f32      d0, d16, d19
  .long  0xf2805010                          // vmov.i32      d5, #0
  .long  0xf2806010                          // vmov.i32      d6, #0
  .long  0xf2807010                          // vmov.i32      d7, #0
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dither_vfp4
.globl _sk_dither_vfp4
FUNCTION(_sk_dither_vfp4)
_sk_dither_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xee800b90                          // vdup.32       d16, r0
  .long  0xf2c02012                          // vmov.i32      d18, #2
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xedd21b00                          // vldr          d17, [r2]
  .long  0xe8911010                          // ldm           r1, {r4, ip}
  .long  0xf2c03014                          // vmov.i32      d19, #4
  .long  0xe3a035f2                          // mov           r3, #1015021568
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2400da1                          // vadd.f32      d16, d16, d17
  .long  0xe494e004                          // ldr           lr, [r4], #4
  .long  0xf2c01011                          // vmov.i32      d17, #1
  .long  0xf4ee5c9f                          // vld1.32       {d21[]}, [lr :32]
  .long  0xf3fb0720                          // vcvt.s32.f32  d16, d16
  .long  0xf24041b1                          // vand          d20, d16, d17
  .long  0xf24061b2                          // vand          d22, d16, d18
  .long  0xf34051b5                          // veor          d21, d16, d21
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf2e44534                          // vshl.s32      d20, d20, #4
  .long  0xf2e16536                          // vshl.s32      d22, d22, #1
  .long  0xf24511b1                          // vand          d17, d21, d17
  .long  0xf3fe0030                          // vshr.u32      d16, d16, #2
  .long  0xf26641b4                          // vorr          d20, d22, d20
  .long  0xf24521b2                          // vand          d18, d21, d18
  .long  0xf2e51531                          // vshl.s32      d17, d17, #5
  .long  0xf26401b0                          // vorr          d16, d20, d16
  .long  0xf24531b3                          // vand          d19, d21, d19
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xf2e22532                          // vshl.s32      d18, d18, #2
  .long  0xf3ff1033                          // vshr.u32      d17, d19, #1
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xee813b90                          // vdup.32       d17, r3
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xeddf1b07                          // vldr          d17, [pc, #28]
  .long  0xf2400da1                          // vadd.f32      d16, d16, d17
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xf3410db0                          // vmul.f32      d16, d17, d16
  .long  0xf2000d80                          // vadd.f32      d0, d16, d0
  .long  0xf2001d81                          // vadd.f32      d1, d16, d1
  .long  0xf2002d82                          // vadd.f32      d2, d16, d2
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbefc0000                          // .word         0xbefc0000
  .long  0xbefc0000                          // .word         0xbefc0000

HIDDEN _sk_constant_color_vfp4
.globl _sk_constant_color_vfp4
FUNCTION(_sk_constant_color_vfp4)
_sk_constant_color_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe283400c                          // add           r4, r3, #12
  .long  0xe1a0e003                          // mov           lr, r3
  .long  0xe2833008                          // add           r3, r3, #8
  .long  0xf4ae0c9d                          // vld1.32       {d0[]}, [lr :32]!
  .long  0xf4a43c9f                          // vld1.32       {d3[]}, [r4 :32]
  .long  0xf4a32c9f                          // vld1.32       {d2[]}, [r3 :32]
  .long  0xf4ae1c9f                          // vld1.32       {d1[]}, [lr :32]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clear_vfp4
.globl _sk_clear_vfp4
FUNCTION(_sk_clear_vfp4)
_sk_clear_vfp4:
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_srcatop_vfp4
.globl _sk_srcatop_vfp4
FUNCTION(_sk_srcatop_vfp4)
_sk_srcatop_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2603d83                          // vsub.f32      d19, d16, d3
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xf3430d94                          // vmul.f32      d16, d19, d4
  .long  0xf3431d95                          // vmul.f32      d17, d19, d5
  .long  0xf3432d96                          // vmul.f32      d18, d19, d6
  .long  0xf2400c17                          // vfma.f32      d16, d0, d7
  .long  0xf2411c17                          // vfma.f32      d17, d1, d7
  .long  0xf2422c17                          // vfma.f32      d18, d2, d7
  .long  0xf2033c97                          // vfma.f32      d3, d19, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_dstatop_vfp4
.globl _sk_dstatop_vfp4
FUNCTION(_sk_dstatop_vfp4)
_sk_dstatop_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3431d15                          // vmul.f32      d17, d3, d5
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf3430d14                          // vmul.f32      d16, d3, d4
  .long  0xf3432d16                          // vmul.f32      d18, d3, d6
  .long  0xf3433d17                          // vmul.f32      d19, d3, d7
  .long  0xf2440c90                          // vfma.f32      d16, d20, d0
  .long  0xf2441c91                          // vfma.f32      d17, d20, d1
  .long  0xf2442c92                          // vfma.f32      d18, d20, d2
  .long  0xf2443c93                          // vfma.f32      d19, d20, d3
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_srcin_vfp4
.globl _sk_srcin_vfp4
FUNCTION(_sk_srcin_vfp4)
_sk_srcin_vfp4:
  .long  0xf3000d17                          // vmul.f32      d0, d0, d7
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3011d17                          // vmul.f32      d1, d1, d7
  .long  0xf3022d17                          // vmul.f32      d2, d2, d7
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_dstin_vfp4
.globl _sk_dstin_vfp4
FUNCTION(_sk_dstin_vfp4)
_sk_dstin_vfp4:
  .long  0xf3030d14                          // vmul.f32      d0, d3, d4
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3031d15                          // vmul.f32      d1, d3, d5
  .long  0xf3032d16                          // vmul.f32      d2, d3, d6
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_srcout_vfp4
.globl _sk_srcout_vfp4
FUNCTION(_sk_srcout_vfp4)
_sk_srcout_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2600d87                          // vsub.f32      d16, d16, d7
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_dstout_vfp4
.globl _sk_dstout_vfp4
FUNCTION(_sk_dstout_vfp4)
_sk_dstout_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3000d94                          // vmul.f32      d0, d16, d4
  .long  0xf3001d95                          // vmul.f32      d1, d16, d5
  .long  0xf3002d96                          // vmul.f32      d2, d16, d6
  .long  0xf3003d97                          // vmul.f32      d3, d16, d7
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_srcover_vfp4
.globl _sk_srcover_vfp4
FUNCTION(_sk_srcover_vfp4)
_sk_srcover_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf2040c30                          // vfma.f32      d0, d4, d16
  .long  0xf2051c30                          // vfma.f32      d1, d5, d16
  .long  0xf2062c30                          // vfma.f32      d2, d6, d16
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_dstover_vfp4
.globl _sk_dstover_vfp4
FUNCTION(_sk_dstover_vfp4)
_sk_dstover_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2651115                          // vorr          d17, d5, d5
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf2640114                          // vorr          d16, d4, d4
  .long  0xf2662116                          // vorr          d18, d6, d6
  .long  0xf2673117                          // vorr          d19, d7, d7
  .long  0xf2400c34                          // vfma.f32      d16, d0, d20
  .long  0xf2411c34                          // vfma.f32      d17, d1, d20
  .long  0xf2422c34                          // vfma.f32      d18, d2, d20
  .long  0xf2433c34                          // vfma.f32      d19, d3, d20
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_modulate_vfp4
.globl _sk_modulate_vfp4
FUNCTION(_sk_modulate_vfp4)
_sk_modulate_vfp4:
  .long  0xf3000d14                          // vmul.f32      d0, d0, d4
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3011d15                          // vmul.f32      d1, d1, d5
  .long  0xf3022d16                          // vmul.f32      d2, d2, d6
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_multiply_vfp4
.globl _sk_multiply_vfp4
FUNCTION(_sk_multiply_vfp4)
_sk_multiply_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2601d87                          // vsub.f32      d17, d16, d7
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3412d90                          // vmul.f32      d18, d17, d0
  .long  0xf3403d94                          // vmul.f32      d19, d16, d4
  .long  0xf3414d91                          // vmul.f32      d20, d17, d1
  .long  0xf3405d95                          // vmul.f32      d21, d16, d5
  .long  0xf3416d92                          // vmul.f32      d22, d17, d2
  .long  0xf3418d93                          // vmul.f32      d24, d17, d3
  .long  0xf3407d96                          // vmul.f32      d23, d16, d6
  .long  0xf3409d97                          // vmul.f32      d25, d16, d7
  .long  0xf2430da2                          // vadd.f32      d16, d19, d18
  .long  0xf2451da4                          // vadd.f32      d17, d21, d20
  .long  0xf2472da6                          // vadd.f32      d18, d23, d22
  .long  0xf2493da8                          // vadd.f32      d19, d25, d24
  .long  0xf2400c14                          // vfma.f32      d16, d0, d4
  .long  0xf2411c15                          // vfma.f32      d17, d1, d5
  .long  0xf2422c16                          // vfma.f32      d18, d2, d6
  .long  0xf2433c17                          // vfma.f32      d19, d3, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_plus__vfp4
.globl _sk_plus__vfp4
FUNCTION(_sk_plus__vfp4)
_sk_plus__vfp4:
  .long  0xf2000d04                          // vadd.f32      d0, d0, d4
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2011d05                          // vadd.f32      d1, d1, d5
  .long  0xf2022d06                          // vadd.f32      d2, d2, d6
  .long  0xf2033d07                          // vadd.f32      d3, d3, d7
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_screen_vfp4
.globl _sk_screen_vfp4
FUNCTION(_sk_screen_vfp4)
_sk_screen_vfp4:
  .long  0xf2400d04                          // vadd.f32      d16, d0, d4
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2411d05                          // vadd.f32      d17, d1, d5
  .long  0xf2422d06                          // vadd.f32      d18, d2, d6
  .long  0xf2433d07                          // vadd.f32      d19, d3, d7
  .long  0xf2600c14                          // vfms.f32      d16, d0, d4
  .long  0xf2611c15                          // vfms.f32      d17, d1, d5
  .long  0xf2622c16                          // vfms.f32      d18, d2, d6
  .long  0xf2633c17                          // vfms.f32      d19, d3, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_xor__vfp4
.globl _sk_xor__vfp4
FUNCTION(_sk_xor__vfp4)
_sk_xor__vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2603d83                          // vsub.f32      d19, d16, d3
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf3430d94                          // vmul.f32      d16, d19, d4
  .long  0xf3431d95                          // vmul.f32      d17, d19, d5
  .long  0xf3432d96                          // vmul.f32      d18, d19, d6
  .long  0xf3433d97                          // vmul.f32      d19, d19, d7
  .long  0xf2440c90                          // vfma.f32      d16, d20, d0
  .long  0xf2441c91                          // vfma.f32      d17, d20, d1
  .long  0xf2442c92                          // vfma.f32      d18, d20, d2
  .long  0xf2443c93                          // vfma.f32      d19, d20, d3
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_darken_vfp4
.globl _sk_darken_vfp4
FUNCTION(_sk_darken_vfp4)
_sk_darken_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3402d17                          // vmul.f32      d18, d0, d7
  .long  0xf3433d15                          // vmul.f32      d19, d3, d5
  .long  0xf3414d17                          // vmul.f32      d20, d1, d7
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3426d17                          // vmul.f32      d22, d2, d7
  .long  0xf2421fa1                          // vmax.f32      d17, d18, d17
  .long  0xf2407d04                          // vadd.f32      d23, d0, d4
  .long  0xf2443fa3                          // vmax.f32      d19, d20, d19
  .long  0xf2412d05                          // vadd.f32      d18, d1, d5
  .long  0xf2424d06                          // vadd.f32      d20, d2, d6
  .long  0xf2465fa5                          // vmax.f32      d21, d22, d21
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2270da1                          // vsub.f32      d0, d23, d17
  .long  0xf2221da3                          // vsub.f32      d1, d18, d19
  .long  0xf2242da5                          // vsub.f32      d2, d20, d21
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_lighten_vfp4
.globl _sk_lighten_vfp4
FUNCTION(_sk_lighten_vfp4)
_sk_lighten_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3402d17                          // vmul.f32      d18, d0, d7
  .long  0xf3433d15                          // vmul.f32      d19, d3, d5
  .long  0xf3414d17                          // vmul.f32      d20, d1, d7
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3426d17                          // vmul.f32      d22, d2, d7
  .long  0xf2621fa1                          // vmin.f32      d17, d18, d17
  .long  0xf2407d04                          // vadd.f32      d23, d0, d4
  .long  0xf2643fa3                          // vmin.f32      d19, d20, d19
  .long  0xf2412d05                          // vadd.f32      d18, d1, d5
  .long  0xf2424d06                          // vadd.f32      d20, d2, d6
  .long  0xf2665fa5                          // vmin.f32      d21, d22, d21
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2270da1                          // vsub.f32      d0, d23, d17
  .long  0xf2221da3                          // vsub.f32      d1, d18, d19
  .long  0xf2242da5                          // vsub.f32      d2, d20, d21
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_difference_vfp4
.globl _sk_difference_vfp4
FUNCTION(_sk_difference_vfp4)
_sk_difference_vfp4:
  .long  0xf3430d14                          // vmul.f32      d16, d3, d4
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3401d17                          // vmul.f32      d17, d0, d7
  .long  0xf3432d15                          // vmul.f32      d18, d3, d5
  .long  0xf3413d17                          // vmul.f32      d19, d1, d7
  .long  0xf3434d16                          // vmul.f32      d20, d3, d6
  .long  0xf3425d17                          // vmul.f32      d21, d2, d7
  .long  0xf2c76f10                          // vmov.f32      d22, #1
  .long  0xf2610fa0                          // vmin.f32      d16, d17, d16
  .long  0xf2631fa2                          // vmin.f32      d17, d19, d18
  .long  0xf2662d83                          // vsub.f32      d18, d22, d3
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf2404d04                          // vadd.f32      d20, d0, d4
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf2073c32                          // vfma.f32      d3, d7, d18
  .long  0xf2415d05                          // vadd.f32      d21, d1, d5
  .long  0xf2411da1                          // vadd.f32      d17, d17, d17
  .long  0xf2426d06                          // vadd.f32      d22, d2, d6
  .long  0xf2432da3                          // vadd.f32      d18, d19, d19
  .long  0xf2240da0                          // vsub.f32      d0, d20, d16
  .long  0xf2251da1                          // vsub.f32      d1, d21, d17
  .long  0xf2262da2                          // vsub.f32      d2, d22, d18
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_exclusion_vfp4
.globl _sk_exclusion_vfp4
FUNCTION(_sk_exclusion_vfp4)
_sk_exclusion_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3401d14                          // vmul.f32      d17, d0, d4
  .long  0xf3412d15                          // vmul.f32      d18, d1, d5
  .long  0xf3423d16                          // vmul.f32      d19, d2, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf2404d04                          // vadd.f32      d20, d0, d4
  .long  0xf2411da1                          // vadd.f32      d17, d17, d17
  .long  0xf2415d05                          // vadd.f32      d21, d1, d5
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2426d06                          // vadd.f32      d22, d2, d6
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2240da1                          // vsub.f32      d0, d20, d17
  .long  0xf2251da2                          // vsub.f32      d1, d21, d18
  .long  0xf2262da3                          // vsub.f32      d2, d22, d19
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_colorburn_vfp4
.globl _sk_colorburn_vfp4
FUNCTION(_sk_colorburn_vfp4)
_sk_colorburn_vfp4:
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2671d06                          // vsub.f32      d17, d7, d6
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf3008d93                          // vmul.f32      d8, d16, d3
  .long  0xf3019d93                          // vmul.f32      d9, d17, d3
  .long  0xf302ad93                          // vmul.f32      d10, d18, d3
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xeec8baa0                          // vdiv.f32      s23, s17, s1
  .long  0xee88ba00                          // vdiv.f32      s22, s16, s0
  .long  0xeec98aa2                          // vdiv.f32      s17, s19, s5
  .long  0xee898a02                          // vdiv.f32      s16, s18, s4
  .long  0xeeca9aa1                          // vdiv.f32      s19, s21, s3
  .long  0xee8a9a01                          // vdiv.f32      s18, s20, s2
  .long  0xf2672f08                          // vmin.f32      d18, d7, d8
  .long  0xf2673f09                          // vmin.f32      d19, d7, d9
  .long  0xf2670f0b                          // vmin.f32      d16, d7, d11
  .long  0xf2614d87                          // vsub.f32      d20, d17, d7
  .long  0xf2672d22                          // vsub.f32      d18, d7, d18
  .long  0xf2673d23                          // vsub.f32      d19, d7, d19
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2670d20                          // vsub.f32      d16, d7, d16
  .long  0xf3445d90                          // vmul.f32      d21, d20, d0
  .long  0xf3446d92                          // vmul.f32      d22, d20, d2
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf3444d91                          // vmul.f32      d20, d20, d1
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf3400d93                          // vmul.f32      d16, d16, d3
  .long  0xf3417d95                          // vmul.f32      d23, d17, d5
  .long  0xf3418d94                          // vmul.f32      d24, d17, d4
  .long  0xf3419d96                          // vmul.f32      d25, d17, d6
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf2462da2                          // vadd.f32      d18, d22, d18
  .long  0xf245ada0                          // vadd.f32      d26, d21, d16
  .long  0xf247bd81                          // vadd.f32      d27, d23, d1
  .long  0xf248cd80                          // vadd.f32      d28, d24, d0
  .long  0xf249dd82                          // vadd.f32      d29, d25, d2
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf2499da2                          // vadd.f32      d25, d25, d18
  .long  0xf2473da3                          // vadd.f32      d19, d23, d19
  .long  0xf3f97501                          // vceq.f32      d23, d1, #0
  .long  0xf2455d84                          // vadd.f32      d21, d21, d4
  .long  0xf2444d85                          // vadd.f32      d20, d20, d5
  .long  0xf2440e07                          // vceq.f32      d16, d4, d7
  .long  0xf2466d86                          // vadd.f32      d22, d22, d6
  .long  0xf2451e07                          // vceq.f32      d17, d5, d7
  .long  0xf2462e07                          // vceq.f32      d18, d6, d7
  .long  0xf35b71b3                          // vbsl          d23, d27, d19
  .long  0xf3f93500                          // vceq.f32      d19, d0, #0
  .long  0xf2488daa                          // vadd.f32      d24, d24, d26
  .long  0xf35c31b8                          // vbsl          d19, d28, d24
  .long  0xf3f98502                          // vceq.f32      d24, d2, #0
  .long  0xf35d81b9                          // vbsl          d24, d29, d25
  .long  0xf35501b3                          // vbsl          d16, d21, d19
  .long  0xf35411b7                          // vbsl          d17, d20, d23
  .long  0xf35621b8                          // vbsl          d18, d22, d24
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_colordodge_vfp4
.globl _sk_colordodge_vfp4
FUNCTION(_sk_colordodge_vfp4)
_sk_colordodge_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xf2238d02                          // vsub.f32      d8, d3, d2
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3039d16                          // vmul.f32      d9, d3, d6
  .long  0xf223ad01                          // vsub.f32      d10, d3, d1
  .long  0xf303bd15                          // vmul.f32      d11, d3, d5
  .long  0xf223cd00                          // vsub.f32      d12, d3, d0
  .long  0xf303dd14                          // vmul.f32      d13, d3, d4
  .long  0xeec9eaa8                          // vdiv.f32      s29, s19, s17
  .long  0xee89ea08                          // vdiv.f32      s28, s18, s16
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xeecd9aac                          // vdiv.f32      s19, s27, s25
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xee8d9a0c                          // vdiv.f32      s18, s26, s24
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2672f0e                          // vmin.f32      d18, d7, d14
  .long  0xf2601d87                          // vsub.f32      d17, d16, d7
  .long  0xf2673f08                          // vmin.f32      d19, d7, d8
  .long  0xf2674f09                          // vmin.f32      d20, d7, d9
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3415d92                          // vmul.f32      d21, d17, d2
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf3416d91                          // vmul.f32      d22, d17, d1
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf3411d90                          // vmul.f32      d17, d17, d0
  .long  0xf3444d93                          // vmul.f32      d20, d20, d3
  .long  0xf3407d95                          // vmul.f32      d23, d16, d5
  .long  0xf3408d94                          // vmul.f32      d24, d16, d4
  .long  0xf3409d96                          // vmul.f32      d25, d16, d6
  .long  0xf2452da2                          // vadd.f32      d18, d21, d18
  .long  0xf2463da3                          // vadd.f32      d19, d22, d19
  .long  0xf2414da4                          // vadd.f32      d20, d17, d20
  .long  0xf241ae03                          // vceq.f32      d26, d1, d3
  .long  0xf247bd81                          // vadd.f32      d27, d23, d1
  .long  0xf3b91505                          // vceq.f32      d1, d5, #0
  .long  0xf240ce03                          // vceq.f32      d28, d0, d3
  .long  0xf248dd80                          // vadd.f32      d29, d24, d0
  .long  0xf3b90504                          // vceq.f32      d0, d4, #0
  .long  0xf242ee03                          // vceq.f32      d30, d2, d3
  .long  0xf249fd82                          // vadd.f32      d31, d25, d2
  .long  0xf3b92506                          // vceq.f32      d2, d6, #0
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2410d84                          // vadd.f32      d16, d17, d4
  .long  0xf2491da2                          // vadd.f32      d17, d25, d18
  .long  0xf2462d85                          // vadd.f32      d18, d22, d5
  .long  0xf2455d86                          // vadd.f32      d21, d21, d6
  .long  0xf2473da3                          // vadd.f32      d19, d23, d19
  .long  0xf2484da4                          // vadd.f32      d20, d24, d20
  .long  0xf35fe1b1                          // vbsl          d30, d31, d17
  .long  0xf35ba1b3                          // vbsl          d26, d27, d19
  .long  0xf35dc1b4                          // vbsl          d28, d29, d20
  .long  0xf31001bc                          // vbsl          d0, d16, d28
  .long  0xf31211ba                          // vbsl          d1, d18, d26
  .long  0xf31521be                          // vbsl          d2, d21, d30
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_hardlight_vfp4
.globl _sk_hardlight_vfp4
FUNCTION(_sk_hardlight_vfp4)
_sk_hardlight_vfp4:
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xf2617d87                          // vsub.f32      d23, d17, d7
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf2674d06                          // vsub.f32      d20, d7, d6
  .long  0xf2633d00                          // vsub.f32      d19, d3, d0
  .long  0xf2635d01                          // vsub.f32      d21, d3, d1
  .long  0xf2636d02                          // vsub.f32      d22, d3, d2
  .long  0xf347bd90                          // vmul.f32      d27, d23, d0
  .long  0xf341cd94                          // vmul.f32      d28, d17, d4
  .long  0xf3430db0                          // vmul.f32      d16, d19, d16
  .long  0xf3463db4                          // vmul.f32      d19, d22, d20
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf2404d00                          // vadd.f32      d20, d0, d0
  .long  0xf3405d14                          // vmul.f32      d21, d0, d4
  .long  0xf2416d01                          // vadd.f32      d22, d1, d1
  .long  0xf3418d15                          // vmul.f32      d24, d1, d5
  .long  0xf2429d02                          // vadd.f32      d25, d2, d2
  .long  0xf342ad16                          // vmul.f32      d26, d2, d6
  .long  0xf347dd91                          // vmul.f32      d29, d23, d1
  .long  0xf341fd95                          // vmul.f32      d31, d17, d5
  .long  0xf24cbdab                          // vadd.f32      d27, d28, d27
  .long  0xf3477d92                          // vmul.f32      d23, d23, d2
  .long  0xf341cd96                          // vmul.f32      d28, d17, d6
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf343ed17                          // vmul.f32      d30, d3, d7
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf3434e24                          // vcge.f32      d20, d3, d20
  .long  0xf2455da5                          // vadd.f32      d21, d21, d21
  .long  0xf3436e26                          // vcge.f32      d22, d3, d22
  .long  0xf3439e29                          // vcge.f32      d25, d3, d25
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf24aadaa                          // vadd.f32      d26, d26, d26
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf24fddad                          // vadd.f32      d29, d31, d29
  .long  0xf24c1da7                          // vadd.f32      d17, d28, d23
  .long  0xf26e0da0                          // vsub.f32      d16, d30, d16
  .long  0xf26e2da2                          // vsub.f32      d18, d30, d18
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf35541b0                          // vbsl          d20, d21, d16
  .long  0xf35861b2                          // vbsl          d22, d24, d18
  .long  0xf35a91b3                          // vbsl          d25, d26, d19
  .long  0xf20b0da4                          // vadd.f32      d0, d27, d20
  .long  0xf20d1da6                          // vadd.f32      d1, d29, d22
  .long  0xf2012da9                          // vadd.f32      d2, d17, d25
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_overlay_vfp4
.globl _sk_overlay_vfp4
FUNCTION(_sk_overlay_vfp4)
_sk_overlay_vfp4:
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xf2617d87                          // vsub.f32      d23, d17, d7
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf2674d06                          // vsub.f32      d20, d7, d6
  .long  0xf2633d00                          // vsub.f32      d19, d3, d0
  .long  0xf2635d01                          // vsub.f32      d21, d3, d1
  .long  0xf2636d02                          // vsub.f32      d22, d3, d2
  .long  0xf347bd90                          // vmul.f32      d27, d23, d0
  .long  0xf341cd94                          // vmul.f32      d28, d17, d4
  .long  0xf3430db0                          // vmul.f32      d16, d19, d16
  .long  0xf3463db4                          // vmul.f32      d19, d22, d20
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf2444d04                          // vadd.f32      d20, d4, d4
  .long  0xf3405d14                          // vmul.f32      d21, d0, d4
  .long  0xf2456d05                          // vadd.f32      d22, d5, d5
  .long  0xf3418d15                          // vmul.f32      d24, d1, d5
  .long  0xf2469d06                          // vadd.f32      d25, d6, d6
  .long  0xf342ad16                          // vmul.f32      d26, d2, d6
  .long  0xf347dd91                          // vmul.f32      d29, d23, d1
  .long  0xf341fd95                          // vmul.f32      d31, d17, d5
  .long  0xf24cbdab                          // vadd.f32      d27, d28, d27
  .long  0xf3477d92                          // vmul.f32      d23, d23, d2
  .long  0xf341cd96                          // vmul.f32      d28, d17, d6
  .long  0xf343ed17                          // vmul.f32      d30, d3, d7
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf3474e24                          // vcge.f32      d20, d7, d20
  .long  0xf2455da5                          // vadd.f32      d21, d21, d21
  .long  0xf3476e26                          // vcge.f32      d22, d7, d22
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf3479e29                          // vcge.f32      d25, d7, d25
  .long  0xf24aadaa                          // vadd.f32      d26, d26, d26
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf24fddad                          // vadd.f32      d29, d31, d29
  .long  0xf24c1da7                          // vadd.f32      d17, d28, d23
  .long  0xf26e0da0                          // vsub.f32      d16, d30, d16
  .long  0xf26e2da2                          // vsub.f32      d18, d30, d18
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf35541b0                          // vbsl          d20, d21, d16
  .long  0xf35861b2                          // vbsl          d22, d24, d18
  .long  0xf35a91b3                          // vbsl          d25, d26, d19
  .long  0xf20b0da4                          // vadd.f32      d0, d27, d20
  .long  0xf20d1da6                          // vadd.f32      d1, d29, d22
  .long  0xf2012da9                          // vadd.f32      d2, d17, d25
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_softlight_vfp4
.globl _sk_softlight_vfp4
FUNCTION(_sk_softlight_vfp4)
_sk_softlight_vfp4:
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xeec58aa7                          // vdiv.f32      s17, s11, s15
  .long  0xf3f90407                          // vcgt.f32      d16, d7, #0
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xeec49aa7                          // vdiv.f32      s19, s9, s15
  .long  0xeec6aaa7                          // vdiv.f32      s21, s13, s15
  .long  0xee858a07                          // vdiv.f32      s16, s10, s14
  .long  0xee849a07                          // vdiv.f32      s18, s8, s14
  .long  0xee86aa07                          // vdiv.f32      s20, s12, s14
  .long  0xf26021b0                          // vorr          d18, d16, d16
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf3582131                          // vbsl          d18, d8, d17
  .long  0xf26031b0                          // vorr          d19, d16, d16
  .long  0xf3fb45a2                          // vrsqrte.f32   d20, d18
  .long  0xf3593131                          // vbsl          d19, d9, d17
  .long  0xf35a0131                          // vbsl          d16, d10, d17
  .long  0xf3fb15a3                          // vrsqrte.f32   d17, d19
  .long  0xf3fb55a0                          // vrsqrte.f32   d21, d16
  .long  0xf3446db4                          // vmul.f32      d22, d20, d20
  .long  0xf243ada3                          // vadd.f32      d26, d19, d19
  .long  0xf240bda0                          // vadd.f32      d27, d16, d16
  .long  0xf3417db1                          // vmul.f32      d23, d17, d17
  .long  0xf3458db5                          // vmul.f32      d24, d21, d21
  .long  0xf2626fb6                          // vrsqrts.f32   d22, d18, d22
  .long  0xf2429da2                          // vadd.f32      d25, d18, d18
  .long  0xf2637fb7                          // vrsqrts.f32   d23, d19, d23
  .long  0xf2608fb8                          // vrsqrts.f32   d24, d16, d24
  .long  0xf2818f1c                          // vmov.f32      d8, #7
  .long  0xf2499da9                          // vadd.f32      d25, d25, d25
  .long  0xf3444db6                          // vmul.f32      d20, d20, d22
  .long  0xf24a6daa                          // vadd.f32      d22, d26, d26
  .long  0xf24badab                          // vadd.f32      d26, d27, d27
  .long  0xf3411db7                          // vmul.f32      d17, d17, d23
  .long  0xf3455db8                          // vmul.f32      d21, d21, d24
  .long  0xf3fb7524                          // vrecpe.f32    d23, d20
  .long  0xf3498db9                          // vmul.f32      d24, d25, d25
  .long  0xf3fbd521                          // vrecpe.f32    d29, d17
  .long  0xf34aedba                          // vmul.f32      d30, d26, d26
  .long  0xf3fbf525                          // vrecpe.f32    d31, d21
  .long  0xf2444fb7                          // vrecps.f32    d20, d20, d23
  .long  0xf346cdb6                          // vmul.f32      d28, d22, d22
  .long  0xf2411fbd                          // vrecps.f32    d17, d17, d29
  .long  0xf3c7bf10                          // vmov.f32      d27, #-1
  .long  0xf2455fbf                          // vrecps.f32    d21, d21, d31
  .long  0xf24aadae                          // vadd.f32      d26, d26, d30
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2429dab                          // vadd.f32      d25, d18, d27
  .long  0xf2466dac                          // vadd.f32      d22, d22, d28
  .long  0xf243cdab                          // vadd.f32      d28, d19, d27
  .long  0xf240bdab                          // vadd.f32      d27, d16, d27
  .long  0xf3474db4                          // vmul.f32      d20, d23, d20
  .long  0xf2c7ef10                          // vmov.f32      d30, #1
  .long  0xf34d1db1                          // vmul.f32      d17, d29, d17
  .long  0xf34badba                          // vmul.f32      d26, d27, d26
  .long  0xf242bd02                          // vadd.f32      d27, d2, d2
  .long  0xf26edda0                          // vsub.f32      d29, d30, d16
  .long  0xf3498db8                          // vmul.f32      d24, d25, d24
  .long  0xf3429d98                          // vmul.f32      d25, d18, d8
  .long  0xf34f5db5                          // vmul.f32      d21, d31, d21
  .long  0xf26efda2                          // vsub.f32      d31, d30, d18
  .long  0xf2642da2                          // vsub.f32      d18, d20, d18
  .long  0xf26b4d83                          // vsub.f32      d20, d27, d3
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf34c6db6                          // vmul.f32      d22, d28, d22
  .long  0xf3437d98                          // vmul.f32      d23, d19, d8
  .long  0xf3449dbd                          // vmul.f32      d25, d20, d29
  .long  0xf245dd05                          // vadd.f32      d29, d5, d5
  .long  0xf340cd98                          // vmul.f32      d28, d16, d8
  .long  0xf2476da6                          // vadd.f32      d22, d23, d22
  .long  0xf2611da3                          // vsub.f32      d17, d17, d19
  .long  0xf24dddad                          // vadd.f32      d29, d29, d29
  .long  0xf24c7daa                          // vadd.f32      d23, d28, d26
  .long  0xf2650da0                          // vsub.f32      d16, d21, d16
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf347de2d                          // vcge.f32      d29, d7, d29
  .long  0xf241ad01                          // vadd.f32      d26, d1, d1
  .long  0xf3444d97                          // vmul.f32      d20, d20, d7
  .long  0xf358d1b2                          // vbsl          d29, d24, d18
  .long  0xf2448d04                          // vadd.f32      d24, d4, d4
  .long  0xf2462d06                          // vadd.f32      d18, d6, d6
  .long  0xf26a5d83                          // vsub.f32      d21, d26, d3
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf345cdbf                          // vmul.f32      d28, d21, d31
  .long  0xf3455d97                          // vmul.f32      d21, d21, d7
  .long  0xf3478e28                          // vcge.f32      d24, d7, d24
  .long  0xf3472e22                          // vcge.f32      d18, d7, d18
  .long  0xf343fd14                          // vmul.f32      d31, d3, d4
  .long  0xf3455dbd                          // vmul.f32      d21, d21, d29
  .long  0xf35681b1                          // vbsl          d24, d22, d17
  .long  0xf2401d00                          // vadd.f32      d17, d0, d0
  .long  0xf35721b0                          // vbsl          d18, d23, d16
  .long  0xf24c0d83                          // vadd.f32      d16, d28, d3
  .long  0xf2496d83                          // vadd.f32      d22, d25, d3
  .long  0xf2617d83                          // vsub.f32      d23, d17, d3
  .long  0xf3442db2                          // vmul.f32      d18, d20, d18
  .long  0xf3434e2a                          // vcge.f32      d20, d3, d26
  .long  0xf343ae2b                          // vcge.f32      d26, d3, d27
  .long  0xf3473db3                          // vmul.f32      d19, d23, d19
  .long  0xf3477d97                          // vmul.f32      d23, d23, d7
  .long  0xf3431e21                          // vcge.f32      d17, d3, d17
  .long  0xf3400d95                          // vmul.f32      d16, d16, d5
  .long  0xf2433d83                          // vadd.f32      d19, d19, d3
  .long  0xf3477db8                          // vmul.f32      d23, d23, d24
  .long  0xf26e8d87                          // vsub.f32      d24, d30, d7
  .long  0xf26eed83                          // vsub.f32      d30, d30, d3
  .long  0xf3433d94                          // vmul.f32      d19, d19, d4
  .long  0xf24f7da7                          // vadd.f32      d23, d31, d23
  .long  0xf3489d91                          // vmul.f32      d25, d24, d1
  .long  0xf348cd90                          // vmul.f32      d28, d24, d0
  .long  0xf34edd94                          // vmul.f32      d29, d30, d4
  .long  0xf34ebd95                          // vmul.f32      d27, d30, d5
  .long  0xf3488d92                          // vmul.f32      d24, d24, d2
  .long  0xf34efd96                          // vmul.f32      d31, d30, d6
  .long  0xf24dcdac                          // vadd.f32      d28, d29, d28
  .long  0xf343dd15                          // vmul.f32      d29, d3, d5
  .long  0xf24b9da9                          // vadd.f32      d25, d27, d25
  .long  0xf343bd16                          // vmul.f32      d27, d3, d6
  .long  0xf3466d96                          // vmul.f32      d22, d22, d6
  .long  0xf24f8da8                          // vadd.f32      d24, d31, d24
  .long  0xf24d5da5                          // vadd.f32      d21, d29, d21
  .long  0xf24b2da2                          // vadd.f32      d18, d27, d18
  .long  0xf35311b7                          // vbsl          d17, d19, d23
  .long  0xf35041b5                          // vbsl          d20, d16, d21
  .long  0xf356a1b2                          // vbsl          d26, d22, d18
  .long  0xf2073c3e                          // vfma.f32      d3, d7, d30
  .long  0xf20c0da1                          // vadd.f32      d0, d28, d17
  .long  0xf2091da4                          // vadd.f32      d1, d25, d20
  .long  0xf2082daa                          // vadd.f32      d2, d24, d26
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_hue_vfp4
.globl _sk_hue_vfp4
FUNCTION(_sk_hue_vfp4)
_sk_hue_vfp4:
  .long  0xed2d8b0c                          // vpush         {d8-d13}
  .long  0xf3420d13                          // vmul.f32      d16, d2, d3
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3411d13                          // vmul.f32      d17, d1, d3
  .long  0xf2652f06                          // vmin.f32      d18, d5, d6
  .long  0xf2453f06                          // vmax.f32      d19, d5, d6
  .long  0xf3404d13                          // vmul.f32      d20, d0, d3
  .long  0xf2615fa0                          // vmin.f32      d21, d17, d16
  .long  0xf2642f22                          // vmin.f32      d18, d4, d18
  .long  0xf2443f23                          // vmax.f32      d19, d4, d19
  .long  0xf2416fa0                          // vmax.f32      d22, d17, d16
  .long  0xf2645fa5                          // vmin.f32      d21, d20, d21
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2443fa6                          // vmax.f32      d19, d20, d22
  .long  0xeddf6b76                          // vldr          d22, [pc, #472]
  .long  0xf2611da5                          // vsub.f32      d17, d17, d21
  .long  0xf2644da5                          // vsub.f32      d20, d20, d21
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf2238da5                          // vsub.f32      d8, d19, d21
  .long  0xf2600da5                          // vsub.f32      d16, d16, d21
  .long  0xf3f97508                          // vceq.f32      d23, d8, #0
  .long  0xf26751b7                          // vorr          d21, d23, d23
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xeddf1b69                          // vldr          d17, [pc, #420]
  .long  0xf302adb4                          // vmul.f32      d10, d18, d20
  .long  0xf3453d31                          // vmul.f32      d19, d5, d17
  .long  0xf302bdb0                          // vmul.f32      d11, d18, d16
  .long  0xeddf2b67                          // vldr          d18, [pc, #412]
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xeec9caa8                          // vdiv.f32      s25, s19, s17
  .long  0xee89ca08                          // vdiv.f32      s24, s18, s16
  .long  0xeeca9aa8                          // vdiv.f32      s19, s21, s17
  .long  0xee8a9a08                          // vdiv.f32      s18, s20, s16
  .long  0xeecbaaa8                          // vdiv.f32      s21, s23, s17
  .long  0xee8baa08                          // vdiv.f32      s20, s22, s16
  .long  0xf3444d32                          // vmul.f32      d20, d4, d18
  .long  0xf350519c                          // vbsl          d21, d16, d12
  .long  0xf3468d36                          // vmul.f32      d24, d6, d22
  .long  0xf3459db1                          // vmul.f32      d25, d21, d17
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf26741b7                          // vorr          d20, d23, d23
  .long  0xf350719a                          // vbsl          d23, d16, d10
  .long  0xf3504199                          // vbsl          d20, d16, d9
  .long  0xf2433da8                          // vadd.f32      d19, d19, d24
  .long  0xf344adb2                          // vmul.f32      d26, d20, d18
  .long  0xf3478db6                          // vmul.f32      d24, d23, d22
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf24a9da9                          // vadd.f32      d25, d26, d25
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2633da8                          // vsub.f32      d19, d19, d24
  .long  0xf2458da3                          // vadd.f32      d24, d21, d19
  .long  0xf2445da3                          // vadd.f32      d21, d20, d19
  .long  0xf2477da3                          // vadd.f32      d23, d23, d19
  .long  0xf3481db1                          // vmul.f32      d17, d24, d17
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf3473db6                          // vmul.f32      d19, d23, d22
  .long  0xf2684fa7                          // vmin.f32      d20, d24, d23
  .long  0xf2486fa7                          // vmax.f32      d22, d24, d23
  .long  0xf2421da1                          // vadd.f32      d17, d18, d17
  .long  0xf2456fa6                          // vmax.f32      d22, d21, d22
  .long  0xf2432da1                          // vadd.f32      d18, d19, d17
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf3f944a3                          // vcge.f32      d20, d19, #0
  .long  0xf264a1b4                          // vorr          d26, d20, d20
  .long  0xf2671da2                          // vsub.f32      d17, d23, d18
  .long  0xf2228da3                          // vsub.f32      d8, d18, d19
  .long  0xf26431b4                          // vorr          d19, d20, d20
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xf3431d17                          // vmul.f32      d17, d3, d7
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf2429d8a                          // vadd.f32      d25, d18, d10
  .long  0xf35731b9                          // vbsl          d19, d23, d25
  .long  0xf2619da2                          // vsub.f32      d25, d17, d18
  .long  0xf2637da2                          // vsub.f32      d23, d19, d18
  .long  0xf226ada2                          // vsub.f32      d10, d22, d18
  .long  0xf309bdb7                          // vmul.f32      d11, d25, d23
  .long  0xf2687da2                          // vsub.f32      d23, d24, d18
  .long  0xeecb9aaa                          // vdiv.f32      s19, s23, s21
  .long  0xee8b9a0a                          // vdiv.f32      s18, s22, s20
  .long  0xf302bdb7                          // vmul.f32      d11, d18, d23
  .long  0xeecbcaa8                          // vdiv.f32      s25, s23, s17
  .long  0xee8bca08                          // vdiv.f32      s24, s22, s16
  .long  0xf2427d8c                          // vadd.f32      d23, d18, d12
  .long  0xf358a1b7                          // vbsl          d26, d24, d23
  .long  0xf26a7da2                          // vsub.f32      d23, d26, d18
  .long  0xf309bdb7                          // vmul.f32      d11, d25, d23
  .long  0xf2657da2                          // vsub.f32      d23, d21, d18
  .long  0xeecbcaaa                          // vdiv.f32      s25, s23, s21
  .long  0xee8bca0a                          // vdiv.f32      s24, s22, s20
  .long  0xf302bdb7                          // vmul.f32      d11, d18, d23
  .long  0xf2428d8c                          // vadd.f32      d24, d18, d12
  .long  0xeecbdaa8                          // vdiv.f32      s27, s23, s17
  .long  0xee8bda08                          // vdiv.f32      s26, s22, s16
  .long  0xf2427d8d                          // vadd.f32      d23, d18, d13
  .long  0xf35541b7                          // vbsl          d20, d21, d23
  .long  0xf2c77f10                          // vmov.f32      d23, #1
  .long  0xf2645da2                          // vsub.f32      d21, d20, d18
  .long  0xf3098db5                          // vmul.f32      d8, d25, d21
  .long  0xf3665ea1                          // vcgt.f32      d21, d22, d17
  .long  0xf2679d87                          // vsub.f32      d25, d23, d7
  .long  0xf2677d83                          // vsub.f32      d23, d23, d3
  .long  0xeec8baaa                          // vdiv.f32      s23, s17, s21
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf2426d8b                          // vadd.f32      d22, d18, d11
  .long  0xf265f1b5                          // vorr          d31, d21, d21
  .long  0xf2422d89                          // vadd.f32      d18, d18, d9
  .long  0xf349bd90                          // vmul.f32      d27, d25, d0
  .long  0xf356f1b4                          // vbsl          d31, d22, d20
  .long  0xf347cd94                          // vmul.f32      d28, d23, d4
  .long  0xf349dd91                          // vmul.f32      d29, d25, d1
  .long  0xf3494d92                          // vmul.f32      d20, d25, d2
  .long  0xf3476d96                          // vmul.f32      d22, d23, d6
  .long  0xf347ed95                          // vmul.f32      d30, d23, d5
  .long  0xf26571b5                          // vorr          d23, d21, d21
  .long  0xf35251b3                          // vbsl          d21, d18, d19
  .long  0xf35871ba                          // vbsl          d23, d24, d26
  .long  0xf2438d07                          // vadd.f32      d24, d3, d7
  .long  0xf24c9dab                          // vadd.f32      d25, d28, d27
  .long  0xf24f2fa0                          // vmax.f32      d18, d31, d16
  .long  0xf2477fa0                          // vmax.f32      d23, d23, d16
  .long  0xf24e3dad                          // vadd.f32      d19, d30, d29
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2450fa0                          // vmax.f32      d16, d21, d16
  .long  0xf2283da1                          // vsub.f32      d3, d24, d17
  .long  0xf2090da2                          // vadd.f32      d0, d25, d18
  .long  0xf2031da7                          // vadd.f32      d1, d19, d23
  .long  0xf2042da0                          // vadd.f32      d2, d20, d16
  .long  0xecbd8b0c                          // vpop          {d8-d13}
  .long  0xe12fff13                          // bx            r3
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_saturation_vfp4
.globl _sk_saturation_vfp4
FUNCTION(_sk_saturation_vfp4)
_sk_saturation_vfp4:
  .long  0xed2d8b0c                          // vpush         {d8-d13}
  .long  0xf3430d16                          // vmul.f32      d16, d3, d6
  .long  0xeddf7b82                          // vldr          d23, [pc, #520]
  .long  0xf3431d15                          // vmul.f32      d17, d3, d5
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2612f02                          // vmin.f32      d18, d1, d2
  .long  0xf2413f02                          // vmax.f32      d19, d1, d2
  .long  0xf3434d14                          // vmul.f32      d20, d3, d4
  .long  0xf2615fa0                          // vmin.f32      d21, d17, d16
  .long  0xf2602f22                          // vmin.f32      d18, d0, d18
  .long  0xf2403f23                          // vmax.f32      d19, d0, d19
  .long  0xf2416fa0                          // vmax.f32      d22, d17, d16
  .long  0xf2645fa5                          // vmin.f32      d21, d20, d21
  .long  0xf3468d37                          // vmul.f32      d24, d6, d23
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2443fa6                          // vmax.f32      d19, d20, d22
  .long  0xf2611da5                          // vsub.f32      d17, d17, d21
  .long  0xf2644da5                          // vsub.f32      d20, d20, d21
  .long  0xf3422d97                          // vmul.f32      d18, d18, d7
  .long  0xf2238da5                          // vsub.f32      d8, d19, d21
  .long  0xf2600da5                          // vsub.f32      d16, d16, d21
  .long  0xf3f96508                          // vceq.f32      d22, d8, #0
  .long  0xf26651b6                          // vorr          d21, d22, d22
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xeddf1b68                          // vldr          d17, [pc, #416]
  .long  0xf302adb4                          // vmul.f32      d10, d18, d20
  .long  0xf3453d31                          // vmul.f32      d19, d5, d17
  .long  0xf302bdb0                          // vmul.f32      d11, d18, d16
  .long  0xeddf2b66                          // vldr          d18, [pc, #408]
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xeec9caa8                          // vdiv.f32      s25, s19, s17
  .long  0xee89ca08                          // vdiv.f32      s24, s18, s16
  .long  0xeeca9aa8                          // vdiv.f32      s19, s21, s17
  .long  0xee8a9a08                          // vdiv.f32      s18, s20, s16
  .long  0xeecbaaa8                          // vdiv.f32      s21, s23, s17
  .long  0xee8baa08                          // vdiv.f32      s20, s22, s16
  .long  0xf3444d32                          // vmul.f32      d20, d4, d18
  .long  0xf350519c                          // vbsl          d21, d16, d12
  .long  0xf3459db1                          // vmul.f32      d25, d21, d17
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf26641b6                          // vorr          d20, d22, d22
  .long  0xf350619a                          // vbsl          d22, d16, d10
  .long  0xf3504199                          // vbsl          d20, d16, d9
  .long  0xf2433da8                          // vadd.f32      d19, d19, d24
  .long  0xf344adb2                          // vmul.f32      d26, d20, d18
  .long  0xf3468db7                          // vmul.f32      d24, d22, d23
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf24a9da9                          // vadd.f32      d25, d26, d25
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2633da8                          // vsub.f32      d19, d19, d24
  .long  0xf2458da3                          // vadd.f32      d24, d21, d19
  .long  0xf2445da3                          // vadd.f32      d21, d20, d19
  .long  0xf2466da3                          // vadd.f32      d22, d22, d19
  .long  0xf3481db1                          // vmul.f32      d17, d24, d17
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf3463db7                          // vmul.f32      d19, d22, d23
  .long  0xf2684fa6                          // vmin.f32      d20, d24, d22
  .long  0xf2487fa6                          // vmax.f32      d23, d24, d22
  .long  0xf2421da1                          // vadd.f32      d17, d18, d17
  .long  0xf2457fa7                          // vmax.f32      d23, d21, d23
  .long  0xf2432da1                          // vadd.f32      d18, d19, d17
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf3f944a3                          // vcge.f32      d20, d19, #0
  .long  0xf264a1b4                          // vorr          d26, d20, d20
  .long  0xf2661da2                          // vsub.f32      d17, d22, d18
  .long  0xf2228da3                          // vsub.f32      d8, d18, d19
  .long  0xf26431b4                          // vorr          d19, d20, d20
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xf3431d17                          // vmul.f32      d17, d3, d7
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf2429d8a                          // vadd.f32      d25, d18, d10
  .long  0xf35631b9                          // vbsl          d19, d22, d25
  .long  0xf2619da2                          // vsub.f32      d25, d17, d18
  .long  0xf2636da2                          // vsub.f32      d22, d19, d18
  .long  0xf227ada2                          // vsub.f32      d10, d23, d18
  .long  0xf309bdb6                          // vmul.f32      d11, d25, d22
  .long  0xf2686da2                          // vsub.f32      d22, d24, d18
  .long  0xeecb9aaa                          // vdiv.f32      s19, s23, s21
  .long  0xee8b9a0a                          // vdiv.f32      s18, s22, s20
  .long  0xf302bdb6                          // vmul.f32      d11, d18, d22
  .long  0xeecbcaa8                          // vdiv.f32      s25, s23, s17
  .long  0xee8bca08                          // vdiv.f32      s24, s22, s16
  .long  0xf2426d8c                          // vadd.f32      d22, d18, d12
  .long  0xf358a1b6                          // vbsl          d26, d24, d22
  .long  0xf26a6da2                          // vsub.f32      d22, d26, d18
  .long  0xf309bdb6                          // vmul.f32      d11, d25, d22
  .long  0xf2656da2                          // vsub.f32      d22, d21, d18
  .long  0xeecbcaaa                          // vdiv.f32      s25, s23, s21
  .long  0xee8bca0a                          // vdiv.f32      s24, s22, s20
  .long  0xf302bdb6                          // vmul.f32      d11, d18, d22
  .long  0xf2428d8c                          // vadd.f32      d24, d18, d12
  .long  0xeecbdaa8                          // vdiv.f32      s27, s23, s17
  .long  0xee8bda08                          // vdiv.f32      s26, s22, s16
  .long  0xf2426d8d                          // vadd.f32      d22, d18, d13
  .long  0xf35541b6                          // vbsl          d20, d21, d22
  .long  0xf2645da2                          // vsub.f32      d21, d20, d18
  .long  0xf3098db5                          // vmul.f32      d8, d25, d21
  .long  0xf3675ea1                          // vcgt.f32      d21, d23, d17
  .long  0xf2c77f10                          // vmov.f32      d23, #1
  .long  0xf2679d87                          // vsub.f32      d25, d23, d7
  .long  0xeec8baaa                          // vdiv.f32      s23, s17, s21
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf2677d83                          // vsub.f32      d23, d23, d3
  .long  0xf2426d8b                          // vadd.f32      d22, d18, d11
  .long  0xf265f1b5                          // vorr          d31, d21, d21
  .long  0xf2422d89                          // vadd.f32      d18, d18, d9
  .long  0xf349bd90                          // vmul.f32      d27, d25, d0
  .long  0xf356f1b4                          // vbsl          d31, d22, d20
  .long  0xf347cd94                          // vmul.f32      d28, d23, d4
  .long  0xf349dd91                          // vmul.f32      d29, d25, d1
  .long  0xf3494d92                          // vmul.f32      d20, d25, d2
  .long  0xf3476d96                          // vmul.f32      d22, d23, d6
  .long  0xf347ed95                          // vmul.f32      d30, d23, d5
  .long  0xf26571b5                          // vorr          d23, d21, d21
  .long  0xf35251b3                          // vbsl          d21, d18, d19
  .long  0xf35871ba                          // vbsl          d23, d24, d26
  .long  0xf2438d07                          // vadd.f32      d24, d3, d7
  .long  0xf24c9dab                          // vadd.f32      d25, d28, d27
  .long  0xf24f2fa0                          // vmax.f32      d18, d31, d16
  .long  0xf2477fa0                          // vmax.f32      d23, d23, d16
  .long  0xf24e3dad                          // vadd.f32      d19, d30, d29
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2450fa0                          // vmax.f32      d16, d21, d16
  .long  0xf2283da1                          // vsub.f32      d3, d24, d17
  .long  0xf2090da2                          // vadd.f32      d0, d25, d18
  .long  0xf2031da7                          // vadd.f32      d1, d19, d23
  .long  0xf2042da0                          // vadd.f32      d2, d20, d16
  .long  0xecbd8b0c                          // vpop          {d8-d13}
  .long  0xe12fff13                          // bx            r3
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_color_vfp4
.globl _sk_color_vfp4
FUNCTION(_sk_color_vfp4)
_sk_color_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xeddf0b63                          // vldr          d16, [pc, #396]
  .long  0xf3412d17                          // vmul.f32      d18, d1, d7
  .long  0xeddf3b63                          // vldr          d19, [pc, #396]
  .long  0xf3401d17                          // vmul.f32      d17, d0, d7
  .long  0xf3454d30                          // vmul.f32      d20, d5, d16
  .long  0xeddf7b62                          // vldr          d23, [pc, #392]
  .long  0xf3446d33                          // vmul.f32      d22, d4, d19
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3425d17                          // vmul.f32      d21, d2, d7
  .long  0xf3428db0                          // vmul.f32      d24, d18, d16
  .long  0xf3419db3                          // vmul.f32      d25, d17, d19
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf346ad37                          // vmul.f32      d26, d6, d23
  .long  0xf3456db7                          // vmul.f32      d22, d21, d23
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2c0e010                          // vmov.i32      d30, #0
  .long  0xf2444daa                          // vadd.f32      d20, d20, d26
  .long  0xf2466da8                          // vadd.f32      d22, d22, d24
  .long  0xf3444d93                          // vmul.f32      d20, d20, d3
  .long  0xf2646da6                          // vsub.f32      d22, d20, d22
  .long  0xf2414da6                          // vadd.f32      d20, d17, d22
  .long  0xf2428da6                          // vadd.f32      d24, d18, d22
  .long  0xf2455da6                          // vadd.f32      d21, d21, d22
  .long  0xf3441db3                          // vmul.f32      d17, d20, d19
  .long  0xf3480db0                          // vmul.f32      d16, d24, d16
  .long  0xf3452db7                          // vmul.f32      d18, d21, d23
  .long  0xf2683fa5                          // vmin.f32      d19, d24, d21
  .long  0xf2486fa5                          // vmax.f32      d22, d24, d21
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf2421da0                          // vadd.f32      d17, d18, d16
  .long  0xf2642fa3                          // vmin.f32      d18, d20, d19
  .long  0xf3f934a2                          // vcge.f32      d19, d18, #0
  .long  0xf26391b3                          // vorr          d25, d19, d19
  .long  0xf2650da1                          // vsub.f32      d16, d21, d17
  .long  0xf2219da2                          // vsub.f32      d9, d17, d18
  .long  0xf26321b3                          // vorr          d18, d19, d19
  .long  0xf3018db0                          // vmul.f32      d8, d17, d16
  .long  0xf3430d17                          // vmul.f32      d16, d3, d7
  .long  0xeec8aaa9                          // vdiv.f32      s21, s17, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2417d8a                          // vadd.f32      d23, d17, d10
  .long  0xf35521b7                          // vbsl          d18, d21, d23
  .long  0xf2445fa6                          // vmax.f32      d21, d20, d22
  .long  0xf2626da1                          // vsub.f32      d22, d18, d17
  .long  0xf2607da1                          // vsub.f32      d23, d16, d17
  .long  0xf225ada1                          // vsub.f32      d10, d21, d17
  .long  0xf307bdb6                          // vmul.f32      d11, d23, d22
  .long  0xf2686da1                          // vsub.f32      d22, d24, d17
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xf301cdb6                          // vmul.f32      d12, d17, d22
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xeeccdaa9                          // vdiv.f32      s27, s25, s19
  .long  0xee8cda09                          // vdiv.f32      s26, s24, s18
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf35891b6                          // vbsl          d25, d24, d22
  .long  0xf2696da1                          // vsub.f32      d22, d25, d17
  .long  0xf307ddb6                          // vmul.f32      d13, d23, d22
  .long  0xf2646da1                          // vsub.f32      d22, d20, d17
  .long  0xeecdcaaa                          // vdiv.f32      s25, s27, s21
  .long  0xee8dca0a                          // vdiv.f32      s24, s26, s20
  .long  0xf301ddb6                          // vmul.f32      d13, d17, d22
  .long  0xf2418d8c                          // vadd.f32      d24, d17, d12
  .long  0xeecdeaa9                          // vdiv.f32      s29, s27, s19
  .long  0xee8dea09                          // vdiv.f32      s28, s26, s18
  .long  0xf2416d8e                          // vadd.f32      d22, d17, d14
  .long  0xf35431b6                          // vbsl          d19, d20, d22
  .long  0xf2634da1                          // vsub.f32      d20, d19, d17
  .long  0xf3079db4                          // vmul.f32      d9, d23, d20
  .long  0xf3654ea0                          // vcgt.f32      d20, d21, d16
  .long  0xf2c75f10                          // vmov.f32      d21, #1
  .long  0xf2657d83                          // vsub.f32      d23, d21, d3
  .long  0xeec9daaa                          // vdiv.f32      s27, s19, s21
  .long  0xee89da0a                          // vdiv.f32      s26, s18, s20
  .long  0xf2655d87                          // vsub.f32      d21, d21, d7
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf264f1b4                          // vorr          d31, d20, d20
  .long  0xf2411d88                          // vadd.f32      d17, d17, d8
  .long  0xf345ad90                          // vmul.f32      d26, d21, d0
  .long  0xf356f1b3                          // vbsl          d31, d22, d19
  .long  0xf26461b4                          // vorr          d22, d20, d20
  .long  0xf347bd94                          // vmul.f32      d27, d23, d4
  .long  0xf345cd91                          // vmul.f32      d28, d21, d1
  .long  0xf3453d92                          // vmul.f32      d19, d21, d2
  .long  0xf3475d96                          // vmul.f32      d21, d23, d6
  .long  0xf347dd95                          // vmul.f32      d29, d23, d5
  .long  0xf35141b2                          // vbsl          d20, d17, d18
  .long  0xf35861b9                          // vbsl          d22, d24, d25
  .long  0xf2437d07                          // vadd.f32      d23, d3, d7
  .long  0xf24b8daa                          // vadd.f32      d24, d27, d26
  .long  0xf24f1fae                          // vmax.f32      d17, d31, d30
  .long  0xf24d2dac                          // vadd.f32      d18, d29, d28
  .long  0xf2466fae                          // vmax.f32      d22, d22, d30
  .long  0xf2453da3                          // vadd.f32      d19, d21, d19
  .long  0xf2444fae                          // vmax.f32      d20, d20, d30
  .long  0xf2273da0                          // vsub.f32      d3, d23, d16
  .long  0xf2080da1                          // vadd.f32      d0, d24, d17
  .long  0xf2021da6                          // vadd.f32      d1, d18, d22
  .long  0xf2032da4                          // vadd.f32      d2, d19, d20
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff13                          // bx            r3
  .long  0xe320f000                          // nop           {0}
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_luminosity_vfp4
.globl _sk_luminosity_vfp4
FUNCTION(_sk_luminosity_vfp4)
_sk_luminosity_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xeddf0b63                          // vldr          d16, [pc, #396]
  .long  0xf3432d15                          // vmul.f32      d18, d3, d5
  .long  0xeddf3b63                          // vldr          d19, [pc, #396]
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3414d30                          // vmul.f32      d20, d1, d16
  .long  0xeddf7b62                          // vldr          d23, [pc, #392]
  .long  0xf3406d33                          // vmul.f32      d22, d0, d19
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf3428db0                          // vmul.f32      d24, d18, d16
  .long  0xf3419db3                          // vmul.f32      d25, d17, d19
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf342ad37                          // vmul.f32      d26, d2, d23
  .long  0xf3456db7                          // vmul.f32      d22, d21, d23
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2c0e010                          // vmov.i32      d30, #0
  .long  0xf2444daa                          // vadd.f32      d20, d20, d26
  .long  0xf2486da6                          // vadd.f32      d22, d24, d22
  .long  0xf3444d97                          // vmul.f32      d20, d20, d7
  .long  0xf2646da6                          // vsub.f32      d22, d20, d22
  .long  0xf2414da6                          // vadd.f32      d20, d17, d22
  .long  0xf2428da6                          // vadd.f32      d24, d18, d22
  .long  0xf2455da6                          // vadd.f32      d21, d21, d22
  .long  0xf3441db3                          // vmul.f32      d17, d20, d19
  .long  0xf3480db0                          // vmul.f32      d16, d24, d16
  .long  0xf3452db7                          // vmul.f32      d18, d21, d23
  .long  0xf2683fa5                          // vmin.f32      d19, d24, d21
  .long  0xf2486fa5                          // vmax.f32      d22, d24, d21
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf2421da0                          // vadd.f32      d17, d18, d16
  .long  0xf2642fa3                          // vmin.f32      d18, d20, d19
  .long  0xf3f934a2                          // vcge.f32      d19, d18, #0
  .long  0xf26391b3                          // vorr          d25, d19, d19
  .long  0xf2650da1                          // vsub.f32      d16, d21, d17
  .long  0xf2219da2                          // vsub.f32      d9, d17, d18
  .long  0xf26321b3                          // vorr          d18, d19, d19
  .long  0xf3018db0                          // vmul.f32      d8, d17, d16
  .long  0xf3430d17                          // vmul.f32      d16, d3, d7
  .long  0xeec8aaa9                          // vdiv.f32      s21, s17, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2417d8a                          // vadd.f32      d23, d17, d10
  .long  0xf35521b7                          // vbsl          d18, d21, d23
  .long  0xf2445fa6                          // vmax.f32      d21, d20, d22
  .long  0xf2626da1                          // vsub.f32      d22, d18, d17
  .long  0xf2607da1                          // vsub.f32      d23, d16, d17
  .long  0xf225ada1                          // vsub.f32      d10, d21, d17
  .long  0xf307bdb6                          // vmul.f32      d11, d23, d22
  .long  0xf2686da1                          // vsub.f32      d22, d24, d17
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xf301cdb6                          // vmul.f32      d12, d17, d22
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xeeccdaa9                          // vdiv.f32      s27, s25, s19
  .long  0xee8cda09                          // vdiv.f32      s26, s24, s18
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf35891b6                          // vbsl          d25, d24, d22
  .long  0xf2696da1                          // vsub.f32      d22, d25, d17
  .long  0xf307ddb6                          // vmul.f32      d13, d23, d22
  .long  0xf2646da1                          // vsub.f32      d22, d20, d17
  .long  0xeecdcaaa                          // vdiv.f32      s25, s27, s21
  .long  0xee8dca0a                          // vdiv.f32      s24, s26, s20
  .long  0xf301ddb6                          // vmul.f32      d13, d17, d22
  .long  0xf2418d8c                          // vadd.f32      d24, d17, d12
  .long  0xeecdeaa9                          // vdiv.f32      s29, s27, s19
  .long  0xee8dea09                          // vdiv.f32      s28, s26, s18
  .long  0xf2416d8e                          // vadd.f32      d22, d17, d14
  .long  0xf35431b6                          // vbsl          d19, d20, d22
  .long  0xf2634da1                          // vsub.f32      d20, d19, d17
  .long  0xf3079db4                          // vmul.f32      d9, d23, d20
  .long  0xf3654ea0                          // vcgt.f32      d20, d21, d16
  .long  0xf2c75f10                          // vmov.f32      d21, #1
  .long  0xf2657d83                          // vsub.f32      d23, d21, d3
  .long  0xeec9daaa                          // vdiv.f32      s27, s19, s21
  .long  0xee89da0a                          // vdiv.f32      s26, s18, s20
  .long  0xf2655d87                          // vsub.f32      d21, d21, d7
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf264f1b4                          // vorr          d31, d20, d20
  .long  0xf2411d88                          // vadd.f32      d17, d17, d8
  .long  0xf345ad90                          // vmul.f32      d26, d21, d0
  .long  0xf356f1b3                          // vbsl          d31, d22, d19
  .long  0xf26461b4                          // vorr          d22, d20, d20
  .long  0xf347bd94                          // vmul.f32      d27, d23, d4
  .long  0xf345cd91                          // vmul.f32      d28, d21, d1
  .long  0xf3453d92                          // vmul.f32      d19, d21, d2
  .long  0xf3475d96                          // vmul.f32      d21, d23, d6
  .long  0xf347dd95                          // vmul.f32      d29, d23, d5
  .long  0xf35141b2                          // vbsl          d20, d17, d18
  .long  0xf35861b9                          // vbsl          d22, d24, d25
  .long  0xf2437d07                          // vadd.f32      d23, d3, d7
  .long  0xf24b8daa                          // vadd.f32      d24, d27, d26
  .long  0xf24f1fae                          // vmax.f32      d17, d31, d30
  .long  0xf24d2dac                          // vadd.f32      d18, d29, d28
  .long  0xf2466fae                          // vmax.f32      d22, d22, d30
  .long  0xf2453da3                          // vadd.f32      d19, d21, d19
  .long  0xf2444fae                          // vmax.f32      d20, d20, d30
  .long  0xf2273da0                          // vsub.f32      d3, d23, d16
  .long  0xf2080da1                          // vadd.f32      d0, d24, d17
  .long  0xf2021da6                          // vadd.f32      d1, d18, d22
  .long  0xf2032da4                          // vadd.f32      d2, d19, d20
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff13                          // bx            r3
  .long  0xe320f000                          // nop           {0}
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_clamp_0_vfp4
.globl _sk_clamp_0_vfp4
FUNCTION(_sk_clamp_0_vfp4)
_sk_clamp_0_vfp4:
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2000f20                          // vmax.f32      d0, d0, d16
  .long  0xf2011f20                          // vmax.f32      d1, d1, d16
  .long  0xf2022f20                          // vmax.f32      d2, d2, d16
  .long  0xf2033f20                          // vmax.f32      d3, d3, d16
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_clamp_1_vfp4
.globl _sk_clamp_1_vfp4
FUNCTION(_sk_clamp_1_vfp4)
_sk_clamp_1_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2200f20                          // vmin.f32      d0, d0, d16
  .long  0xf2211f20                          // vmin.f32      d1, d1, d16
  .long  0xf2222f20                          // vmin.f32      d2, d2, d16
  .long  0xf2233f20                          // vmin.f32      d3, d3, d16
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_clamp_a_vfp4
.globl _sk_clamp_a_vfp4
FUNCTION(_sk_clamp_a_vfp4)
_sk_clamp_a_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2233f20                          // vmin.f32      d3, d3, d16
  .long  0xf2200f03                          // vmin.f32      d0, d0, d3
  .long  0xf2211f03                          // vmin.f32      d1, d1, d3
  .long  0xf2222f03                          // vmin.f32      d2, d2, d3
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_set_rgb_vfp4
.globl _sk_set_rgb_vfp4
FUNCTION(_sk_set_rgb_vfp4)
_sk_set_rgb_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe283e008                          // add           lr, r3, #8
  .long  0xf4a30c9d                          // vld1.32       {d0[]}, [r3 :32]!
  .long  0xf4ae2c9f                          // vld1.32       {d2[]}, [lr :32]
  .long  0xf4a31c9f                          // vld1.32       {d1[]}, [r3 :32]
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_swap_rb_vfp4
.globl _sk_swap_rb_vfp4
FUNCTION(_sk_swap_rb_vfp4)
_sk_swap_rb_vfp4:
  .long  0xeef00b40                          // vmov.f64      d16, d0
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xeeb00b42                          // vmov.f64      d0, d2
  .long  0xeeb02b60                          // vmov.f64      d2, d16
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_swap_vfp4
.globl _sk_swap_vfp4
FUNCTION(_sk_swap_vfp4)
_sk_swap_vfp4:
  .long  0xeef00b43                          // vmov.f64      d16, d3
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xeef01b42                          // vmov.f64      d17, d2
  .long  0xeef02b41                          // vmov.f64      d18, d1
  .long  0xeef03b40                          // vmov.f64      d19, d0
  .long  0xeeb00b44                          // vmov.f64      d0, d4
  .long  0xeeb01b45                          // vmov.f64      d1, d5
  .long  0xeeb02b46                          // vmov.f64      d2, d6
  .long  0xeeb03b47                          // vmov.f64      d3, d7
  .long  0xeeb04b63                          // vmov.f64      d4, d19
  .long  0xeeb05b62                          // vmov.f64      d5, d18
  .long  0xeeb06b61                          // vmov.f64      d6, d17
  .long  0xeeb07b60                          // vmov.f64      d7, d16
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_move_src_dst_vfp4
.globl _sk_move_src_dst_vfp4
FUNCTION(_sk_move_src_dst_vfp4)
_sk_move_src_dst_vfp4:
  .long  0xeeb04b40                          // vmov.f64      d4, d0
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xeeb05b41                          // vmov.f64      d5, d1
  .long  0xeeb06b42                          // vmov.f64      d6, d2
  .long  0xeeb07b43                          // vmov.f64      d7, d3
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_move_dst_src_vfp4
.globl _sk_move_dst_src_vfp4
FUNCTION(_sk_move_dst_src_vfp4)
_sk_move_dst_src_vfp4:
  .long  0xeeb00b44                          // vmov.f64      d0, d4
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xeeb01b45                          // vmov.f64      d1, d5
  .long  0xeeb02b46                          // vmov.f64      d2, d6
  .long  0xeeb03b47                          // vmov.f64      d3, d7
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_premul_vfp4
.globl _sk_premul_vfp4
FUNCTION(_sk_premul_vfp4)
_sk_premul_vfp4:
  .long  0xf3000d13                          // vmul.f32      d0, d0, d3
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3011d13                          // vmul.f32      d1, d1, d3
  .long  0xf3022d13                          // vmul.f32      d2, d2, d3
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_unpremul_vfp4
.globl _sk_unpremul_vfp4
FUNCTION(_sk_unpremul_vfp4)
_sk_unpremul_vfp4:
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xeeb78a00                          // vmov.f32      s16, #112
  .long  0xf3f91503                          // vceq.f32      d17, d3, #0
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xeec89a23                          // vdiv.f32      s19, s16, s7
  .long  0xee889a03                          // vdiv.f32      s18, s16, s6
  .long  0xf3501199                          // vbsl          d17, d16, d9
  .long  0xf3010d90                          // vmul.f32      d0, d17, d0
  .long  0xf3011d91                          // vmul.f32      d1, d17, d1
  .long  0xf3012d92                          // vmul.f32      d2, d17, d2
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe12fff13                          // bx            r3
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_from_srgb_vfp4
.globl _sk_from_srgb_vfp4
FUNCTION(_sk_from_srgb_vfp4)
_sk_from_srgb_vfp4:
  .long  0xeddf3b20                          // vldr          d19, [pc, #128]
  .long  0xf3408d10                          // vmul.f32      d24, d0, d0
  .long  0xeddf0b1c                          // vldr          d16, [pc, #112]
  .long  0xf26341b3                          // vorr          d20, d19, d19
  .long  0xf26351b3                          // vorr          d21, d19, d19
  .long  0xeddf9b1f                          // vldr          d25, [pc, #124]
  .long  0xf2404c30                          // vfma.f32      d20, d0, d16
  .long  0xeddf2b1b                          // vldr          d18, [pc, #108]
  .long  0xf2415c30                          // vfma.f32      d21, d1, d16
  .long  0xeddfcb1d                          // vldr          d28, [pc, #116]
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3426d12                          // vmul.f32      d22, d2, d2
  .long  0xf3417d11                          // vmul.f32      d23, d1, d1
  .long  0xf3620e80                          // vcgt.f32      d16, d18, d0
  .long  0xf3621e81                          // vcgt.f32      d17, d18, d1
  .long  0xf341ad39                          // vmul.f32      d26, d1, d25
  .long  0xf342bd39                          // vmul.f32      d27, d2, d25
  .long  0xf3622e82                          // vcgt.f32      d18, d18, d2
  .long  0xf3409d39                          // vmul.f32      d25, d0, d25
  .long  0xf26cd1bc                          // vorr          d29, d28, d28
  .long  0xf248dcb4                          // vfma.f32      d29, d24, d20
  .long  0xf26c41bc                          // vorr          d20, d28, d28
  .long  0xf2474cb5                          // vfma.f32      d20, d23, d21
  .long  0xf246ccb3                          // vfma.f32      d28, d22, d19
  .long  0xf35901bd                          // vbsl          d16, d25, d29
  .long  0xf35a11b4                          // vbsl          d17, d26, d20
  .long  0xf35b21bc                          // vbsl          d18, d27, d28
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff13                          // bx            r3
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3f328f5c                          // .word         0x3f328f5c
  .long  0x3f328f5c                          // .word         0x3f328f5c
  .long  0x3d6147ae                          // .word         0x3d6147ae
  .long  0x3d6147ae                          // .word         0x3d6147ae
  .long  0x3d9e8391                          // .word         0x3d9e8391
  .long  0x3d9e8391                          // .word         0x3d9e8391
  .long  0x3b23d70a                          // .word         0x3b23d70a
  .long  0x3b23d70a                          // .word         0x3b23d70a

HIDDEN _sk_to_srgb_vfp4
.globl _sk_to_srgb_vfp4
FUNCTION(_sk_to_srgb_vfp4)
_sk_to_srgb_vfp4:
  .long  0xf3fb0582                          // vrsqrte.f32   d16, d2
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3fb1581                          // vrsqrte.f32   d17, d1
  .long  0xf3fb2580                          // vrsqrte.f32   d18, d0
  .long  0xf3403db0                          // vmul.f32      d19, d16, d16
  .long  0xf3414db1                          // vmul.f32      d20, d17, d17
  .long  0xf3425db2                          // vmul.f32      d21, d18, d18
  .long  0xf2623f33                          // vrsqrts.f32   d19, d2, d19
  .long  0xf2614f34                          // vrsqrts.f32   d20, d1, d20
  .long  0xf2605f35                          // vrsqrts.f32   d21, d0, d21
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xf3411db4                          // vmul.f32      d17, d17, d20
  .long  0xf3422db5                          // vmul.f32      d18, d18, d21
  .long  0xf3fb3520                          // vrecpe.f32    d19, d16
  .long  0xf3fb4521                          // vrecpe.f32    d20, d17
  .long  0xf3fb6522                          // vrecpe.f32    d22, d18
  .long  0xf3fb55a0                          // vrsqrte.f32   d21, d16
  .long  0xf3fb75a1                          // vrsqrte.f32   d23, d17
  .long  0xf3fb85a2                          // vrsqrte.f32   d24, d18
  .long  0xf2409fb3                          // vrecps.f32    d25, d16, d19
  .long  0xf241afb4                          // vrecps.f32    d26, d17, d20
  .long  0xf242bfb6                          // vrecps.f32    d27, d18, d22
  .long  0xf345cdb5                          // vmul.f32      d28, d21, d21
  .long  0xf347ddb7                          // vmul.f32      d29, d23, d23
  .long  0xf348edb8                          // vmul.f32      d30, d24, d24
  .long  0xf2600fbc                          // vrsqrts.f32   d16, d16, d28
  .long  0xf2611fbd                          // vrsqrts.f32   d17, d17, d29
  .long  0xf2622fbe                          // vrsqrts.f32   d18, d18, d30
  .long  0xf3433db9                          // vmul.f32      d19, d19, d25
  .long  0xeddf9b21                          // vldr          d25, [pc, #132]
  .long  0xf3444dba                          // vmul.f32      d20, d20, d26
  .long  0xeddfab21                          // vldr          d26, [pc, #132]
  .long  0xf3466dbb                          // vmul.f32      d22, d22, d27
  .long  0xf26ab1ba                          // vorr          d27, d26, d26
  .long  0xf243bcb9                          // vfma.f32      d27, d19, d25
  .long  0xf26a31ba                          // vorr          d19, d26, d26
  .long  0xf2443cb9                          // vfma.f32      d19, d20, d25
  .long  0xeddf4b1d                          // vldr          d20, [pc, #116]
  .long  0xf246acb9                          // vfma.f32      d26, d22, d25
  .long  0xf3450db0                          // vmul.f32      d16, d21, d16
  .long  0xeddf5b1c                          // vldr          d21, [pc, #112]
  .long  0xf3471db1                          // vmul.f32      d17, d23, d17
  .long  0xf3482db2                          // vmul.f32      d18, d24, d18
  .long  0xf3406d35                          // vmul.f32      d22, d0, d21
  .long  0xf240bcb4                          // vfma.f32      d27, d16, d20
  .long  0xf2413cb4                          // vfma.f32      d19, d17, d20
  .long  0xf242acb4                          // vfma.f32      d26, d18, d20
  .long  0xeddf2b17                          // vldr          d18, [pc, #92]
  .long  0xf3417d35                          // vmul.f32      d23, d1, d21
  .long  0xf3620e80                          // vcgt.f32      d16, d18, d0
  .long  0xf3621e81                          // vcgt.f32      d17, d18, d1
  .long  0xf3622e82                          // vcgt.f32      d18, d18, d2
  .long  0xf3425d35                          // vmul.f32      d21, d2, d21
  .long  0xf2c74f10                          // vmov.f32      d20, #1
  .long  0xf2648faa                          // vmin.f32      d24, d20, d26
  .long  0xf2643fa3                          // vmin.f32      d19, d20, d19
  .long  0xf2644fab                          // vmin.f32      d20, d20, d27
  .long  0xf35601b8                          // vbsl          d16, d22, d24
  .long  0xf35711b3                          // vbsl          d17, d23, d19
  .long  0xf35521b4                          // vbsl          d18, d21, d20
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff13                          // bx            r3
  .long  0x3f306fce                          // .word         0x3f306fce
  .long  0x3f306fce                          // .word         0x3f306fce
  .long  0xbdca57a8                          // .word         0xbdca57a8
  .long  0xbdca57a8                          // .word         0xbdca57a8
  .long  0x3ed287c2                          // .word         0x3ed287c2
  .long  0x3ed287c2                          // .word         0x3ed287c2
  .long  0x41475c29                          // .word         0x41475c29
  .long  0x41475c29                          // .word         0x41475c29
  .long  0x3b8ce704                          // .word         0x3b8ce704
  .long  0x3b8ce704                          // .word         0x3b8ce704

HIDDEN _sk_rgb_to_hsl_vfp4
.globl _sk_rgb_to_hsl_vfp4
FUNCTION(_sk_rgb_to_hsl_vfp4)
_sk_rgb_to_hsl_vfp4:
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xf2401f01                          // vmax.f32      d17, d0, d1
  .long  0xeddf9b2c                          // vldr          d25, [pc, #176]
  .long  0xf2600f01                          // vmin.f32      d16, d0, d1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xeeb78a00                          // vmov.f32      s16, #112
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xf2411f82                          // vmax.f32      d17, d17, d2
  .long  0xf2602f82                          // vmin.f32      d18, d16, d2
  .long  0xf2c45610                          // vmov.i32      d21, #1073741824
  .long  0xf2607d01                          // vsub.f32      d23, d0, d1
  .long  0xf2656da1                          // vsub.f32      d22, d21, d17
  .long  0xf221ada2                          // vsub.f32      d10, d17, d18
  .long  0xf2413da2                          // vadd.f32      d19, d17, d18
  .long  0xf2c08010                          // vmov.i32      d24, #0
  .long  0xf2666da2                          // vsub.f32      d22, d22, d18
  .long  0xf241ae80                          // vceq.f32      d26, d17, d0
  .long  0xeec8ba2a                          // vdiv.f32      s23, s16, s21
  .long  0xf3430db4                          // vmul.f32      d16, d19, d20
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf3209ea4                          // vcgt.f32      d9, d16, d20
  .long  0xf2614d02                          // vsub.f32      d20, d1, d2
  .long  0xf3477d9b                          // vmul.f32      d23, d23, d11
  .long  0xf31691b3                          // vbsl          d9, d22, d19
  .long  0xf2623d00                          // vsub.f32      d19, d2, d0
  .long  0xf3626e01                          // vcgt.f32      d22, d2, d1
  .long  0xeeca8aa9                          // vdiv.f32      s17, s21, s19
  .long  0xee8a8a09                          // vdiv.f32      s16, s20, s18
  .long  0xf3433d9b                          // vmul.f32      d19, d19, d11
  .long  0xf3444d9b                          // vmul.f32      d20, d20, d11
  .long  0xf35961b8                          // vbsl          d22, d25, d24
  .long  0xf2419e81                          // vceq.f32      d25, d17, d1
  .long  0xf2011ea2                          // vceq.f32      d1, d17, d18
  .long  0xf2433da5                          // vadd.f32      d19, d19, d21
  .long  0xf2c15f10                          // vmov.f32      d21, #4
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2471da5                          // vadd.f32      d17, d23, d21
  .long  0xf35391b1                          // vbsl          d25, d19, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf2612111                          // vorr          d18, d1, d1
  .long  0xf354a1b9                          // vbsl          d26, d20, d25
  .long  0xf35821ba                          // vbsl          d18, d24, d26
  .long  0xf3181198                          // vbsl          d1, d24, d8
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe12fff13                          // bx            r3
  .long  0xe320f000                          // nop           {0}
  .long  0x40c00000                          // .word         0x40c00000
  .long  0x40c00000                          // .word         0x40c00000
  .long  0x3e2aaaab                          // .word         0x3e2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab

HIDDEN _sk_hsl_to_rgb_vfp4
.globl _sk_hsl_to_rgb_vfp4
FUNCTION(_sk_hsl_to_rgb_vfp4)
_sk_hsl_to_rgb_vfp4:
  .long  0xed2d8b02                          // vpush         {d8}
  .long  0xeddf0b51                          // vldr          d16, [pc, #324]
  .long  0xf3fb2700                          // vcvt.s32.f32  d18, d0
  .long  0xeddf1b51                          // vldr          d17, [pc, #324]
  .long  0xf2400d20                          // vadd.f32      d16, d0, d16
  .long  0xf2401d21                          // vadd.f32      d17, d0, d17
  .long  0xeddfab50                          // vldr          d26, [pc, #320]
  .long  0xf3416d12                          // vmul.f32      d22, d1, d2
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3720                          // vcvt.s32.f32  d19, d16
  .long  0xf3fb4721                          // vcvt.s32.f32  d20, d17
  .long  0xf2c3761f                          // vmov.i32      d23, #1056964608
  .long  0xf3625e80                          // vcgt.f32      d21, d18, d0
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf2c08010                          // vmov.i32      d24, #0
  .long  0xf35a51b8                          // vbsl          d21, d26, d24
  .long  0xf3639ea0                          // vcgt.f32      d25, d19, d16
  .long  0xf364bea1                          // vcgt.f32      d27, d20, d17
  .long  0xf342ce27                          // vcge.f32      d28, d2, d23
  .long  0xf261dd26                          // vsub.f32      d29, d1, d22
  .long  0xf35a91b8                          // vbsl          d25, d26, d24
  .long  0xf35ab1b8                          // vbsl          d27, d26, d24
  .long  0xf2622da5                          // vsub.f32      d18, d18, d21
  .long  0xf2633da9                          // vsub.f32      d19, d19, d25
  .long  0xf2644dab                          // vsub.f32      d20, d20, d27
  .long  0xf35dc1b6                          // vbsl          d28, d29, d22
  .long  0xeddfdb3c                          // vldr          d29, [pc, #240]
  .long  0xf2602d22                          // vsub.f32      d18, d0, d18
  .long  0xf2600da3                          // vsub.f32      d16, d16, d19
  .long  0xf2c15f18                          // vmov.f32      d21, #6
  .long  0xf2426d02                          // vadd.f32      d22, d2, d2
  .long  0xf24c8d82                          // vadd.f32      d24, d28, d2
  .long  0xf2611da4                          // vsub.f32      d17, d17, d20
  .long  0xf3423db5                          // vmul.f32      d19, d18, d21
  .long  0xf3409db5                          // vmul.f32      d25, d16, d21
  .long  0xf2664da8                          // vsub.f32      d20, d22, d24
  .long  0xf3415db5                          // vmul.f32      d21, d17, d21
  .long  0xf2c16f10                          // vmov.f32      d22, #4
  .long  0xf342eead                          // vcge.f32      d30, d18, d29
  .long  0xf266ada3                          // vsub.f32      d26, d22, d19
  .long  0xf268bda4                          // vsub.f32      d27, d24, d20
  .long  0xf266cda9                          // vsub.f32      d28, d22, d25
  .long  0xf2666da5                          // vsub.f32      d22, d22, d21
  .long  0xf340fead                          // vcge.f32      d31, d16, d29
  .long  0xf34badba                          // vmul.f32      d26, d27, d26
  .long  0xf341dead                          // vcge.f32      d29, d17, d29
  .long  0xf34bcdbc                          // vmul.f32      d28, d27, d28
  .long  0xf34b6db6                          // vmul.f32      d22, d27, d22
  .long  0xf244adaa                          // vadd.f32      d26, d20, d26
  .long  0xf3020ea7                          // vcge.f32      d0, d18, d23
  .long  0xf3008ea7                          // vcge.f32      d8, d16, d23
  .long  0xf354e1ba                          // vbsl          d30, d20, d26
  .long  0xeddfab24                          // vldr          d26, [pc, #144]
  .long  0xf244cdac                          // vadd.f32      d28, d20, d28
  .long  0xf2446da6                          // vadd.f32      d22, d20, d22
  .long  0xf34b3db3                          // vmul.f32      d19, d27, d19
  .long  0xf34b9db9                          // vmul.f32      d25, d27, d25
  .long  0xf3417ea7                          // vcge.f32      d23, d17, d23
  .long  0xf354d1b6                          // vbsl          d29, d20, d22
  .long  0xf354f1bc                          // vbsl          d31, d20, d28
  .long  0xf3406eaa                          // vcge.f32      d22, d16, d26
  .long  0xf3422eaa                          // vcge.f32      d18, d18, d26
  .long  0xf34b5db5                          // vmul.f32      d21, d27, d21
  .long  0xf3411eaa                          // vcge.f32      d17, d17, d26
  .long  0xf31e01b8                          // vbsl          d0, d30, d24
  .long  0xf31f81b8                          // vbsl          d8, d31, d24
  .long  0xf2440da3                          // vadd.f32      d16, d20, d19
  .long  0xf2443da9                          // vadd.f32      d19, d20, d25
  .long  0xf3502130                          // vbsl          d18, d0, d16
  .long  0xf3f90501                          // vceq.f32      d16, d1, #0
  .long  0xf35d71b8                          // vbsl          d23, d29, d24
  .long  0xf3586133                          // vbsl          d22, d8, d19
  .long  0xf22011b0                          // vorr          d1, d16, d16
  .long  0xf2444da5                          // vadd.f32      d20, d20, d21
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf3520136                          // vbsl          d16, d2, d22
  .long  0xf35711b4                          // vbsl          d17, d23, d20
  .long  0xf3121132                          // vbsl          d1, d2, d18
  .long  0xf3120131                          // vbsl          d0, d2, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xecbd8b02                          // vpop          {d8}
  .long  0xe12fff13                          // bx            r3
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0x3eaaaaab                          // .word         0x3eaaaaab
  .long  0x3eaaaaab                          // .word         0x3eaaaaab
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f2aaaab                          // .word         0x3f2aaaab
  .long  0x3f2aaaab                          // .word         0x3f2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab

HIDDEN _sk_scale_1_float_vfp4
.globl _sk_scale_1_float_vfp4
FUNCTION(_sk_scale_1_float_vfp4)
_sk_scale_1_float_vfp4:
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_scale_u8_vfp4
.globl _sk_scale_u8_vfp4
FUNCTION(_sk_scale_u8_vfp4)
_sk_scale_u8_vfp4:
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xe0833000                          // add           r3, r3, r0
  .long  0xe1d330b0                          // ldrh          r3, [r3]
  .long  0xe1cd30b0                          // strh          r3, [sp]
  .long  0xe1a0300d                          // mov           r3, sp
  .long  0xf4e3041f                          // vld1.16       {d16[0]}, [r3 :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3d00a30                          // vmovl.u16     q8, d16
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xeddf1b06                          // vldr          d17, [pc, #24]
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe12fff1c                          // bx            ip
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_lerp_1_float_vfp4
.globl _sk_lerp_1_float_vfp4
FUNCTION(_sk_lerp_1_float_vfp4)
_sk_lerp_1_float_vfp4:
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2600d04                          // vsub.f32      d16, d0, d4
  .long  0xf2611d05                          // vsub.f32      d17, d1, d5
  .long  0xf2622d06                          // vsub.f32      d18, d2, d6
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2633d07                          // vsub.f32      d19, d3, d7
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xf2273117                          // vorr          d3, d7, d7
  .long  0xf2000cb4                          // vfma.f32      d0, d16, d20
  .long  0xf2011cb4                          // vfma.f32      d1, d17, d20
  .long  0xf2022cb4                          // vfma.f32      d2, d18, d20
  .long  0xf2033cb4                          // vfma.f32      d3, d19, d20
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_lerp_u8_vfp4
.globl _sk_lerp_u8_vfp4
FUNCTION(_sk_lerp_u8_vfp4)
_sk_lerp_u8_vfp4:
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2602d04                          // vsub.f32      d18, d0, d4
  .long  0xf2623d06                          // vsub.f32      d19, d2, d6
  .long  0xf2634d07                          // vsub.f32      d20, d3, d7
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xe0833000                          // add           r3, r3, r0
  .long  0xf2273117                          // vorr          d3, d7, d7
  .long  0xe1d330b0                          // ldrh          r3, [r3]
  .long  0xe1cd30b0                          // strh          r3, [sp]
  .long  0xe1a0300d                          // mov           r3, sp
  .long  0xf4e3041f                          // vld1.16       {d16[0]}, [r3 :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3d00a30                          // vmovl.u16     q8, d16
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xeddf1b08                          // vldr          d17, [pc, #32]
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf2611d05                          // vsub.f32      d17, d1, d5
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xf2020cb0                          // vfma.f32      d0, d18, d16
  .long  0xf2011cb0                          // vfma.f32      d1, d17, d16
  .long  0xf2032cb0                          // vfma.f32      d2, d19, d16
  .long  0xf2043cb0                          // vfma.f32      d3, d20, d16
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe12fff1c                          // bx            ip
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_lerp_565_vfp4
.globl _sk_lerp_565_vfp4
FUNCTION(_sk_lerp_565_vfp4)
_sk_lerp_565_vfp4:
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c1201f                          // vmov.i32      d18, #31
  .long  0xf3c71218                          // vmov.i32      d17, #63488
  .long  0xeddf3b28                          // vldr          d19, [pc, #160]
  .long  0xf2679117                          // vorr          d25, d7, d7
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf2617d05                          // vsub.f32      d23, d1, d5
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2606d04                          // vsub.f32      d22, d0, d4
  .long  0xe7933080                          // ldr           r3, [r3, r0, lsl #1]
  .long  0xf2628d06                          // vsub.f32      d24, d2, d6
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xe58d3000                          // str           r3, [sp]
  .long  0xe1a0300d                          // mov           r3, sp
  .long  0xf4e3083f                          // vld1.32       {d16[0]}, [r3 :32]
  .long  0xe3a03e7e                          // mov           r3, #2016
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xf3d04a30                          // vmovl.u16     q10, d16
  .long  0xee803b90                          // vdup.32       d16, r3
  .long  0xf24421b2                          // vand          d18, d20, d18
  .long  0xf24401b0                          // vand          d16, d20, d16
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf24411b1                          // vand          d17, d20, d17
  .long  0xeddf4b14                          // vldr          d20, [pc, #80]
  .long  0xf2635d07                          // vsub.f32      d21, d3, d7
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b12                          // vldr          d19, [pc, #72]
  .long  0xf3400db4                          // vmul.f32      d16, d16, d20
  .long  0xf2674117                          // vorr          d20, d7, d7
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xf2673117                          // vorr          d19, d7, d7
  .long  0xf2453cb2                          // vfma.f32      d19, d21, d18
  .long  0xf2454cb0                          // vfma.f32      d20, d21, d16
  .long  0xf2459cb1                          // vfma.f32      d25, d21, d17
  .long  0xf2071cb0                          // vfma.f32      d1, d23, d16
  .long  0xf2060cb1                          // vfma.f32      d0, d22, d17
  .long  0xf2082cb2                          // vfma.f32      d2, d24, d18
  .long  0xf2440fa3                          // vmax.f32      d16, d20, d19
  .long  0xf2093fa0                          // vmax.f32      d3, d25, d16
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108

HIDDEN _sk_load_tables_vfp4
.globl _sk_load_tables_vfp4
FUNCTION(_sk_load_tables_vfp4)
_sk_load_tables_vfp4:
  .long  0xe92d48f0                          // push          {r4, r5, r6, r7, fp, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe593e000                          // ldr           lr, [r3]
  .long  0xe99300b0                          // ldmib         r3, {r4, r5, r7}
  .long  0xe08e3100                          // add           r3, lr, r0, lsl #2
  .long  0xedd31b00                          // vldr          d17, [r3]
  .long  0xf24121b0                          // vand          d18, d17, d16
  .long  0xf3f83031                          // vshr.u32      d19, d17, #8
  .long  0xee323b90                          // vmov.32       r3, d18[1]
  .long  0xee126b90                          // vmov.32       r6, d18[0]
  .long  0xf3f02031                          // vshr.u32      d18, d17, #16
  .long  0xf24221b0                          // vand          d18, d18, d16
  .long  0xf24301b0                          // vand          d16, d19, d16
  .long  0xe0843103                          // add           r3, r4, r3, lsl #2
  .long  0xedd30a00                          // vldr          s1, [r3]
  .long  0xe0843106                          // add           r3, r4, r6, lsl #2
  .long  0xee326b90                          // vmov.32       r6, d18[1]
  .long  0xed930a00                          // vldr          s0, [r3]
  .long  0xee303b90                          // vmov.32       r3, d16[1]
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xf3e80031                          // vshr.u32      d16, d17, #24
  .long  0xeddf1b0d                          // vldr          d17, [pc, #52]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe087e106                          // add           lr, r7, r6, lsl #2
  .long  0xee126b90                          // vmov.32       r6, d18[0]
  .long  0xe0853103                          // add           r3, r5, r3, lsl #2
  .long  0xedde2a00                          // vldr          s5, [lr]
  .long  0xedd31a00                          // vldr          s3, [r3]
  .long  0xe0853104                          // add           r3, r5, r4, lsl #2
  .long  0xed931a00                          // vldr          s2, [r3]
  .long  0xe0873106                          // add           r3, r7, r6, lsl #2
  .long  0xed932a00                          // vldr          s4, [r3]
  .long  0xe8bd48f0                          // pop           {r4, r5, r6, r7, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_load_tables_u16_be_vfp4
.globl _sk_load_tables_u16_be_vfp4
FUNCTION(_sk_load_tables_u16_be_vfp4)
_sk_load_tables_u16_be_vfp4:
  .long  0xe92d48f0                          // push          {r4, r5, r6, r7, fp, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3c7801f                          // vmov.i32      d24, #255
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe5936000                          // ldr           r6, [r3]
  .long  0xe9934030                          // ldmib         r3, {r4, r5, lr}
  .long  0xe0863180                          // add           r3, r6, r0, lsl #3
  .long  0xf4e3070d                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [r3]!
  .long  0xf4e3074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [r3]
  .long  0xee903bb0                          // vmov.u16      r3, d16[0]
  .long  0xee926bb0                          // vmov.u16      r6, d18[0]
  .long  0xee043b90                          // vmov.32       d20[0], r3
  .long  0xee913bb0                          // vmov.u16      r3, d17[0]
  .long  0xee056b90                          // vmov.32       d21[0], r6
  .long  0xee906bf0                          // vmov.u16      r6, d16[1]
  .long  0xee063b90                          // vmov.32       d22[0], r3
  .long  0xee933bb0                          // vmov.u16      r3, d19[0]
  .long  0xee246b90                          // vmov.32       d20[1], r6
  .long  0xee926bf0                          // vmov.u16      r6, d18[1]
  .long  0xf24441b8                          // vand          d20, d20, d24
  .long  0xee073b90                          // vmov.32       d23[0], r3
  .long  0xee913bf0                          // vmov.u16      r3, d17[1]
  .long  0xee256b90                          // vmov.32       d21[1], r6
  .long  0xee936bf0                          // vmov.u16      r6, d19[1]
  .long  0xf24501b8                          // vand          d16, d21, d24
  .long  0xee107b90                          // vmov.32       r7, d16[0]
  .long  0xee263b90                          // vmov.32       d22[1], r3
  .long  0xee343b90                          // vmov.32       r3, d20[1]
  .long  0xf24611b8                          // vand          d17, d22, d24
  .long  0xee276b90                          // vmov.32       d23[1], r6
  .long  0xee146b90                          // vmov.32       r6, d20[0]
  .long  0xf2e82537                          // vshl.s32      d18, d23, #8
  .long  0xe0843103                          // add           r3, r4, r3, lsl #2
  .long  0xedd30a00                          // vldr          s1, [r3]
  .long  0xe0843106                          // add           r3, r4, r6, lsl #2
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee116b90                          // vmov.32       r6, d17[0]
  .long  0xf3c70c1f                          // vmov.i32      d16, #65535
  .long  0xed930a00                          // vldr          s0, [r3]
  .long  0xee313b90                          // vmov.32       r3, d17[1]
  .long  0xf24711b0                          // vand          d17, d23, d16
  .long  0xf3f81031                          // vshr.u32      d17, d17, #8
  .long  0xf26211b1                          // vorr          d17, d18, d17
  .long  0xf24101b0                          // vand          d16, d17, d16
  .long  0xeddf1b0c                          // vldr          d17, [pc, #48]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe08e4104                          // add           r4, lr, r4, lsl #2
  .long  0xedd42a00                          // vldr          s5, [r4]
  .long  0xe0853103                          // add           r3, r5, r3, lsl #2
  .long  0xedd31a00                          // vldr          s3, [r3]
  .long  0xe0853106                          // add           r3, r5, r6, lsl #2
  .long  0xed931a00                          // vldr          s2, [r3]
  .long  0xe08e3107                          // add           r3, lr, r7, lsl #2
  .long  0xed932a00                          // vldr          s4, [r3]
  .long  0xe8bd48f0                          // pop           {r4, r5, r6, r7, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_load_tables_rgb_u16_be_vfp4
.globl _sk_load_tables_rgb_u16_be_vfp4
FUNCTION(_sk_load_tables_rgb_u16_be_vfp4)
_sk_load_tables_rgb_u16_be_vfp4:
  .long  0xe92d48f0                          // push          {r4, r5, r6, r7, fp, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3c7601f                          // vmov.i32      d22, #255
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe5936000                          // ldr           r6, [r3]
  .long  0xe9934030                          // ldmib         r3, {r4, r5, lr}
  .long  0xe0803080                          // add           r3, r0, r0, lsl #1
  .long  0xe0863083                          // add           r3, r6, r3, lsl #1
  .long  0xf4e3060d                          // vld3.16       {d16[0],d17[0],d18[0]}, [r3]!
  .long  0xf4e3064f                          // vld3.16       {d16[1],d17[1],d18[1]}, [r3]
  .long  0xee903bb0                          // vmov.u16      r3, d16[0]
  .long  0xee926bb0                          // vmov.u16      r6, d18[0]
  .long  0xee043b90                          // vmov.32       d20[0], r3
  .long  0xee903bf0                          // vmov.u16      r3, d16[1]
  .long  0xee056b90                          // vmov.32       d21[0], r6
  .long  0xee916bb0                          // vmov.u16      r6, d17[0]
  .long  0xee243b90                          // vmov.32       d20[1], r3
  .long  0xee923bf0                          // vmov.u16      r3, d18[1]
  .long  0xf24441b6                          // vand          d20, d20, d22
  .long  0xee076b90                          // vmov.32       d23[0], r6
  .long  0xee916bf0                          // vmov.u16      r6, d17[1]
  .long  0xee253b90                          // vmov.32       d21[1], r3
  .long  0xee343b90                          // vmov.32       r3, d20[1]
  .long  0xf24501b6                          // vand          d16, d21, d22
  .long  0xee276b90                          // vmov.32       d23[1], r6
  .long  0xee146b90                          // vmov.32       r6, d20[0]
  .long  0xf24711b6                          // vand          d17, d23, d22
  .long  0xee107b90                          // vmov.32       r7, d16[0]
  .long  0xe0843103                          // add           r3, r4, r3, lsl #2
  .long  0xedd30a00                          // vldr          s1, [r3]
  .long  0xe0843106                          // add           r3, r4, r6, lsl #2
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee116b90                          // vmov.32       r6, d17[0]
  .long  0xed930a00                          // vldr          s0, [r3]
  .long  0xee313b90                          // vmov.32       r3, d17[1]
  .long  0xe08e4104                          // add           r4, lr, r4, lsl #2
  .long  0xedd42a00                          // vldr          s5, [r4]
  .long  0xe0853103                          // add           r3, r5, r3, lsl #2
  .long  0xedd31a00                          // vldr          s3, [r3]
  .long  0xe0853106                          // add           r3, r5, r6, lsl #2
  .long  0xed931a00                          // vldr          s2, [r3]
  .long  0xe08e3107                          // add           r3, lr, r7, lsl #2
  .long  0xed932a00                          // vldr          s4, [r3]
  .long  0xe8bd48f0                          // pop           {r4, r5, r6, r7, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_byte_tables_vfp4
.globl _sk_byte_tables_vfp4
FUNCTION(_sk_byte_tables_vfp4)
_sk_byte_tables_vfp4:
  .long  0xe92d4bf0                          // push          {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xeddf0b37                          // vldr          d16, [pc, #220]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe8911010                          // ldm           r1, {r4, ip}
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xe89402e0                          // ldm           r4, {r5, r6, r7, r9}
  .long  0xf2404c30                          // vfma.f32      d20, d0, d16
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf3fb37a3                          // vcvt.u32.f32  d19, d19
  .long  0xf3fb47a4                          // vcvt.u32.f32  d20, d20
  .long  0xee123b90                          // vmov.32       r3, d18[0]
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee13eb90                          // vmov.32       lr, d19[0]
  .long  0xee144b90                          // vmov.32       r4, d20[0]
  .long  0xe7d78003                          // ldrb          r8, [r7, r3]
  .long  0xe7d6300e                          // ldrb          r3, [r6, lr]
  .long  0xee053b90                          // vmov.32       d21[0], r3
  .long  0xe7d53004                          // ldrb          r3, [r5, r4]
  .long  0xee344b90                          // vmov.32       r4, d20[1]
  .long  0xee013b90                          // vmov.32       d17[0], r3
  .long  0xee103b90                          // vmov.32       r3, d16[0]
  .long  0xee048b90                          // vmov.32       d20[0], r8
  .long  0xe7d5e004                          // ldrb          lr, [r5, r4]
  .long  0xee334b90                          // vmov.32       r4, d19[1]
  .long  0xee325b90                          // vmov.32       r5, d18[1]
  .long  0xf3c7201f                          // vmov.i32      d18, #255
  .long  0xe7d93003                          // ldrb          r3, [r9, r3]
  .long  0xee21eb90                          // vmov.32       d17[1], lr
  .long  0xf24111b2                          // vand          d17, d17, d18
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xe7d64004                          // ldrb          r4, [r6, r4]
  .long  0xee306b90                          // vmov.32       r6, d16[1]
  .long  0xee003b90                          // vmov.32       d16[0], r3
  .long  0xee254b90                          // vmov.32       d21[1], r4
  .long  0xe7d74005                          // ldrb          r4, [r7, r5]
  .long  0xf24531b2                          // vand          d19, d21, d18
  .long  0xee244b90                          // vmov.32       d20[1], r4
  .long  0xf24441b2                          // vand          d20, d20, d18
  .long  0xf3fb46a4                          // vcvt.f32.u32  d20, d20
  .long  0xe7d93006                          // ldrb          r3, [r9, r6]
  .long  0xee203b90                          // vmov.32       d16[1], r3
  .long  0xf24001b2                          // vand          d16, d16, d18
  .long  0xf3fb26a3                          // vcvt.f32.u32  d18, d19
  .long  0xeddf3b09                          // vldr          d19, [pc, #36]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3010db3                          // vmul.f32      d0, d17, d19
  .long  0xf3042db3                          // vmul.f32      d2, d20, d19
  .long  0xf3021db3                          // vmul.f32      d1, d18, d19
  .long  0xf3003db3                          // vmul.f32      d3, d16, d19
  .long  0xe8bd4bf0                          // pop           {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_byte_tables_rgb_vfp4
.globl _sk_byte_tables_rgb_vfp4
FUNCTION(_sk_byte_tables_rgb_vfp4)
_sk_byte_tables_rgb_vfp4:
  .long  0xe92d41f0                          // push          {r4, r5, r6, r7, r8, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf3c7301f                          // vmov.i32      d19, #255
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe593e000                          // ldr           lr, [r3]
  .long  0xe9930110                          // ldmib         r3, {r4, r8}
  .long  0xe593300c                          // ldr           r3, [r3, #12]
  .long  0xe2433001                          // sub           r3, r3, #1
  .long  0xee803b90                          // vdup.32       d16, r3
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2402c30                          // vfma.f32      d18, d0, d16
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xee123b90                          // vmov.32       r3, d18[0]
  .long  0xee326b90                          // vmov.32       r6, d18[1]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xee107b90                          // vmov.32       r7, d16[0]
  .long  0xee305b90                          // vmov.32       r5, d16[1]
  .long  0xe7de3003                          // ldrb          r3, [lr, r3]
  .long  0xe7dee006                          // ldrb          lr, [lr, r6]
  .long  0xee116b90                          // vmov.32       r6, d17[0]
  .long  0xee023b90                          // vmov.32       d18[0], r3
  .long  0xee313b90                          // vmov.32       r3, d17[1]
  .long  0xee22eb90                          // vmov.32       d18[1], lr
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xf3fb26a2                          // vcvt.f32.u32  d18, d18
  .long  0xe7d87007                          // ldrb          r7, [r8, r7]
  .long  0xee017b90                          // vmov.32       d17[0], r7
  .long  0xe7d46006                          // ldrb          r6, [r4, r6]
  .long  0xe7d43003                          // ldrb          r3, [r4, r3]
  .long  0xee006b90                          // vmov.32       d16[0], r6
  .long  0xe7d84005                          // ldrb          r4, [r8, r5]
  .long  0xee203b90                          // vmov.32       d16[1], r3
  .long  0xee214b90                          // vmov.32       d17[1], r4
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xeddf3b07                          // vldr          d19, [pc, #28]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3020db3                          // vmul.f32      d0, d18, d19
  .long  0xf3001db3                          // vmul.f32      d1, d16, d19
  .long  0xf3012db3                          // vmul.f32      d2, d17, d19
  .long  0xe8bd41f0                          // pop           {r4, r5, r6, r7, r8, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_table_r_vfp4
.globl _sk_table_r_vfp4
FUNCTION(_sk_table_r_vfp4)
_sk_table_r_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe593e000                          // ldr           lr, [r3]
  .long  0xe5933004                          // ldr           r3, [r3, #4]
  .long  0xe2433001                          // sub           r3, r3, #1
  .long  0xee803b90                          // vdup.32       d16, r3
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee303b90                          // vmov.32       r3, d16[1]
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xe08e3103                          // add           r3, lr, r3, lsl #2
  .long  0xedd30a00                          // vldr          s1, [r3]
  .long  0xe08e3104                          // add           r3, lr, r4, lsl #2
  .long  0xed930a00                          // vldr          s0, [r3]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_g_vfp4
.globl _sk_table_g_vfp4
FUNCTION(_sk_table_g_vfp4)
_sk_table_g_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe593e000                          // ldr           lr, [r3]
  .long  0xe5933004                          // ldr           r3, [r3, #4]
  .long  0xe2433001                          // sub           r3, r3, #1
  .long  0xee803b90                          // vdup.32       d16, r3
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee303b90                          // vmov.32       r3, d16[1]
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xe08e3103                          // add           r3, lr, r3, lsl #2
  .long  0xedd31a00                          // vldr          s3, [r3]
  .long  0xe08e3104                          // add           r3, lr, r4, lsl #2
  .long  0xed931a00                          // vldr          s2, [r3]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_b_vfp4
.globl _sk_table_b_vfp4
FUNCTION(_sk_table_b_vfp4)
_sk_table_b_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe593e000                          // ldr           lr, [r3]
  .long  0xe5933004                          // ldr           r3, [r3, #4]
  .long  0xe2433001                          // sub           r3, r3, #1
  .long  0xee803b90                          // vdup.32       d16, r3
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2421c30                          // vfma.f32      d17, d2, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee303b90                          // vmov.32       r3, d16[1]
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xe08e3103                          // add           r3, lr, r3, lsl #2
  .long  0xedd32a00                          // vldr          s5, [r3]
  .long  0xe08e3104                          // add           r3, lr, r4, lsl #2
  .long  0xed932a00                          // vldr          s4, [r3]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_a_vfp4
.globl _sk_table_a_vfp4
FUNCTION(_sk_table_a_vfp4)
_sk_table_a_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe593e000                          // ldr           lr, [r3]
  .long  0xe5933004                          // ldr           r3, [r3, #4]
  .long  0xe2433001                          // sub           r3, r3, #1
  .long  0xee803b90                          // vdup.32       d16, r3
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee303b90                          // vmov.32       r3, d16[1]
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xe08e3103                          // add           r3, lr, r3, lsl #2
  .long  0xedd33a00                          // vldr          s7, [r3]
  .long  0xe08e3104                          // add           r3, lr, r4, lsl #2
  .long  0xed933a00                          // vldr          s6, [r3]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_parametric_r_vfp4
.globl _sk_parametric_r_vfp4
FUNCTION(_sk_parametric_r_vfp4)
_sk_parametric_r_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0300e                          // mov           r3, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e30c9d                          // vld1.32       {d16[]}, [r3 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3008                          // add           r3, lr, #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xe28e300c                          // add           r3, lr, #12
  .long  0xf2412c90                          // vfma.f32      d18, d17, d0
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3018                          // add           r3, lr, #24
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3010                          // add           r3, lr, #16
  .long  0xf2401c90                          // vfma.f32      d17, d16, d0
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3014                          // add           r3, lr, #20
  .long  0xf3400e80                          // vcge.f32      d16, d16, d0
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_g_vfp4
.globl _sk_parametric_g_vfp4
FUNCTION(_sk_parametric_g_vfp4)
_sk_parametric_g_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0300e                          // mov           r3, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e30c9d                          // vld1.32       {d16[]}, [r3 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3008                          // add           r3, lr, #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xe28e300c                          // add           r3, lr, #12
  .long  0xf2412c91                          // vfma.f32      d18, d17, d1
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3018                          // add           r3, lr, #24
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3010                          // add           r3, lr, #16
  .long  0xf2401c91                          // vfma.f32      d17, d16, d1
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3014                          // add           r3, lr, #20
  .long  0xf3400e81                          // vcge.f32      d16, d16, d1
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2201fa1                          // vmin.f32      d1, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_b_vfp4
.globl _sk_parametric_b_vfp4
FUNCTION(_sk_parametric_b_vfp4)
_sk_parametric_b_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0300e                          // mov           r3, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e30c9d                          // vld1.32       {d16[]}, [r3 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3008                          // add           r3, lr, #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xe28e300c                          // add           r3, lr, #12
  .long  0xf2412c92                          // vfma.f32      d18, d17, d2
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3018                          // add           r3, lr, #24
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3010                          // add           r3, lr, #16
  .long  0xf2401c92                          // vfma.f32      d17, d16, d2
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3014                          // add           r3, lr, #20
  .long  0xf3400e82                          // vcge.f32      d16, d16, d2
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2202fa1                          // vmin.f32      d2, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_a_vfp4
.globl _sk_parametric_a_vfp4
FUNCTION(_sk_parametric_a_vfp4)
_sk_parametric_a_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0300e                          // mov           r3, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e30c9d                          // vld1.32       {d16[]}, [r3 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3008                          // add           r3, lr, #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xe28e300c                          // add           r3, lr, #12
  .long  0xf2412c93                          // vfma.f32      d18, d17, d3
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3018                          // add           r3, lr, #24
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3010                          // add           r3, lr, #16
  .long  0xf2401c93                          // vfma.f32      d17, d16, d3
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3014                          // add           r3, lr, #20
  .long  0xf3400e83                          // vcge.f32      d16, d16, d3
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2203fa1                          // vmin.f32      d3, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_lab_to_xyz_vfp4
.globl _sk_lab_to_xyz_vfp4
FUNCTION(_sk_lab_to_xyz_vfp4)
_sk_lab_to_xyz_vfp4:
  .long  0xeddf1b2e                          // vldr          d17, [pc, #184]
  .long  0xf3c43613                          // vmov.i32      d19, #-1023410176
  .long  0xeddf0b2a                          // vldr          d16, [pc, #168]
  .long  0xf2c34f10                          // vmov.f32      d20, #16
  .long  0xf3401d31                          // vmul.f32      d17, d0, d17
  .long  0xeddf5b2f                          // vldr          d21, [pc, #188]
  .long  0xf3412d30                          // vmul.f32      d18, d1, d16
  .long  0xeddf6b2f                          // vldr          d22, [pc, #188]
  .long  0xf3420d30                          // vmul.f32      d16, d2, d16
  .long  0xeddf7b2f                          // vldr          d23, [pc, #188]
  .long  0xeddf8b30                          // vldr          d24, [pc, #192]
  .long  0xf2411da4                          // vadd.f32      d17, d17, d20
  .long  0xeddf4b24                          // vldr          d20, [pc, #144]
  .long  0xf2422da3                          // vadd.f32      d18, d18, d19
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2400da3                          // vadd.f32      d16, d16, d19
  .long  0xeddf3b22                          // vldr          d19, [pc, #136]
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xf3422db4                          // vmul.f32      d18, d18, d20
  .long  0xf3400db5                          // vmul.f32      d16, d16, d21
  .long  0xf2412da2                          // vadd.f32      d18, d17, d18
  .long  0xf2610da0                          // vsub.f32      d16, d17, d16
  .long  0xf3415db1                          // vmul.f32      d21, d17, d17
  .long  0xf3423db2                          // vmul.f32      d19, d18, d18
  .long  0xf3404db0                          // vmul.f32      d20, d16, d16
  .long  0xf3415db5                          // vmul.f32      d21, d17, d21
  .long  0xf2411da6                          // vadd.f32      d17, d17, d22
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf3404db4                          // vmul.f32      d20, d16, d20
  .long  0xf2400da6                          // vadd.f32      d16, d16, d22
  .long  0xf2422da6                          // vadd.f32      d18, d18, d22
  .long  0xeddf6b1d                          // vldr          d22, [pc, #116]
  .long  0xf3639ea7                          // vcgt.f32      d25, d19, d23
  .long  0xf364aea7                          // vcgt.f32      d26, d20, d23
  .long  0xf3400db8                          // vmul.f32      d16, d16, d24
  .long  0xf3422db8                          // vmul.f32      d18, d18, d24
  .long  0xf35391b2                          // vbsl          d25, d19, d18
  .long  0xeddf2b19                          // vldr          d18, [pc, #100]
  .long  0xf354a1b0                          // vbsl          d26, d20, d16
  .long  0xf3251ea7                          // vcgt.f32      d1, d21, d23
  .long  0xf3090db6                          // vmul.f32      d0, d25, d22
  .long  0xf30a2db2                          // vmul.f32      d2, d26, d18
  .long  0xf3410db8                          // vmul.f32      d16, d17, d24
  .long  0xf31511b0                          // vbsl          d1, d21, d16
  .long  0xe12fff13                          // bx            r3
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x42c80000                          // .word         0x42c80000
  .long  0x42c80000                          // .word         0x42c80000
  .long  0x3b03126f                          // .word         0x3b03126f
  .long  0x3b03126f                          // .word         0x3b03126f
  .long  0x3c0d3dcb                          // .word         0x3c0d3dcb
  .long  0x3c0d3dcb                          // .word         0x3c0d3dcb
  .long  0x3ba3d70a                          // .word         0x3ba3d70a
  .long  0x3ba3d70a                          // .word         0x3ba3d70a
  .long  0xbe0d3dcb                          // .word         0xbe0d3dcb
  .long  0xbe0d3dcb                          // .word         0xbe0d3dcb
  .long  0x3c1118c2                          // .word         0x3c1118c2
  .long  0x3c1118c2                          // .word         0x3c1118c2
  .long  0x3e038050                          // .word         0x3e038050
  .long  0x3e038050                          // .word         0x3e038050
  .long  0x3f76d71f                          // .word         0x3f76d71f
  .long  0x3f76d71f                          // .word         0x3f76d71f
  .long  0x3f5340f6                          // .word         0x3f5340f6
  .long  0x3f5340f6                          // .word         0x3f5340f6

HIDDEN _sk_load_a8_vfp4
.globl _sk_load_a8_vfp4
FUNCTION(_sk_load_a8_vfp4)
_sk_load_a8_vfp4:
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xe0833000                          // add           r3, r3, r0
  .long  0xe1d330b0                          // ldrh          r3, [r3]
  .long  0xe1cd30b0                          // strh          r3, [sp]
  .long  0xe1a0300d                          // mov           r3, sp
  .long  0xf4e3041f                          // vld1.16       {d16[0]}, [r3 :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3d00a30                          // vmovl.u16     q8, d16
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xeddf1b03                          // vldr          d17, [pc, #12]
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_gather_a8_vfp4
.globl _sk_gather_a8_vfp4
FUNCTION(_sk_gather_a8_vfp4)
_sk_gather_a8_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xe493e008                          // ldr           lr, [r3], #8
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee113b90                          // vmov.32       r3, d17[0]
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7de3003                          // ldrb          r3, [lr, r3]
  .long  0xe7de4004                          // ldrb          r4, [lr, r4]
  .long  0xee003b90                          // vmov.32       d16[0], r3
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b03                          // vldr          d17, [pc, #12]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_store_a8_vfp4
.globl _sk_store_a8_vfp4
FUNCTION(_sk_store_a8_vfp4)
_sk_store_a8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xeddf0b0d                          // vldr          d16, [pc, #52]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xee30cb90                          // vmov.32       ip, d16[1]
  .long  0xe7e3e000                          // strb          lr, [r3, r0]!
  .long  0xe5c3c001                          // strb          ip, [r3, #1]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000

HIDDEN _sk_load_g8_vfp4
.globl _sk_load_g8_vfp4
FUNCTION(_sk_load_g8_vfp4)
_sk_load_g8_vfp4:
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xe0833000                          // add           r3, r3, r0
  .long  0xe1d330b0                          // ldrh          r3, [r3]
  .long  0xe1cd30b0                          // strh          r3, [sp]
  .long  0xe1a0300d                          // mov           r3, sp
  .long  0xf4e3041f                          // vld1.16       {d16[0]}, [r3 :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3d00a30                          // vmovl.u16     q8, d16
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xeddf1b05                          // vldr          d17, [pc, #20]
  .long  0xf3000db1                          // vmul.f32      d0, d16, d17
  .long  0xf2201110                          // vorr          d1, d0, d0
  .long  0xf2202110                          // vorr          d2, d0, d0
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_gather_g8_vfp4
.globl _sk_gather_g8_vfp4
FUNCTION(_sk_gather_g8_vfp4)
_sk_gather_g8_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe493e008                          // ldr           lr, [r3], #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee113b90                          // vmov.32       r3, d17[0]
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7de3003                          // ldrb          r3, [lr, r3]
  .long  0xe7de4004                          // ldrb          r4, [lr, r4]
  .long  0xee003b90                          // vmov.32       d16[0], r3
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b05                          // vldr          d17, [pc, #20]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3000db1                          // vmul.f32      d0, d16, d17
  .long  0xf2201110                          // vorr          d1, d0, d0
  .long  0xf2202110                          // vorr          d2, d0, d0
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_gather_i8_vfp4
.globl _sk_gather_i8_vfp4
FUNCTION(_sk_gather_i8_vfp4)
_sk_gather_i8_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe1a0e001                          // mov           lr, r1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xe35c0000                          // cmp           ip, #0
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe1a0300c                          // mov           r3, ip
  .long  0x028e1008                          // addeq         r1, lr, #8
  .long  0x059e3004                          // ldreq         r3, [lr, #4]
  .long  0xe493e008                          // ldr           lr, [r3], #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee113b90                          // vmov.32       r3, d17[0]
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7de3003                          // ldrb          r3, [lr, r3]
  .long  0xe7de4004                          // ldrb          r4, [lr, r4]
  .long  0xee003b90                          // vmov.32       d16[0], r3
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xe59c4004                          // ldr           r4, [ip, #4]
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xee103b90                          // vmov.32       r3, d16[0]
  .long  0xee30eb90                          // vmov.32       lr, d16[1]
  .long  0xe0843103                          // add           r3, r4, r3, lsl #2
  .long  0xf4e3083f                          // vld1.32       {d16[0]}, [r3 :32]
  .long  0xe084310e                          // add           r3, r4, lr, lsl #2
  .long  0xf4e308bf                          // vld1.32       {d16[1]}, [r3 :32]
  .long  0xf24021b1                          // vand          d18, d16, d17
  .long  0xf3f83030                          // vshr.u32      d19, d16, #8
  .long  0xf3e84030                          // vshr.u32      d20, d16, #24
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3f00030                          // vshr.u32      d16, d16, #16
  .long  0xf24331b1                          // vand          d19, d19, d17
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf3043db1                          // vmul.f32      d3, d20, d17
  .long  0xf3031db1                          // vmul.f32      d1, d19, d17
  .long  0xf3002db1                          // vmul.f32      d2, d16, d17
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff13                          // bx            r3
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_load_565_vfp4
.globl _sk_load_565_vfp4
FUNCTION(_sk_load_565_vfp4)
_sk_load_565_vfp4:
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c1101f                          // vmov.i32      d17, #31
  .long  0xf3c72218                          // vmov.i32      d18, #63488
  .long  0xeddf3b16                          // vldr          d19, [pc, #88]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe7933080                          // ldr           r3, [r3, r0, lsl #1]
  .long  0xe58d3000                          // str           r3, [sp]
  .long  0xe1a0300d                          // mov           r3, sp
  .long  0xf4e3083f                          // vld1.32       {d16[0]}, [r3 :32]
  .long  0xe3a03e7e                          // mov           r3, #2016
  .long  0xf3d04a30                          // vmovl.u16     q10, d16
  .long  0xee803b90                          // vdup.32       d16, r3
  .long  0xf24411b1                          // vand          d17, d20, d17
  .long  0xeddf5b0e                          // vldr          d21, [pc, #56]
  .long  0xf24421b2                          // vand          d18, d20, d18
  .long  0xf24401b0                          // vand          d16, d20, d16
  .long  0xeddf4b09                          // vldr          d20, [pc, #36]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3020db3                          // vmul.f32      d0, d18, d19
  .long  0xf3001db4                          // vmul.f32      d1, d16, d20
  .long  0xf3012db5                          // vmul.f32      d2, d17, d21
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe12fff1c                          // bx            ip
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108

HIDDEN _sk_gather_565_vfp4
.globl _sk_gather_565_vfp4
FUNCTION(_sk_gather_565_vfp4)
_sk_gather_565_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xeddf4b20                          // vldr          d20, [pc, #128]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe493e008                          // ldr           lr, [r3], #8
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xeddf5b1e                          // vldr          d21, [pc, #120]
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xf2c1201f                          // vmov.i32      d18, #31
  .long  0xee113b90                          // vmov.32       r3, d17[0]
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xf3c71218                          // vmov.i32      d17, #63488
  .long  0xe08e3083                          // add           r3, lr, r3, lsl #1
  .long  0xe08e4084                          // add           r4, lr, r4, lsl #1
  .long  0xe1d330b0                          // ldrh          r3, [r3]
  .long  0xe1d440b0                          // ldrh          r4, [r4]
  .long  0xee003b90                          // vmov.32       d16[0], r3
  .long  0xe3a03e7e                          // mov           r3, #2016
  .long  0xee833b90                          // vdup.32       d19, r3
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24011b1                          // vand          d17, d16, d17
  .long  0xf24031b3                          // vand          d19, d16, d19
  .long  0xf24001b2                          // vand          d16, d16, d18
  .long  0xf3fb2623                          // vcvt.f32.s32  d18, d19
  .long  0xeddf3b07                          // vldr          d19, [pc, #28]
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3021db4                          // vmul.f32      d1, d18, d20
  .long  0xf3010db3                          // vmul.f32      d0, d17, d19
  .long  0xf3002db5                          // vmul.f32      d2, d16, d21
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108

HIDDEN _sk_store_565_vfp4
.globl _sk_store_565_vfp4
FUNCTION(_sk_store_565_vfp4)
_sk_store_565_vfp4:
  .long  0xf2c30f1f                          // vmov.f32      d16, #31
  .long  0xeddf1b15                          // vldr          d17, [pc, #84]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2413c31                          // vfma.f32      d19, d1, d17
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xe0833080                          // add           r3, r3, r0, lsl #1
  .long  0xf3fb07a3                          // vcvt.u32.f32  d16, d19
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2e50530                          // vshl.s32      d16, d16, #5
  .long  0xf2eb1531                          // vshl.s32      d17, d17, #11
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xf3f60121                          // vuzp.16       d16, d17
  .long  0xf4c3080f                          // vst1.32       {d16[0]}, [r3]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0x427c0000                          // .word         0x427c0000
  .long  0x427c0000                          // .word         0x427c0000

HIDDEN _sk_load_4444_vfp4
.globl _sk_load_4444_vfp4
FUNCTION(_sk_load_4444_vfp4)
_sk_load_4444_vfp4:
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3c71210                          // vmov.i32      d17, #61440
  .long  0xf3c74010                          // vmov.i32      d20, #240
  .long  0xf2c0501f                          // vmov.i32      d21, #15
  .long  0xeddf6b1d                          // vldr          d22, [pc, #116]
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe7933080                          // ldr           r3, [r3, r0, lsl #1]
  .long  0xe58d3000                          // str           r3, [sp]
  .long  0xe1a0300d                          // mov           r3, sp
  .long  0xf4e3083f                          // vld1.32       {d16[0]}, [r3 :32]
  .long  0xf3d02a30                          // vmovl.u16     q9, d16
  .long  0xf2c0021f                          // vmov.i32      d16, #3840
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf24201b0                          // vand          d16, d18, d16
  .long  0xf24241b4                          // vand          d20, d18, d20
  .long  0xf24221b5                          // vand          d18, d18, d21
  .long  0xeddf3b0c                          // vldr          d19, [pc, #48]
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xeddf5b0c                          // vldr          d21, [pc, #48]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3010db3                          // vmul.f32      d0, d17, d19
  .long  0xeddf1b0b                          // vldr          d17, [pc, #44]
  .long  0xf3001db5                          // vmul.f32      d1, d16, d21
  .long  0xf3042db6                          // vmul.f32      d2, d20, d22
  .long  0xf3023db1                          // vmul.f32      d3, d18, d17
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x37888889                          // .word         0x37888889
  .long  0x37888889                          // .word         0x37888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x3d888889                          // .word         0x3d888889

HIDDEN _sk_gather_4444_vfp4
.globl _sk_gather_4444_vfp4
FUNCTION(_sk_gather_4444_vfp4)
_sk_gather_4444_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xf3c73010                          // vmov.i32      d19, #240
  .long  0xeddf5b21                          // vldr          d21, [pc, #132]
  .long  0xe493e008                          // ldr           lr, [r3], #8
  .long  0xf2c0401f                          // vmov.i32      d20, #15
  .long  0xeddf6b20                          // vldr          d22, [pc, #128]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xf2c0221f                          // vmov.i32      d18, #3840
  .long  0xee113b90                          // vmov.32       r3, d17[0]
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xf3c71210                          // vmov.i32      d17, #61440
  .long  0xe08e3083                          // add           r3, lr, r3, lsl #1
  .long  0xe08e4084                          // add           r4, lr, r4, lsl #1
  .long  0xe1d330b0                          // ldrh          r3, [r3]
  .long  0xe1d440b0                          // ldrh          r4, [r4]
  .long  0xee003b90                          // vmov.32       d16[0], r3
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24011b1                          // vand          d17, d16, d17
  .long  0xf24021b2                          // vand          d18, d16, d18
  .long  0xf24031b3                          // vand          d19, d16, d19
  .long  0xf24001b4                          // vand          d16, d16, d20
  .long  0xeddf4b0a                          // vldr          d20, [pc, #40]
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3010db4                          // vmul.f32      d0, d17, d20
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf3021db5                          // vmul.f32      d1, d18, d21
  .long  0xf3032db6                          // vmul.f32      d2, d19, d22
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x37888889                          // .word         0x37888889
  .long  0x37888889                          // .word         0x37888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x3d888889                          // .word         0x3d888889

HIDDEN _sk_store_4444_vfp4
.globl _sk_store_4444_vfp4
FUNCTION(_sk_store_4444_vfp4)
_sk_store_4444_vfp4:
  .long  0xf2c20f1e                          // vmov.f32      d16, #15
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf2402c30                          // vfma.f32      d18, d0, d16
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xe0833080                          // add           r3, r3, r0, lsl #1
  .long  0xf2424c30                          // vfma.f32      d20, d2, d16
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3fb37a4                          // vcvt.u32.f32  d19, d20
  .long  0xf2ec0530                          // vshl.s32      d16, d16, #12
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf2e43533                          // vshl.s32      d19, d19, #4
  .long  0xf26201b0                          // vorr          d16, d18, d16
  .long  0xf26001b3                          // vorr          d16, d16, d19
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xf3f60121                          // vuzp.16       d16, d17
  .long  0xf4c3080f                          // vst1.32       {d16[0]}, [r3]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_load_8888_vfp4
.globl _sk_load_8888_vfp4
FUNCTION(_sk_load_8888_vfp4)
_sk_load_8888_vfp4:
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xe0833100                          // add           r3, r3, r0, lsl #2
  .long  0xedd31b00                          // vldr          d17, [r3]
  .long  0xf24121b0                          // vand          d18, d17, d16
  .long  0xf3f83031                          // vshr.u32      d19, d17, #8
  .long  0xf3e84031                          // vshr.u32      d20, d17, #24
  .long  0xf3f01031                          // vshr.u32      d17, d17, #16
  .long  0xf24331b0                          // vand          d19, d19, d16
  .long  0xf24101b0                          // vand          d16, d17, d16
  .long  0xeddf1b08                          // vldr          d17, [pc, #32]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf3043db1                          // vmul.f32      d3, d20, d17
  .long  0xf3031db1                          // vmul.f32      d1, d19, d17
  .long  0xf3002db1                          // vmul.f32      d2, d16, d17
  .long  0xe12fff1c                          // bx            ip
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_gather_8888_vfp4
.globl _sk_gather_8888_vfp4
FUNCTION(_sk_gather_8888_vfp4)
_sk_gather_8888_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe493e008                          // ldr           lr, [r3], #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee113b90                          // vmov.32       r3, d17[0]
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe08e3103                          // add           r3, lr, r3, lsl #2
  .long  0xf4e3083f                          // vld1.32       {d16[0]}, [r3 :32]
  .long  0xe08e3104                          // add           r3, lr, r4, lsl #2
  .long  0xf4e308bf                          // vld1.32       {d16[1]}, [r3 :32]
  .long  0xf24021b1                          // vand          d18, d16, d17
  .long  0xf3f83030                          // vshr.u32      d19, d16, #8
  .long  0xf3e84030                          // vshr.u32      d20, d16, #24
  .long  0xf3f00030                          // vshr.u32      d16, d16, #16
  .long  0xf24331b1                          // vand          d19, d19, d17
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b09                          // vldr          d17, [pc, #36]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf3043db1                          // vmul.f32      d3, d20, d17
  .long  0xf3031db1                          // vmul.f32      d1, d19, d17
  .long  0xf3002db1                          // vmul.f32      d2, d16, d17
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_store_8888_vfp4
.globl _sk_store_8888_vfp4
FUNCTION(_sk_store_8888_vfp4)
_sk_store_8888_vfp4:
  .long  0xeddf0b1a                          // vldr          d16, [pc, #104]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2412c30                          // vfma.f32      d18, d1, d16
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xe0833100                          // add           r3, r3, r0, lsl #2
  .long  0xf2434c30                          // vfma.f32      d20, d3, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf3fb37a4                          // vcvt.u32.f32  d19, d20
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xf2f02532                          // vshl.s32      d18, d18, #16
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xf2f81533                          // vshl.s32      d17, d19, #24
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xedc30b00                          // vstr          d16, [r3]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000

HIDDEN _sk_load_f16_vfp4
.globl _sk_load_f16_vfp4
FUNCTION(_sk_load_f16_vfp4)
_sk_load_f16_vfp4:
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xe0833180                          // add           r3, r3, r0, lsl #3
  .long  0xf4e3070d                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [r3]!
  .long  0xf4e3074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [r3]
  .long  0xf3b60720                          // vcvt.f32.f16  q0, d16
  .long  0xf3b62722                          // vcvt.f32.f16  q1, d18
  .long  0xf3f64721                          // vcvt.f32.f16  q10, d17
  .long  0xf3f60723                          // vcvt.f32.f16  q8, d19
  .long  0xf22411b4                          // vorr          d1, d20, d20
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_gather_f16_vfp4
.globl _sk_gather_f16_vfp4
FUNCTION(_sk_gather_f16_vfp4)
_sk_gather_f16_vfp4:
  .long  0xe92d4c10                          // push          {r4, sl, fp, lr}
  .long  0xe28db008                          // add           fp, sp, #8
  .long  0xe24dd010                          // sub           sp, sp, #16
  .long  0xe7c3d01f                          // bfc           sp, #0, #4
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe493c008                          // ldr           ip, [r3], #8
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee113b90                          // vmov.32       r3, d17[0]
  .long  0xee31eb90                          // vmov.32       lr, d17[1]
  .long  0xe08c4183                          // add           r4, ip, r3, lsl #3
  .long  0xe08c318e                          // add           r3, ip, lr, lsl #3
  .long  0xedd31b00                          // vldr          d17, [r3]
  .long  0xe1a0300d                          // mov           r3, sp
  .long  0xedd40b00                          // vldr          d16, [r4]
  .long  0xf4430aef                          // vst1.64       {d16-d17}, [r3 :128]
  .long  0xf4e3071f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [r3 :64]
  .long  0xe3833008                          // orr           r3, r3, #8
  .long  0xf4e3075f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [r3 :64]
  .long  0xf3b60720                          // vcvt.f32.f16  q0, d16
  .long  0xf3b62722                          // vcvt.f32.f16  q1, d18
  .long  0xe5913004                          // ldr           r3, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3f64721                          // vcvt.f32.f16  q10, d17
  .long  0xf3f60723                          // vcvt.f32.f16  q8, d19
  .long  0xf22411b4                          // vorr          d1, d20, d20
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xe12fff33                          // blx           r3
  .long  0xe24bd008                          // sub           sp, fp, #8
  .long  0xe8bd8c10                          // pop           {r4, sl, fp, pc}

HIDDEN _sk_store_f16_vfp4
.globl _sk_store_f16_vfp4
FUNCTION(_sk_store_f16_vfp4)
_sk_store_f16_vfp4:
  .long  0xf2630113                          // vorr          d16, d3, d3
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2612111                          // vorr          d18, d1, d1
  .long  0xf3f67620                          // vcvt.f16.f32  d23, q8
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf3f66602                          // vcvt.f16.f32  d22, q1
  .long  0xe0833180                          // add           r3, r3, r0, lsl #3
  .long  0xf3f65622                          // vcvt.f16.f32  d21, q9
  .long  0xf3f64600                          // vcvt.f16.f32  d20, q0
  .long  0xf22211b2                          // vorr          d1, d18, d18
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xf4c3470d                          // vst4.16       {d20[0],d21[0],d22[0],d23[0]}, [r3]!
  .long  0xf4c3474f                          // vst4.16       {d20[1],d21[1],d22[1],d23[1]}, [r3]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_load_u16_be_vfp4
.globl _sk_load_u16_be_vfp4
FUNCTION(_sk_load_u16_be_vfp4)
_sk_load_u16_be_vfp4:
  .long  0xe92d48f0                          // push          {r4, r5, r6, r7, fp, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xe0833180                          // add           r3, r3, r0, lsl #3
  .long  0xf4e3070d                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [r3]!
  .long  0xf4e3074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [r3]
  .long  0xee903bb0                          // vmov.u16      r3, d16[0]
  .long  0xee92ebb0                          // vmov.u16      lr, d18[0]
  .long  0xee914bb0                          // vmov.u16      r4, d17[0]
  .long  0xee937bb0                          // vmov.u16      r7, d19[0]
  .long  0xee905bf0                          // vmov.u16      r5, d16[1]
  .long  0xee926bf0                          // vmov.u16      r6, d18[1]
  .long  0xee043b90                          // vmov.32       d20[0], r3
  .long  0xee05eb90                          // vmov.32       d21[0], lr
  .long  0xee93ebf0                          // vmov.u16      lr, d19[1]
  .long  0xee913bf0                          // vmov.u16      r3, d17[1]
  .long  0xf3c71c1f                          // vmov.i32      d17, #65535
  .long  0xee004b90                          // vmov.32       d16[0], r4
  .long  0xee027b90                          // vmov.32       d18[0], r7
  .long  0xee245b90                          // vmov.32       d20[1], r5
  .long  0xf24431b1                          // vand          d19, d20, d17
  .long  0xee256b90                          // vmov.32       d21[1], r6
  .long  0xf2e84534                          // vshl.s32      d20, d20, #8
  .long  0xf24561b1                          // vand          d22, d21, d17
  .long  0xf3f83033                          // vshr.u32      d19, d19, #8
  .long  0xf2e85535                          // vshl.s32      d21, d21, #8
  .long  0xf26431b3                          // vorr          d19, d20, d19
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf24331b1                          // vand          d19, d19, d17
  .long  0xf26551b6                          // vorr          d21, d21, d22
  .long  0xf3fb36a3                          // vcvt.f32.u32  d19, d19
  .long  0xee22eb90                          // vmov.32       d18[1], lr
  .long  0xee203b90                          // vmov.32       d16[1], r3
  .long  0xf24281b1                          // vand          d24, d18, d17
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf24071b1                          // vand          d23, d16, d17
  .long  0xf3f84038                          // vshr.u32      d20, d24, #8
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xf3f87037                          // vshr.u32      d23, d23, #8
  .long  0xf26221b4                          // vorr          d18, d18, d20
  .long  0xf26001b7                          // vorr          d16, d16, d23
  .long  0xf24541b1                          // vand          d20, d21, d17
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xeddf2b09                          // vldr          d18, [pc, #36]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3fb46a4                          // vcvt.f32.u32  d20, d20
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3030db2                          // vmul.f32      d0, d19, d18
  .long  0xf3001db2                          // vmul.f32      d1, d16, d18
  .long  0xf3042db2                          // vmul.f32      d2, d20, d18
  .long  0xf3013db2                          // vmul.f32      d3, d17, d18
  .long  0xe8bd48f0                          // pop           {r4, r5, r6, r7, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_load_rgb_u16_be_vfp4
.globl _sk_load_rgb_u16_be_vfp4
FUNCTION(_sk_load_rgb_u16_be_vfp4)
_sk_load_rgb_u16_be_vfp4:
  .long  0xe92d48f0                          // push          {r4, r5, r6, r7, fp, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe593e000                          // ldr           lr, [r3]
  .long  0xe0803080                          // add           r3, r0, r0, lsl #1
  .long  0xe08e3083                          // add           r3, lr, r3, lsl #1
  .long  0xf4e3060d                          // vld3.16       {d16[0],d17[0],d18[0]}, [r3]!
  .long  0xf4e3064f                          // vld3.16       {d16[1],d17[1],d18[1]}, [r3]
  .long  0xee90ebb0                          // vmov.u16      lr, d16[0]
  .long  0xee913bb0                          // vmov.u16      r3, d17[0]
  .long  0xee924bb0                          // vmov.u16      r4, d18[0]
  .long  0xee927bf0                          // vmov.u16      r7, d18[1]
  .long  0xf3c73c1f                          // vmov.i32      d19, #65535
  .long  0xee905bf0                          // vmov.u16      r5, d16[1]
  .long  0xee916bf0                          // vmov.u16      r6, d17[1]
  .long  0xee00eb90                          // vmov.32       d16[0], lr
  .long  0xee013b90                          // vmov.32       d17[0], r3
  .long  0xee024b90                          // vmov.32       d18[0], r4
  .long  0xee205b90                          // vmov.32       d16[1], r5
  .long  0xee216b90                          // vmov.32       d17[1], r6
  .long  0xf24041b3                          // vand          d20, d16, d19
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xee227b90                          // vmov.32       d18[1], r7
  .long  0xf24151b3                          // vand          d21, d17, d19
  .long  0xf3f84034                          // vshr.u32      d20, d20, #8
  .long  0xf24261b3                          // vand          d22, d18, d19
  .long  0xf2e81531                          // vshl.s32      d17, d17, #8
  .long  0xf3f85035                          // vshr.u32      d21, d21, #8
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf26001b4                          // vorr          d16, d16, d20
  .long  0xf26111b5                          // vorr          d17, d17, d21
  .long  0xf26221b6                          // vorr          d18, d18, d22
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xeddf3b07                          // vldr          d19, [pc, #28]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3fb26a2                          // vcvt.f32.u32  d18, d18
  .long  0xf3000db3                          // vmul.f32      d0, d16, d19
  .long  0xf3011db3                          // vmul.f32      d1, d17, d19
  .long  0xf3022db3                          // vmul.f32      d2, d18, d19
  .long  0xe8bd48f0                          // pop           {r4, r5, r6, r7, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_store_u16_be_vfp4
.globl _sk_store_u16_be_vfp4
FUNCTION(_sk_store_u16_be_vfp4)
_sk_store_u16_be_vfp4:
  .long  0xeddf0b2a                          // vldr          d16, [pc, #168]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2432c30                          // vfma.f32      d18, d3, d16
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2414c30                          // vfma.f32      d20, d1, d16
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3c73c1f                          // vmov.i32      d19, #65535
  .long  0xf3fb47a4                          // vcvt.u32.f32  d20, d20
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf24051b3                          // vand          d21, d16, d19
  .long  0xf24261b3                          // vand          d22, d18, d19
  .long  0xf24471b3                          // vand          d23, d20, d19
  .long  0xf24131b3                          // vand          d19, d17, d19
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xf3f85035                          // vshr.u32      d21, d21, #8
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf260b1b5                          // vorr          d27, d16, d21
  .long  0xf2e84534                          // vshl.s32      d20, d20, #8
  .long  0xf3f87037                          // vshr.u32      d23, d23, #8
  .long  0xf262a1b6                          // vorr          d26, d18, d22
  .long  0xf2e81531                          // vshl.s32      d17, d17, #8
  .long  0xf3f83033                          // vshr.u32      d19, d19, #8
  .long  0xf26491b7                          // vorr          d25, d20, d23
  .long  0xf26181b3                          // vorr          d24, d17, d19
  .long  0xf3f6b120                          // vuzp.16       d27, d16
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xf3f6a120                          // vuzp.16       d26, d16
  .long  0xe0833180                          // add           r3, r3, r0, lsl #3
  .long  0xf3f69120                          // vuzp.16       d25, d16
  .long  0xf3f68120                          // vuzp.16       d24, d16
  .long  0xf4c3870d                          // vst4.16       {d24[0],d25[0],d26[0],d27[0]}, [r3]!
  .long  0xf4c3874f                          // vst4.16       {d24[1],d25[1],d26[1],d27[1]}, [r3]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x477fff00                          // .word         0x477fff00
  .long  0x477fff00                          // .word         0x477fff00

HIDDEN _sk_load_f32_vfp4
.globl _sk_load_f32_vfp4
FUNCTION(_sk_load_f32_vfp4)
_sk_load_f32_vfp4:
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xe0833200                          // add           r3, r3, r0, lsl #4
  .long  0xf423008f                          // vld4.32       {d0-d3}, [r3]
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_store_f32_vfp4
.globl _sk_store_f32_vfp4
FUNCTION(_sk_store_f32_vfp4)
_sk_store_f32_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xe5933000                          // ldr           r3, [r3]
  .long  0xe0833200                          // add           r3, r3, r0, lsl #4
  .long  0xf403008f                          // vst4.32       {d0-d3}, [r3]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_x_vfp4
.globl _sk_clamp_x_vfp4
FUNCTION(_sk_clamp_x_vfp4)
_sk_clamp_x_vfp4:
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2400f80                          // vmax.f32      d16, d16, d0
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_y_vfp4
.globl _sk_clamp_y_vfp4
FUNCTION(_sk_clamp_y_vfp4)
_sk_clamp_y_vfp4:
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2400f81                          // vmax.f32      d16, d16, d1
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xf2201fa1                          // vmin.f32      d1, d16, d17
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_repeat_x_vfp4
.globl _sk_repeat_x_vfp4
FUNCTION(_sk_repeat_x_vfp4)
_sk_repeat_x_vfp4:
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c02010                          // vmov.i32      d18, #0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xeddf3b0e                          // vldr          d19, [pc, #56]
  .long  0xed938a00                          // vldr          s16, [r3]
  .long  0xeec09a88                          // vdiv.f32      s19, s1, s16
  .long  0xee809a08                          // vdiv.f32      s18, s0, s16
  .long  0xf3fb0709                          // vcvt.s32.f32  d16, d9
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3601e89                          // vcgt.f32      d17, d16, d9
  .long  0xf35311b2                          // vbsl          d17, d19, d18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf3f41c08                          // vdup.32       d17, d8[0]
  .long  0xf2e009c8                          // vmul.f32      d16, d16, d8[0]
  .long  0xf2600d20                          // vsub.f32      d16, d0, d16
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_repeat_y_vfp4
.globl _sk_repeat_y_vfp4
FUNCTION(_sk_repeat_y_vfp4)
_sk_repeat_y_vfp4:
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c02010                          // vmov.i32      d18, #0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xeddf3b0e                          // vldr          d19, [pc, #56]
  .long  0xed938a00                          // vldr          s16, [r3]
  .long  0xeec19a88                          // vdiv.f32      s19, s3, s16
  .long  0xee819a08                          // vdiv.f32      s18, s2, s16
  .long  0xf3fb0709                          // vcvt.s32.f32  d16, d9
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3601e89                          // vcgt.f32      d17, d16, d9
  .long  0xf35311b2                          // vbsl          d17, d19, d18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf3f41c08                          // vdup.32       d17, d8[0]
  .long  0xf2e009c8                          // vmul.f32      d16, d16, d8[0]
  .long  0xf2610d20                          // vsub.f32      d16, d1, d16
  .long  0xf2201fa1                          // vmin.f32      d1, d16, d17
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_mirror_x_vfp4
.globl _sk_mirror_x_vfp4
FUNCTION(_sk_mirror_x_vfp4)
_sk_mirror_x_vfp4:
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xeddf4b12                          // vldr          d20, [pc, #72]
  .long  0xed938a00                          // vldr          s16, [r3]
  .long  0xee389a08                          // vadd.f32      s18, s16, s16
  .long  0xf3f40c08                          // vdup.32       d16, d8[0]
  .long  0xf2200d20                          // vsub.f32      d0, d0, d16
  .long  0xeec08a89                          // vdiv.f32      s17, s1, s18
  .long  0xee808a09                          // vdiv.f32      s16, s0, s18
  .long  0xf3fb1708                          // vcvt.s32.f32  d17, d8
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612e88                          // vcgt.f32      d18, d17, d8
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf2e119c9                          // vmul.f32      d17, d17, d9[0]
  .long  0xf2601d21                          // vsub.f32      d17, d0, d17
  .long  0xf2611da0                          // vsub.f32      d17, d17, d16
  .long  0xf3f91721                          // vabs.f32      d17, d17
  .long  0xf2210fa0                          // vmin.f32      d0, d17, d16
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_mirror_y_vfp4
.globl _sk_mirror_y_vfp4
FUNCTION(_sk_mirror_y_vfp4)
_sk_mirror_y_vfp4:
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xeddf4b12                          // vldr          d20, [pc, #72]
  .long  0xed938a00                          // vldr          s16, [r3]
  .long  0xee389a08                          // vadd.f32      s18, s16, s16
  .long  0xf3f40c08                          // vdup.32       d16, d8[0]
  .long  0xf2211d20                          // vsub.f32      d1, d1, d16
  .long  0xeec18a89                          // vdiv.f32      s17, s3, s18
  .long  0xee818a09                          // vdiv.f32      s16, s2, s18
  .long  0xf3fb1708                          // vcvt.s32.f32  d17, d8
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612e88                          // vcgt.f32      d18, d17, d8
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf2e119c9                          // vmul.f32      d17, d17, d9[0]
  .long  0xf2611d21                          // vsub.f32      d17, d1, d17
  .long  0xf2611da0                          // vsub.f32      d17, d17, d16
  .long  0xf3f91721                          // vabs.f32      d17, d17
  .long  0xf2211fa0                          // vmin.f32      d1, d17, d16
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_luminance_to_alpha_vfp4
.globl _sk_luminance_to_alpha_vfp4
FUNCTION(_sk_luminance_to_alpha_vfp4)
_sk_luminance_to_alpha_vfp4:
  .long  0xeddf0b0a                          // vldr          d16, [pc, #40]
  .long  0xeddf1b0b                          // vldr          d17, [pc, #44]
  .long  0xf3410d30                          // vmul.f32      d16, d1, d16
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3401d31                          // vmul.f32      d17, d0, d17
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2013da0                          // vadd.f32      d3, d17, d16
  .long  0xeddf0b06                          // vldr          d16, [pc, #24]
  .long  0xf2023c30                          // vfma.f32      d3, d2, d16
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xe12fff13                          // bx            r3
  .long  0x3f371759                          // .word         0x3f371759
  .long  0x3f371759                          // .word         0x3f371759
  .long  0x3e59b3d0                          // .word         0x3e59b3d0
  .long  0x3e59b3d0                          // .word         0x3e59b3d0
  .long  0x3d93dd98                          // .word         0x3d93dd98
  .long  0x3d93dd98                          // .word         0x3d93dd98

HIDDEN _sk_matrix_2x3_vfp4
.globl _sk_matrix_2x3_vfp4
FUNCTION(_sk_matrix_2x3_vfp4)
_sk_matrix_2x3_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e300c                          // add           r3, lr, #12
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xe28e3008                          // add           r3, lr, #8
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3010                          // add           r3, lr, #16
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3014                          // add           r3, lr, #20
  .long  0xf2410c31                          // vfma.f32      d16, d1, d17
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xf2411c32                          // vfma.f32      d17, d1, d18
  .long  0xf4ee2c9d                          // vld1.32       {d18[]}, [lr :32]!
  .long  0xf4ee3c9f                          // vld1.32       {d19[]}, [lr :32]
  .long  0xf2400c32                          // vfma.f32      d16, d0, d18
  .long  0xf2401c33                          // vfma.f32      d17, d0, d19
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_3x4_vfp4
.globl _sk_matrix_3x4_vfp4
FUNCTION(_sk_matrix_3x4_vfp4)
_sk_matrix_3x4_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e3020                          // add           r3, lr, #32
  .long  0xf4e33c9f                          // vld1.32       {d19[]}, [r3 :32]
  .long  0xe28e302c                          // add           r3, lr, #44
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e301c                          // add           r3, lr, #28
  .long  0xf2420c33                          // vfma.f32      d16, d2, d19
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xe28e3018                          // add           r3, lr, #24
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xe28e3024                          // add           r3, lr, #36
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3028                          // add           r3, lr, #40
  .long  0xf2421c32                          // vfma.f32      d17, d2, d18
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xe28e3010                          // add           r3, lr, #16
  .long  0xf2422c34                          // vfma.f32      d18, d2, d20
  .long  0xf4e33c9f                          // vld1.32       {d19[]}, [r3 :32]
  .long  0xe28e300c                          // add           r3, lr, #12
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xe28e3014                          // add           r3, lr, #20
  .long  0xf2411c34                          // vfma.f32      d17, d1, d20
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xf2410c34                          // vfma.f32      d16, d1, d20
  .long  0xe28e3008                          // add           r3, lr, #8
  .long  0xf2412c33                          // vfma.f32      d18, d1, d19
  .long  0xf4ee3c9d                          // vld1.32       {d19[]}, [lr :32]!
  .long  0xf4ee4c9f                          // vld1.32       {d20[]}, [lr :32]
  .long  0xf2401c33                          // vfma.f32      d17, d0, d19
  .long  0xf4e33c9f                          // vld1.32       {d19[]}, [r3 :32]
  .long  0xf2400c33                          // vfma.f32      d16, d0, d19
  .long  0xf2402c34                          // vfma.f32      d18, d0, d20
  .long  0xf22101b1                          // vorr          d0, d17, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xf22211b2                          // vorr          d1, d18, d18
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_4x5_vfp4
.globl _sk_matrix_4x5_vfp4
FUNCTION(_sk_matrix_4x5_vfp4)
_sk_matrix_4x5_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xf2620112                          // vorr          d16, d2, d2
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe2834014                          // add           r4, r3, #20
  .long  0xe1a0e003                          // mov           lr, r3
  .long  0xf4e45c9f                          // vld1.32       {d21[]}, [r4 :32]
  .long  0xe2834028                          // add           r4, r3, #40
  .long  0xf4e46c9f                          // vld1.32       {d22[]}, [r4 :32]
  .long  0xe2834038                          // add           r4, r3, #56
  .long  0xf4e47c9f                          // vld1.32       {d23[]}, [r4 :32]
  .long  0xe2834048                          // add           r4, r3, #72
  .long  0xf4a42c9f                          // vld1.32       {d2[]}, [r4 :32]
  .long  0xe2834034                          // add           r4, r3, #52
  .long  0xf2032c37                          // vfma.f32      d2, d3, d23
  .long  0xf4e48c9f                          // vld1.32       {d24[]}, [r4 :32]
  .long  0xe2834044                          // add           r4, r3, #68
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe2834030                          // add           r4, r3, #48
  .long  0xf2431c38                          // vfma.f32      d17, d3, d24
  .long  0xf4e49c9f                          // vld1.32       {d25[]}, [r4 :32]
  .long  0xe283403c                          // add           r4, r3, #60
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xe283404c                          // add           r4, r3, #76
  .long  0xf2002cb6                          // vfma.f32      d2, d16, d22
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe2834040                          // add           r4, r3, #64
  .long  0xf2432c33                          // vfma.f32      d18, d3, d19
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xe2834020                          // add           r4, r3, #32
  .long  0xf2433c39                          // vfma.f32      d19, d3, d25
  .long  0xf4e47c9f                          // vld1.32       {d23[]}, [r4 :32]
  .long  0xe283402c                          // add           r4, r3, #44
  .long  0xf4e48c9f                          // vld1.32       {d24[]}, [r4 :32]
  .long  0xe2834024                          // add           r4, r3, #36
  .long  0xf2402cb8                          // vfma.f32      d18, d16, d24
  .long  0xf4e48c9f                          // vld1.32       {d24[]}, [r4 :32]
  .long  0xf2401cb8                          // vfma.f32      d17, d16, d24
  .long  0xe2834010                          // add           r4, r3, #16
  .long  0xf2403cb7                          // vfma.f32      d19, d16, d23
  .long  0xf4ee4c9d                          // vld1.32       {d20[]}, [lr :32]!
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe283401c                          // add           r4, r3, #28
  .long  0xf4e46c9f                          // vld1.32       {d22[]}, [r4 :32]
  .long  0xe2834018                          // add           r4, r3, #24
  .long  0xf2412c36                          // vfma.f32      d18, d1, d22
  .long  0xf2411c35                          // vfma.f32      d17, d1, d21
  .long  0xf4ee5c9f                          // vld1.32       {d21[]}, [lr :32]
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe2834008                          // add           r4, r3, #8
  .long  0xe283300c                          // add           r3, r3, #12
  .long  0xf2012c30                          // vfma.f32      d2, d1, d16
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xf2401c35                          // vfma.f32      d17, d0, d21
  .long  0xf2403c34                          // vfma.f32      d19, d0, d20
  .long  0xf4e34c9f                          // vld1.32       {d20[]}, [r3 :32]
  .long  0xf2402c34                          // vfma.f32      d18, d0, d20
  .long  0xf2002c30                          // vfma.f32      d2, d0, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22301b3                          // vorr          d0, d19, d19
  .long  0xf22231b2                          // vorr          d3, d18, d18
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_perspective_vfp4
.globl _sk_matrix_perspective_vfp4
FUNCTION(_sk_matrix_perspective_vfp4)
_sk_matrix_perspective_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e301c                          // add           r3, lr, #28
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe28e3020                          // add           r3, lr, #32
  .long  0xf4e31c9f                          // vld1.32       {d17[]}, [r3 :32]
  .long  0xe28e3018                          // add           r3, lr, #24
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe1a0300e                          // mov           r3, lr
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf4e30c9d                          // vld1.32       {d16[]}, [r3 :32]!
  .long  0xf4e35c9f                          // vld1.32       {d21[]}, [r3 :32]
  .long  0xe28e3014                          // add           r3, lr, #20
  .long  0xf2413c35                          // vfma.f32      d19, d1, d21
  .long  0xf4e35c9f                          // vld1.32       {d21[]}, [r3 :32]
  .long  0xe28e300c                          // add           r3, lr, #12
  .long  0xf2415c32                          // vfma.f32      d21, d1, d18
  .long  0xf4e32c9f                          // vld1.32       {d18[]}, [r3 :32]
  .long  0xf3fb4521                          // vrecpe.f32    d20, d17
  .long  0xf2403c30                          // vfma.f32      d19, d0, d16
  .long  0xf2411fb4                          // vrecps.f32    d17, d17, d20
  .long  0xf2405c32                          // vfma.f32      d21, d0, d18
  .long  0xf3440db1                          // vmul.f32      d16, d20, d17
  .long  0xf3030db0                          // vmul.f32      d0, d19, d16
  .long  0xf3051db0                          // vmul.f32      d1, d21, d16
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_gradient_vfp4
.globl _sk_gradient_vfp4
FUNCTION(_sk_gradient_vfp4)
_sk_gradient_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe28e3014                          // add           r3, lr, #20
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4a33c9f                          // vld1.32       {d3[]}, [r3 :32]
  .long  0xe28e3010                          // add           r3, lr, #16
  .long  0xf4a32c9f                          // vld1.32       {d2[]}, [r3 :32]
  .long  0xe28e3008                          // add           r3, lr, #8
  .long  0xf4e30c9f                          // vld1.32       {d16[]}, [r3 :32]
  .long  0xe494c00c                          // ldr           ip, [r4], #12
  .long  0xf4a41c9f                          // vld1.32       {d1[]}, [r4 :32]
  .long  0xe35c0000                          // cmp           ip, #0
  .long  0x0a000036                          // beq           35c8 <sk_gradient_vfp4+0x110>
  .long  0xe59e3004                          // ldr           r3, [lr, #4]
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf2c07010                          // vmov.i32      d23, #0
  .long  0xf2c08010                          // vmov.i32      d24, #0
  .long  0xe2833020                          // add           r3, r3, #32
  .long  0xf2c06010                          // vmov.i32      d22, #0
  .long  0xe2434018                          // sub           r4, r3, #24
  .long  0xf4e33c9f                          // vld1.32       {d19[]}, [r3 :32]
  .long  0xe25cc001                          // subs          ip, ip, #1
  .long  0xf4e4dc9f                          // vld1.32       {d29[]}, [r4 :32]
  .long  0xe2434014                          // sub           r4, r3, #20
  .long  0xf4e45c9f                          // vld1.32       {d21[]}, [r4 :32]
  .long  0xe243400c                          // sub           r4, r3, #12
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xe2434020                          // sub           r4, r3, #32
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe2434004                          // sub           r4, r3, #4
  .long  0xf3622e80                          // vcgt.f32      d18, d18, d0
  .long  0xf4e4bc9f                          // vld1.32       {d27[]}, [r4 :32]
  .long  0xe2434008                          // sub           r4, r3, #8
  .long  0xf4e4cc9f                          // vld1.32       {d28[]}, [r4 :32]
  .long  0xe2434010                          // sub           r4, r3, #16
  .long  0xf262a1b2                          // vorr          d26, d18, d18
  .long  0xf4e4ec9f                          // vld1.32       {d30[]}, [r4 :32]
  .long  0xe243401c                          // sub           r4, r3, #28
  .long  0xf352a13b                          // vbsl          d26, d2, d27
  .long  0xe2833024                          // add           r3, r3, #36
  .long  0xf262b1b2                          // vorr          d27, d18, d18
  .long  0xf26291b2                          // vorr          d25, d18, d18
  .long  0xf351b13c                          // vbsl          d27, d1, d28
  .long  0xf262c1b2                          // vorr          d28, d18, d18
  .long  0xf3539133                          // vbsl          d25, d3, d19
  .long  0xf350c1b4                          // vbsl          d28, d16, d20
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xf26241b2                          // vorr          d20, d18, d18
  .long  0xf26231b2                          // vorr          d19, d18, d18
  .long  0xf35841b5                          // vbsl          d20, d24, d21
  .long  0xf26251b2                          // vorr          d21, d18, d18
  .long  0xf35121b0                          // vbsl          d18, d17, d16
  .long  0xf35731be                          // vbsl          d19, d23, d30
  .long  0xf35651bd                          // vbsl          d21, d22, d29
  .long  0xf26211b2                          // vorr          d17, d18, d18
  .long  0xf22931b9                          // vorr          d3, d25, d25
  .long  0xf22a21ba                          // vorr          d2, d26, d26
  .long  0xf22b11bb                          // vorr          d1, d27, d27
  .long  0xf26c01bc                          // vorr          d16, d28, d28
  .long  0xf26371b3                          // vorr          d23, d19, d19
  .long  0xf26481b4                          // vorr          d24, d20, d20
  .long  0xf26561b5                          // vorr          d22, d21, d21
  .long  0x1affffd3                          // bne           3504 <sk_gradient_vfp4+0x4c>
  .long  0xf26c01bc                          // vorr          d16, d28, d28
  .long  0xf22b11bb                          // vorr          d1, d27, d27
  .long  0xf22a21ba                          // vorr          d2, d26, d26
  .long  0xf22931b9                          // vorr          d3, d25, d25
  .long  0xea000003                          // b             35d8 <sk_gradient_vfp4+0x120>
  .long  0xf2c05010                          // vmov.i32      d21, #0
  .long  0xf2c04010                          // vmov.i32      d20, #0
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2c02010                          // vmov.i32      d18, #0
  .long  0xf2400c32                          // vfma.f32      d16, d0, d18
  .long  0xe5913004                          // ldr           r3, [r1, #4]
  .long  0xf2001c35                          // vfma.f32      d1, d0, d21
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2002c34                          // vfma.f32      d2, d0, d20
  .long  0xf2003c33                          // vfma.f32      d3, d0, d19
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_evenly_spaced_2_stop_gradient_vfp4
.globl _sk_evenly_spaced_2_stop_gradient_vfp4
FUNCTION(_sk_evenly_spaced_2_stop_gradient_vfp4)
_sk_evenly_spaced_2_stop_gradient_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe283400c                          // add           r4, r3, #12
  .long  0xe1a0e003                          // mov           lr, r3
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe2834008                          // add           r4, r3, #8
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xe2834018                          // add           r4, r3, #24
  .long  0xf4a42c9f                          // vld1.32       {d2[]}, [r4 :32]
  .long  0xe2834010                          // add           r4, r3, #16
  .long  0xf2002c33                          // vfma.f32      d2, d0, d19
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe283401c                          // add           r4, r3, #28
  .long  0xe2833014                          // add           r3, r3, #20
  .long  0xf4ee1c9d                          // vld1.32       {d17[]}, [lr :32]!
  .long  0xf2400c31                          // vfma.f32      d16, d0, d17
  .long  0xf4a43c9f                          // vld1.32       {d3[]}, [r4 :32]
  .long  0xf2003c32                          // vfma.f32      d3, d0, d18
  .long  0xf4ee1c9f                          // vld1.32       {d17[]}, [lr :32]
  .long  0xf4a31c9f                          // vld1.32       {d1[]}, [r3 :32]
  .long  0xf2001c31                          // vfma.f32      d1, d0, d17
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_xy_to_unit_angle_vfp4
.globl _sk_xy_to_unit_angle_vfp4
FUNCTION(_sk_xy_to_unit_angle_vfp4)
_sk_xy_to_unit_angle_vfp4:
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xf3f90701                          // vabs.f32      d16, d1
  .long  0xeddf3b24                          // vldr          d19, [pc, #144]
  .long  0xf3f91700                          // vabs.f32      d17, d0
  .long  0xeddf4b24                          // vldr          d20, [pc, #144]
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf2018fa0                          // vmax.f32      d8, d17, d16
  .long  0xf2219fa0                          // vmin.f32      d9, d17, d16
  .long  0xf3600ea1                          // vcgt.f32      d16, d16, d17
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf34a2d1a                          // vmul.f32      d18, d10, d10
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf2433da4                          // vadd.f32      d19, d19, d20
  .long  0xeddf4b1c                          // vldr          d20, [pc, #112]
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf2433da4                          // vadd.f32      d19, d19, d20
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b1a                          // vldr          d19, [pc, #104]
  .long  0xf2422da3                          // vadd.f32      d18, d18, d19
  .long  0xf2c53f10                          // vmov.f32      d19, #0.25
  .long  0xf34a2d32                          // vmul.f32      d18, d10, d18
  .long  0xf2631da2                          // vsub.f32      d17, d19, d18
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c72f10                          // vmov.f32      d18, #1
  .long  0xf2631da0                          // vsub.f32      d17, d19, d16
  .long  0xf3f93600                          // vclt.f32      d19, d0, #0
  .long  0xf35131b0                          // vbsl          d19, d17, d16
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf2620da3                          // vsub.f32      d16, d18, d19
  .long  0xf3f92601                          // vclt.f32      d18, d1, #0
  .long  0xf35021b3                          // vbsl          d18, d16, d19
  .long  0xf3420ea1                          // vcge.f32      d16, d18, d17
  .long  0xf3613ea2                          // vcgt.f32      d19, d17, d18
  .long  0xf26301b0                          // vorr          d16, d19, d16
  .long  0xf3b005a0                          // vmvn          d0, d16
  .long  0xf31101b2                          // vbsl          d0, d17, d18
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe12fff13                          // bx            r3
  .long  0xbbe72b6f                          // .word         0xbbe72b6f
  .long  0xbbe72b6f                          // .word         0xbbe72b6f
  .long  0x3ccad79f                          // .word         0x3ccad79f
  .long  0x3ccad79f                          // .word         0x3ccad79f
  .long  0xbd5464d4                          // .word         0xbd5464d4
  .long  0xbd5464d4                          // .word         0xbd5464d4
  .long  0x3e22f0a9                          // .word         0x3e22f0a9
  .long  0x3e22f0a9                          // .word         0x3e22f0a9

HIDDEN _sk_xy_to_radius_vfp4
.globl _sk_xy_to_radius_vfp4
FUNCTION(_sk_xy_to_radius_vfp4)
_sk_xy_to_radius_vfp4:
  .long  0xf3410d11                          // vmul.f32      d16, d1, d1
  .long  0xe4913004                          // ldr           r3, [r1], #4
  .long  0xf3401d10                          // vmul.f32      d17, d0, d0
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf3fb15a0                          // vrsqrte.f32   d17, d16
  .long  0xf3412db1                          // vmul.f32      d18, d17, d17
  .long  0xf2600fb2                          // vrsqrts.f32   d16, d16, d18
  .long  0xf3410db0                          // vmul.f32      d16, d17, d16
  .long  0xf3fb1520                          // vrecpe.f32    d17, d16
  .long  0xf2400fb1                          // vrecps.f32    d16, d16, d17
  .long  0xf3010db0                          // vmul.f32      d0, d17, d16
  .long  0xe12fff13                          // bx            r3

HIDDEN _sk_save_xy_vfp4
.globl _sk_save_xy_vfp4
FUNCTION(_sk_save_xy_vfp4)
_sk_save_xy_vfp4:
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xeddf7b17                          // vldr          d23, [pc, #92]
  .long  0xf2c06010                          // vmov.i32      d22, #0
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2401d20                          // vadd.f32      d17, d0, d16
  .long  0xf2410d20                          // vadd.f32      d16, d1, d16
  .long  0xed830b00                          // vstr          d0, [r3]
  .long  0xed831b08                          // vstr          d1, [r3, #32]
  .long  0xf3fb2721                          // vcvt.s32.f32  d18, d17
  .long  0xf3fb3720                          // vcvt.s32.f32  d19, d16
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3624ea1                          // vcgt.f32      d20, d18, d17
  .long  0xf3635ea0                          // vcgt.f32      d21, d19, d16
  .long  0xf35741b6                          // vbsl          d20, d23, d22
  .long  0xf35751b6                          // vbsl          d21, d23, d22
  .long  0xf2622da4                          // vsub.f32      d18, d18, d20
  .long  0xf2633da5                          // vsub.f32      d19, d19, d21
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf2600da3                          // vsub.f32      d16, d16, d19
  .long  0xedc31b10                          // vstr          d17, [r3, #64]
  .long  0xedc30b18                          // vstr          d16, [r3, #96]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_accumulate_vfp4
.globl _sk_accumulate_vfp4
FUNCTION(_sk_accumulate_vfp4)
_sk_accumulate_vfp4:
  .long  0xe8911008                          // ldm           r1, {r3, ip}
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xedd31b28                          // vldr          d17, [r3, #160]
  .long  0xedd30b20                          // vldr          d16, [r3, #128]
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf2004c90                          // vfma.f32      d4, d16, d0
  .long  0xf2005c91                          // vfma.f32      d5, d16, d1
  .long  0xf2006c92                          // vfma.f32      d6, d16, d2
  .long  0xf2007c93                          // vfma.f32      d7, d16, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_nx_vfp4
.globl _sk_bilinear_nx_vfp4
FUNCTION(_sk_bilinear_nx_vfp4)
_sk_bilinear_nx_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xedd32b10                          // vldr          d18, [r3, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xedd31b00                          // vldr          d17, [r3]
  .long  0xf3c3261f                          // vmov.i32      d18, #-1090519040
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xedc30b20                          // vstr          d16, [r3, #128]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_px_vfp4
.globl _sk_bilinear_px_vfp4
FUNCTION(_sk_bilinear_px_vfp4)
_sk_bilinear_px_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xedd31b00                          // vldr          d17, [r3]
  .long  0xedd32b10                          // vldr          d18, [r3, #64]
  .long  0xf2010da0                          // vadd.f32      d0, d17, d16
  .long  0xedc32b20                          // vstr          d18, [r3, #128]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_ny_vfp4
.globl _sk_bilinear_ny_vfp4
FUNCTION(_sk_bilinear_ny_vfp4)
_sk_bilinear_ny_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xedd32b18                          // vldr          d18, [r3, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xedd31b08                          // vldr          d17, [r3, #32]
  .long  0xf3c3261f                          // vmov.i32      d18, #-1090519040
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xedc30b28                          // vstr          d16, [r3, #160]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_py_vfp4
.globl _sk_bilinear_py_vfp4
FUNCTION(_sk_bilinear_py_vfp4)
_sk_bilinear_py_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xedd31b08                          // vldr          d17, [r3, #32]
  .long  0xedd32b18                          // vldr          d18, [r3, #96]
  .long  0xf2011da0                          // vadd.f32      d1, d17, d16
  .long  0xedc32b28                          // vstr          d18, [r3, #160]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bicubic_n3x_vfp4
.globl _sk_bicubic_n3x_vfp4
FUNCTION(_sk_bicubic_n3x_vfp4)
_sk_bicubic_n3x_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddf3b10                          // vldr          d19, [pc, #64]
  .long  0xedd32b10                          // vldr          d18, [r3, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0b                          // vldr          d18, [pc, #44]
  .long  0xedd31b00                          // vldr          d17, [r3]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3400db0                          // vmul.f32      d16, d16, d16
  .long  0xf3c72f18                          // vmov.f32      d18, #-1.5
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedc30b20                          // vstr          d16, [r3, #128]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n1x_vfp4
.globl _sk_bicubic_n1x_vfp4
FUNCTION(_sk_bicubic_n1x_vfp4)
_sk_bicubic_n1x_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2c73f18                          // vmov.f32      d19, #1.5
  .long  0xedd32b10                          // vldr          d18, [r3, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0d                          // vldr          d18, [pc, #52]
  .long  0xedd31b00                          // vldr          d17, [r3]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2402cb3                          // vfma.f32      d18, d16, d19
  .long  0xeddf3b0a                          // vldr          d19, [pc, #40]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3c3061f                          // vmov.i32      d16, #-1090519040
  .long  0xf2010da0                          // vadd.f32      d0, d17, d16
  .long  0xedc33b20                          // vstr          d19, [r3, #128]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p1x_vfp4
.globl _sk_bicubic_p1x_vfp4
FUNCTION(_sk_bicubic_p1x_vfp4)
_sk_bicubic_p1x_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c71f18                          // vmov.f32      d17, #1.5
  .long  0xeddf0b0c                          // vldr          d16, [pc, #48]
  .long  0xedd33b10                          // vldr          d19, [r3, #64]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xedd32b00                          // vldr          d18, [r3]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xf2020da0                          // vadd.f32      d0, d18, d16
  .long  0xf2430cb1                          // vfma.f32      d16, d19, d17
  .long  0xeddf1b07                          // vldr          d17, [pc, #28]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xedc31b20                          // vstr          d17, [r3, #128]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p3x_vfp4
.globl _sk_bicubic_p3x_vfp4
FUNCTION(_sk_bicubic_p3x_vfp4)
_sk_bicubic_p3x_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xeddf0b0d                          // vldr          d16, [pc, #52]
  .long  0xeddf3b0e                          // vldr          d19, [pc, #56]
  .long  0xedd32b10                          // vldr          d18, [r3, #64]
  .long  0xf2423cb0                          // vfma.f32      d19, d18, d16
  .long  0xedd31b00                          // vldr          d17, [r3]
  .long  0xf3420db2                          // vmul.f32      d16, d18, d18
  .long  0xf2c72f18                          // vmov.f32      d18, #1.5
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedc30b20                          // vstr          d16, [r3, #128]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n3y_vfp4
.globl _sk_bicubic_n3y_vfp4
FUNCTION(_sk_bicubic_n3y_vfp4)
_sk_bicubic_n3y_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddf3b10                          // vldr          d19, [pc, #64]
  .long  0xedd32b18                          // vldr          d18, [r3, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0b                          // vldr          d18, [pc, #44]
  .long  0xedd31b08                          // vldr          d17, [r3, #32]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3400db0                          // vmul.f32      d16, d16, d16
  .long  0xf3c72f18                          // vmov.f32      d18, #-1.5
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedc30b28                          // vstr          d16, [r3, #160]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n1y_vfp4
.globl _sk_bicubic_n1y_vfp4
FUNCTION(_sk_bicubic_n1y_vfp4)
_sk_bicubic_n1y_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2c73f18                          // vmov.f32      d19, #1.5
  .long  0xedd32b18                          // vldr          d18, [r3, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0d                          // vldr          d18, [pc, #52]
  .long  0xedd31b08                          // vldr          d17, [r3, #32]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2402cb3                          // vfma.f32      d18, d16, d19
  .long  0xeddf3b0a                          // vldr          d19, [pc, #40]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3c3061f                          // vmov.i32      d16, #-1090519040
  .long  0xf2011da0                          // vadd.f32      d1, d17, d16
  .long  0xedc33b28                          // vstr          d19, [r3, #160]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p1y_vfp4
.globl _sk_bicubic_p1y_vfp4
FUNCTION(_sk_bicubic_p1y_vfp4)
_sk_bicubic_p1y_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xf2c71f18                          // vmov.f32      d17, #1.5
  .long  0xeddf0b0c                          // vldr          d16, [pc, #48]
  .long  0xedd33b18                          // vldr          d19, [r3, #96]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xedd32b08                          // vldr          d18, [r3, #32]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xf2021da0                          // vadd.f32      d1, d18, d16
  .long  0xf2430cb1                          // vfma.f32      d16, d19, d17
  .long  0xeddf1b07                          // vldr          d17, [pc, #28]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xedc31b28                          // vstr          d17, [r3, #160]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p3y_vfp4
.globl _sk_bicubic_p3y_vfp4
FUNCTION(_sk_bicubic_p3y_vfp4)
_sk_bicubic_p3y_vfp4:
  .long  0xe5913000                          // ldr           r3, [r1]
  .long  0xeddf0b0d                          // vldr          d16, [pc, #52]
  .long  0xeddf3b0e                          // vldr          d19, [pc, #56]
  .long  0xedd32b18                          // vldr          d18, [r3, #96]
  .long  0xf2423cb0                          // vfma.f32      d19, d18, d16
  .long  0xedd31b08                          // vldr          d17, [r3, #32]
  .long  0xf3420db2                          // vmul.f32      d16, d18, d18
  .long  0xf2c72f18                          // vmov.f32      d18, #1.5
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedc30b28                          // vstr          d16, [r3, #160]
  .long  0xe2813008                          // add           r3, r1, #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe1a01003                          // mov           r1, r3
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_callback_vfp4
.globl _sk_callback_vfp4
FUNCTION(_sk_callback_vfp4)
_sk_callback_vfp4:
  .long  0xe92d48f0                          // push          {r4, r5, r6, r7, fp, lr}
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xe1a05001                          // mov           r5, r1
  .long  0xe1a06000                          // mov           r6, r0
  .long  0xe5957000                          // ldr           r7, [r5]
  .long  0xe1a04002                          // mov           r4, r2
  .long  0xe3a01002                          // mov           r1, #2
  .long  0xeeb08b47                          // vmov.f64      d8, d7
  .long  0xe2870004                          // add           r0, r7, #4
  .long  0xf400008f                          // vst4.32       {d0-d3}, [r0]
  .long  0xe1a00007                          // mov           r0, r7
  .long  0xe5972000                          // ldr           r2, [r7]
  .long  0xeeb09b46                          // vmov.f64      d9, d6
  .long  0xeeb0ab45                          // vmov.f64      d10, d5
  .long  0xeeb0bb44                          // vmov.f64      d11, d4
  .long  0xe12fff32                          // blx           r2
  .long  0xe5970084                          // ldr           r0, [r7, #132]
  .long  0xe2851008                          // add           r1, r5, #8
  .long  0xe5953004                          // ldr           r3, [r5, #4]
  .long  0xe1a02004                          // mov           r2, r4
  .long  0xeeb04b4b                          // vmov.f64      d4, d11
  .long  0xf420008f                          // vld4.32       {d0-d3}, [r0]
  .long  0xe1a00006                          // mov           r0, r6
  .long  0xeeb05b4a                          // vmov.f64      d5, d10
  .long  0xeeb06b49                          // vmov.f64      d6, d9
  .long  0xeeb07b48                          // vmov.f64      d7, d8
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe8bd48f0                          // pop           {r4, r5, r6, r7, fp, lr}
  .long  0xe12fff13                          // bx            r3
#elif defined(__x86_64__)
BALIGN32

HIDDEN _sk_start_pipeline_hsw
.globl _sk_start_pipeline_hsw
FUNCTION(_sk_start_pipeline_hsw)
_sk_start_pipeline_hsw:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  73,137,205                          // mov           %rcx,%r13
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,199                          // mov           %rax,%r15
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  72,141,67,8                         // lea           0x8(%rbx),%rax
  .byte  76,57,232                           // cmp           %r13,%rax
  .byte  118,5                               // jbe           28 <_sk_start_pipeline_hsw+0x28>
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  235,65                              // jmp           69 <_sk_start_pipeline_hsw+0x69>
  .byte  185,0,0,0,0                         // mov           $0x0,%ecx
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,230                          // mov           %r12,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  65,255,215                          // callq         *%r15
  .byte  72,141,123,8                        // lea           0x8(%rbx),%rdi
  .byte  72,131,195,16                       // add           $0x10,%rbx
  .byte  76,57,235                           // cmp           %r13,%rbx
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  118,191                             // jbe           28 <_sk_start_pipeline_hsw+0x28>
  .byte  76,137,233                          // mov           %r13,%rcx
  .byte  72,41,249                           // sub           %rdi,%rcx
  .byte  116,41                              // je            9a <_sk_start_pipeline_hsw+0x9a>
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  76,137,230                          // mov           %r12,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  65,255,215                          // callq         *%r15
  .byte  76,137,232                          // mov           %r13,%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  197,248,119                         // vzeroupper
  .byte  195                                 // retq

HIDDEN _sk_just_return_hsw
.globl _sk_just_return_hsw
FUNCTION(_sk_just_return_hsw)
_sk_just_return_hsw:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_hsw
.globl _sk_seed_shader_hsw
FUNCTION(_sk_seed_shader_hsw)
_sk_seed_shader_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,249,110,199                     // vmovd         %edi,%xmm0
  .byte  196,226,125,88,192                  // vpbroadcastd  %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,45,69,0,0         // vbroadcastss  0x452d(%rip),%ymm1        # 45f0 <_sk_callback_hsw+0x127>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,88,2                        // vaddps        (%rdx),%ymm0,%ymm0
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,21,17,69,0,0         // vbroadcastss  0x4511(%rip),%ymm2        # 45f4 <_sk_callback_hsw+0x12b>
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_hsw
.globl _sk_dither_hsw
FUNCTION(_sk_dither_hsw)
_sk_dither_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,199                     // vmovd         %edi,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,60,88,2                         // vaddps        (%rdx),%ymm8,%ymm8
  .byte  196,65,126,91,192                   // vcvttps2dq    %ymm8,%ymm8
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  196,66,125,88,8                     // vpbroadcastd  (%r8),%ymm9
  .byte  196,65,61,239,201                   // vpxor         %ymm9,%ymm8,%ymm9
  .byte  196,98,125,88,21,208,68,0,0         // vpbroadcastd  0x44d0(%rip),%ymm10        # 45f8 <_sk_callback_hsw+0x12f>
  .byte  196,65,53,219,218                   // vpand         %ymm10,%ymm9,%ymm11
  .byte  196,193,37,114,243,5                // vpslld        $0x5,%ymm11,%ymm11
  .byte  196,65,61,219,210                   // vpand         %ymm10,%ymm8,%ymm10
  .byte  196,193,45,114,242,4                // vpslld        $0x4,%ymm10,%ymm10
  .byte  196,98,125,88,37,181,68,0,0         // vpbroadcastd  0x44b5(%rip),%ymm12        # 45fc <_sk_callback_hsw+0x133>
  .byte  196,98,125,88,45,176,68,0,0         // vpbroadcastd  0x44b0(%rip),%ymm13        # 4600 <_sk_callback_hsw+0x137>
  .byte  196,65,53,219,245                   // vpand         %ymm13,%ymm9,%ymm14
  .byte  196,193,13,114,246,2                // vpslld        $0x2,%ymm14,%ymm14
  .byte  196,65,61,219,237                   // vpand         %ymm13,%ymm8,%ymm13
  .byte  196,65,21,254,237                   // vpaddd        %ymm13,%ymm13,%ymm13
  .byte  196,65,53,219,204                   // vpand         %ymm12,%ymm9,%ymm9
  .byte  196,193,53,114,209,1                // vpsrld        $0x1,%ymm9,%ymm9
  .byte  196,65,61,219,196                   // vpand         %ymm12,%ymm8,%ymm8
  .byte  196,193,61,114,208,2                // vpsrld        $0x2,%ymm8,%ymm8
  .byte  196,65,21,235,210                   // vpor          %ymm10,%ymm13,%ymm10
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,37,235,214                   // vpor          %ymm14,%ymm11,%ymm10
  .byte  196,65,61,235,194                   // vpor          %ymm10,%ymm8,%ymm8
  .byte  196,65,61,235,193                   // vpor          %ymm9,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,98,68,0,0          // vbroadcastss  0x4462(%rip),%ymm9        # 4604 <_sk_callback_hsw+0x13b>
  .byte  196,98,125,24,21,93,68,0,0          // vbroadcastss  0x445d(%rip),%ymm10        # 4608 <_sk_callback_hsw+0x13f>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,64,8                  // vbroadcastss  0x8(%rax),%ymm8
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_hsw
.globl _sk_constant_color_hsw
FUNCTION(_sk_constant_color_hsw)
_sk_constant_color_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_hsw
.globl _sk_clear_hsw
FUNCTION(_sk_clear_hsw)
_sk_clear_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_hsw
.globl _sk_srcatop_hsw
FUNCTION(_sk_srcatop_hsw)
_sk_srcatop_hsw:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,98,125,24,5,3,68,0,0            // vbroadcastss  0x4403(%rip),%ymm8        # 460c <_sk_callback_hsw+0x143>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_hsw
.globl _sk_dstatop_hsw
FUNCTION(_sk_dstatop_hsw)
_sk_dstatop_hsw:
  .byte  196,98,125,24,5,214,67,0,0          // vbroadcastss  0x43d6(%rip),%ymm8        # 4610 <_sk_callback_hsw+0x147>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,226,101,184,196                 // vfmadd231ps   %ymm4,%ymm3,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  196,226,101,184,205                 // vfmadd231ps   %ymm5,%ymm3,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  196,226,101,184,214                 // vfmadd231ps   %ymm6,%ymm3,%ymm2
  .byte  197,60,89,195                       // vmulps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_hsw
.globl _sk_srcin_hsw
FUNCTION(_sk_srcin_hsw)
_sk_srcin_hsw:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_hsw
.globl _sk_dstin_hsw
FUNCTION(_sk_dstin_hsw)
_sk_dstin_hsw:
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_hsw
.globl _sk_srcout_hsw
FUNCTION(_sk_srcout_hsw)
_sk_srcout_hsw:
  .byte  196,98,125,24,5,125,67,0,0          // vbroadcastss  0x437d(%rip),%ymm8        # 4614 <_sk_callback_hsw+0x14b>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_hsw
.globl _sk_dstout_hsw
FUNCTION(_sk_dstout_hsw)
_sk_dstout_hsw:
  .byte  196,226,125,24,5,96,67,0,0          // vbroadcastss  0x4360(%rip),%ymm0        # 4618 <_sk_callback_hsw+0x14f>
  .byte  197,252,92,219                      // vsubps        %ymm3,%ymm0,%ymm3
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_hsw
.globl _sk_srcover_hsw
FUNCTION(_sk_srcover_hsw)
_sk_srcover_hsw:
  .byte  196,98,125,24,5,67,67,0,0           // vbroadcastss  0x4343(%rip),%ymm8        # 461c <_sk_callback_hsw+0x153>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,93,184,192                  // vfmadd231ps   %ymm8,%ymm4,%ymm0
  .byte  196,194,85,184,200                  // vfmadd231ps   %ymm8,%ymm5,%ymm1
  .byte  196,194,77,184,208                  // vfmadd231ps   %ymm8,%ymm6,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_hsw
.globl _sk_dstover_hsw
FUNCTION(_sk_dstover_hsw)
_sk_dstover_hsw:
  .byte  196,98,125,24,5,34,67,0,0           // vbroadcastss  0x4322(%rip),%ymm8        # 4620 <_sk_callback_hsw+0x157>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_hsw
.globl _sk_modulate_hsw
FUNCTION(_sk_modulate_hsw)
_sk_modulate_hsw:
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_hsw
.globl _sk_multiply_hsw
FUNCTION(_sk_multiply_hsw)
_sk_multiply_hsw:
  .byte  196,98,125,24,5,237,66,0,0          // vbroadcastss  0x42ed(%rip),%ymm8        # 4624 <_sk_callback_hsw+0x15b>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,208                       // vmulps        %ymm0,%ymm9,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,212                   // vfmadd231ps   %ymm4,%ymm8,%ymm10
  .byte  196,194,93,168,194                  // vfmadd213ps   %ymm10,%ymm4,%ymm0
  .byte  197,52,89,209                       // vmulps        %ymm1,%ymm9,%ymm10
  .byte  196,98,61,184,213                   // vfmadd231ps   %ymm5,%ymm8,%ymm10
  .byte  196,194,85,168,202                  // vfmadd213ps   %ymm10,%ymm5,%ymm1
  .byte  197,52,89,210                       // vmulps        %ymm2,%ymm9,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  196,194,77,168,210                  // vfmadd213ps   %ymm10,%ymm6,%ymm2
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  196,66,69,168,193                   // vfmadd213ps   %ymm9,%ymm7,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__hsw
.globl _sk_plus__hsw
FUNCTION(_sk_plus__hsw)
_sk_plus__hsw:
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_hsw
.globl _sk_screen_hsw
FUNCTION(_sk_screen_hsw)
_sk_screen_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  196,194,93,172,192                  // vfnmadd213ps  %ymm8,%ymm4,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  196,194,85,172,200                  // vfnmadd213ps  %ymm8,%ymm5,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  196,194,77,172,208                  // vfnmadd213ps  %ymm8,%ymm6,%ymm2
  .byte  197,100,88,199                      // vaddps        %ymm7,%ymm3,%ymm8
  .byte  196,194,69,172,216                  // vfnmadd213ps  %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__hsw
.globl _sk_xor__hsw
FUNCTION(_sk_xor__hsw)
_sk_xor__hsw:
  .byte  196,98,125,24,5,104,66,0,0          // vbroadcastss  0x4268(%rip),%ymm8        # 4628 <_sk_callback_hsw+0x15f>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  196,98,69,168,195                   // vfmadd213ps   %ymm3,%ymm7,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,195                      // vmovaps       %ymm8,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_hsw
.globl _sk_darken_hsw
FUNCTION(_sk_darken_hsw)
_sk_darken_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,95,193                  // vmaxps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,95,201                  // vmaxps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,95,209                  // vmaxps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,240,65,0,0          // vbroadcastss  0x41f0(%rip),%ymm8        # 462c <_sk_callback_hsw+0x163>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_hsw
.globl _sk_lighten_hsw
FUNCTION(_sk_lighten_hsw)
_sk_lighten_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,159,65,0,0          // vbroadcastss  0x419f(%rip),%ymm8        # 4630 <_sk_callback_hsw+0x167>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_hsw
.globl _sk_difference_hsw
FUNCTION(_sk_difference_hsw)
_sk_difference_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,66,65,0,0           // vbroadcastss  0x4142(%rip),%ymm8        # 4634 <_sk_callback_hsw+0x16b>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_hsw
.globl _sk_exclusion_hsw
FUNCTION(_sk_exclusion_hsw)
_sk_exclusion_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,0,65,0,0            // vbroadcastss  0x4100(%rip),%ymm8        # 4638 <_sk_callback_hsw+0x16f>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_hsw
.globl _sk_colorburn_hsw
FUNCTION(_sk_colorburn_hsw)
_sk_colorburn_hsw:
  .byte  196,98,125,24,5,238,64,0,0          // vbroadcastss  0x40ee(%rip),%ymm8        # 463c <_sk_callback_hsw+0x173>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,216                       // vmulps        %ymm0,%ymm9,%ymm11
  .byte  196,65,44,87,210                    // vxorps        %ymm10,%ymm10,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,228                       // vmulps        %ymm4,%ymm8,%ymm12
  .byte  197,68,92,236                       // vsubps        %ymm4,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,232                       // vdivps        %ymm0,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  196,66,101,168,235                  // vfmadd213ps   %ymm11,%ymm3,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,224                       // vaddps        %ymm0,%ymm12,%ymm12
  .byte  196,193,124,194,194,0               // vcmpeqps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,196,0                 // vblendvps     %ymm0,%ymm12,%ymm13,%ymm0
  .byte  197,92,194,231,0                    // vcmpeqps      %ymm7,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,52,89,217                       // vmulps        %ymm1,%ymm9,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  197,68,92,237                       // vsubps        %ymm5,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,233                       // vdivps        %ymm1,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  196,66,101,168,235                  // vfmadd213ps   %ymm11,%ymm3,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,225                       // vaddps        %ymm1,%ymm12,%ymm12
  .byte  196,193,116,194,202,0               // vcmpeqps      %ymm10,%ymm1,%ymm1
  .byte  196,195,21,74,204,16                // vblendvps     %ymm1,%ymm12,%ymm13,%ymm1
  .byte  197,84,194,231,0                    // vcmpeqps      %ymm7,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,108,194,210,0                // vcmpeqps      %ymm10,%ymm2,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  197,68,92,230                       // vsubps        %ymm6,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  197,28,94,226                       // vdivps        %ymm2,%ymm12,%ymm12
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,65,68,92,228                    // vsubps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,225                  // vfmadd213ps   %ymm9,%ymm3,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,227,37,74,210,160               // vblendvps     %ymm10,%ymm2,%ymm11,%ymm2
  .byte  197,76,194,215,0                    // vcmpeqps      %ymm7,%ymm6,%ymm10
  .byte  197,52,88,206                       // vaddps        %ymm6,%ymm9,%ymm9
  .byte  196,195,109,74,209,160              // vblendvps     %ymm10,%ymm9,%ymm2,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_hsw
.globl _sk_colordodge_hsw
FUNCTION(_sk_colordodge_hsw)
_sk_colordodge_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,13,249,63,0,0         // vbroadcastss  0x3ff9(%rip),%ymm9        # 4640 <_sk_callback_hsw+0x177>
  .byte  197,52,92,215                       // vsubps        %ymm7,%ymm9,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,52,92,203                       // vsubps        %ymm3,%ymm9,%ymm9
  .byte  197,100,89,228                      // vmulps        %ymm4,%ymm3,%ymm12
  .byte  197,100,92,232                      // vsubps        %ymm0,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,236                       // vmulps        %ymm4,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,227                  // vfmadd213ps   %ymm11,%ymm3,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,232                       // vaddps        %ymm0,%ymm13,%ymm13
  .byte  197,252,194,195,0                   // vcmpeqps      %ymm3,%ymm0,%ymm0
  .byte  196,195,29,74,197,0                 // vblendvps     %ymm0,%ymm13,%ymm12,%ymm0
  .byte  196,65,92,194,224,0                 // vcmpeqps      %ymm8,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,100,89,229                      // vmulps        %ymm5,%ymm3,%ymm12
  .byte  197,100,92,233                      // vsubps        %ymm1,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,237                       // vmulps        %ymm5,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,227                  // vfmadd213ps   %ymm11,%ymm3,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,233                       // vaddps        %ymm1,%ymm13,%ymm13
  .byte  197,244,194,203,0                   // vcmpeqps      %ymm3,%ymm1,%ymm1
  .byte  196,195,29,74,205,16                // vblendvps     %ymm1,%ymm13,%ymm12,%ymm1
  .byte  196,65,84,194,224,0                 // vcmpeqps      %ymm8,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,100,92,226                      // vsubps        %ymm2,%ymm3,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  197,52,89,230                       // vmulps        %ymm6,%ymm9,%ymm12
  .byte  196,65,68,93,219                    // vminps        %ymm11,%ymm7,%ymm11
  .byte  196,66,101,168,218                  // vfmadd213ps   %ymm10,%ymm3,%ymm11
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  197,236,194,211,0                   // vcmpeqps      %ymm3,%ymm2,%ymm2
  .byte  196,195,37,74,212,32                // vblendvps     %ymm2,%ymm12,%ymm11,%ymm2
  .byte  196,65,76,194,192,0                 // vcmpeqps      %ymm8,%ymm6,%ymm8
  .byte  197,44,88,214                       // vaddps        %ymm6,%ymm10,%ymm10
  .byte  196,195,109,74,210,128              // vblendvps     %ymm8,%ymm10,%ymm2,%ymm2
  .byte  196,194,69,184,217                  // vfmadd231ps   %ymm9,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_hsw
.globl _sk_hardlight_hsw
FUNCTION(_sk_hardlight_hsw)
_sk_hardlight_hsw:
  .byte  196,98,125,24,5,26,63,0,0           // vbroadcastss  0x3f1a(%rip),%ymm8        # 4644 <_sk_callback_hsw+0x17b>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,220                   // vfmadd231ps   %ymm4,%ymm8,%ymm11
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  197,52,194,227,2                    // vcmpleps      %ymm3,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  196,98,61,184,221                   // vfmadd231ps   %ymm5,%ymm8,%ymm11
  .byte  197,116,88,225                      // vaddps        %ymm1,%ymm1,%ymm12
  .byte  197,28,194,227,2                    // vcmpleps      %ymm3,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  197,108,88,218                      // vaddps        %ymm2,%ymm2,%ymm11
  .byte  197,36,194,219,2                    // vcmpleps      %ymm3,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_hsw
.globl _sk_overlay_hsw
FUNCTION(_sk_overlay_hsw)
_sk_overlay_hsw:
  .byte  196,98,125,24,5,82,62,0,0           // vbroadcastss  0x3e52(%rip),%ymm8        # 4648 <_sk_callback_hsw+0x17f>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,220                   // vfmadd231ps   %ymm4,%ymm8,%ymm11
  .byte  197,92,88,204                       // vaddps        %ymm4,%ymm4,%ymm9
  .byte  197,52,194,231,2                    // vcmpleps      %ymm7,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  196,98,61,184,221                   // vfmadd231ps   %ymm5,%ymm8,%ymm11
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_hsw
.globl _sk_softlight_hsw
FUNCTION(_sk_softlight_hsw)
_sk_softlight_hsw:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,252,40,209                      // vmovaps       %ymm1,%ymm2
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  197,52,194,215,1                    // vcmpltps      %ymm7,%ymm9,%ymm10
  .byte  197,92,94,199                       // vdivps        %ymm7,%ymm4,%ymm8
  .byte  196,67,53,74,232,160                // vblendvps     %ymm10,%ymm8,%ymm9,%ymm13
  .byte  196,65,20,88,197                    // vaddps        %ymm13,%ymm13,%ymm8
  .byte  196,65,60,88,192                    // vaddps        %ymm8,%ymm8,%ymm8
  .byte  196,66,61,168,192                   // vfmadd213ps   %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,29,93,61,0,0          // vbroadcastss  0x3d5d(%rip),%ymm11        # 4650 <_sk_callback_hsw+0x187>
  .byte  196,65,20,88,227                    // vaddps        %ymm11,%ymm13,%ymm12
  .byte  196,65,28,89,192                    // vmulps        %ymm8,%ymm12,%ymm8
  .byte  196,98,125,24,37,78,61,0,0          // vbroadcastss  0x3d4e(%rip),%ymm12        # 4654 <_sk_callback_hsw+0x18b>
  .byte  196,66,21,184,196                   // vfmadd231ps   %ymm12,%ymm13,%ymm8
  .byte  196,65,124,82,245                   // vrsqrtps      %ymm13,%ymm14
  .byte  196,65,124,83,246                   // vrcpps        %ymm14,%ymm14
  .byte  196,65,12,92,245                    // vsubps        %ymm13,%ymm14,%ymm14
  .byte  197,92,88,252                       // vaddps        %ymm4,%ymm4,%ymm15
  .byte  196,65,4,88,255                     // vaddps        %ymm15,%ymm15,%ymm15
  .byte  197,4,194,255,2                     // vcmpleps      %ymm7,%ymm15,%ymm15
  .byte  196,67,13,74,240,240                // vblendvps     %ymm15,%ymm8,%ymm14,%ymm14
  .byte  197,116,88,249                      // vaddps        %ymm1,%ymm1,%ymm15
  .byte  196,98,125,24,5,17,61,0,0           // vbroadcastss  0x3d11(%rip),%ymm8        # 464c <_sk_callback_hsw+0x183>
  .byte  196,65,60,92,237                    // vsubps        %ymm13,%ymm8,%ymm13
  .byte  197,132,92,195                      // vsubps        %ymm3,%ymm15,%ymm0
  .byte  196,98,125,168,235                  // vfmadd213ps   %ymm3,%ymm0,%ymm13
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,20,89,236                       // vmulps        %ymm4,%ymm13,%ymm13
  .byte  196,226,101,184,196                 // vfmadd231ps   %ymm4,%ymm3,%ymm0
  .byte  197,4,194,243,2                     // vcmpleps      %ymm3,%ymm15,%ymm14
  .byte  196,195,125,74,197,224              // vblendvps     %ymm14,%ymm13,%ymm0,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,212,94,199                      // vdivps        %ymm7,%ymm5,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,240                      // vaddps        %ymm0,%ymm0,%ymm14
  .byte  196,65,12,88,246                    // vaddps        %ymm14,%ymm14,%ymm14
  .byte  196,66,13,168,246                   // vfmadd213ps   %ymm14,%ymm14,%ymm14
  .byte  196,65,124,88,251                   // vaddps        %ymm11,%ymm0,%ymm15
  .byte  196,65,4,89,246                     // vmulps        %ymm14,%ymm15,%ymm14
  .byte  196,66,125,184,244                  // vfmadd231ps   %ymm12,%ymm0,%ymm14
  .byte  197,124,82,248                      // vrsqrtps      %ymm0,%ymm15
  .byte  196,65,124,83,255                   // vrcpps        %ymm15,%ymm15
  .byte  197,4,92,248                        // vsubps        %ymm0,%ymm15,%ymm15
  .byte  197,84,88,237                       // vaddps        %ymm5,%ymm5,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,20,194,239,2                    // vcmpleps      %ymm7,%ymm13,%ymm13
  .byte  196,67,5,74,238,208                 // vblendvps     %ymm13,%ymm14,%ymm15,%ymm13
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,108,88,242                      // vaddps        %ymm2,%ymm2,%ymm14
  .byte  197,12,92,251                       // vsubps        %ymm3,%ymm14,%ymm15
  .byte  196,226,5,168,195                   // vfmadd213ps   %ymm3,%ymm15,%ymm0
  .byte  197,4,89,255                        // vmulps        %ymm7,%ymm15,%ymm15
  .byte  196,65,4,89,237                     // vmulps        %ymm13,%ymm15,%ymm13
  .byte  197,252,89,197                      // vmulps        %ymm5,%ymm0,%ymm0
  .byte  196,98,101,184,237                  // vfmadd231ps   %ymm5,%ymm3,%ymm13
  .byte  197,12,194,243,2                    // vcmpleps      %ymm3,%ymm14,%ymm14
  .byte  196,99,21,74,240,224                // vblendvps     %ymm14,%ymm0,%ymm13,%ymm14
  .byte  197,204,94,199                      // vdivps        %ymm7,%ymm6,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,66,53,168,201                   // vfmadd213ps   %ymm9,%ymm9,%ymm9
  .byte  196,65,124,88,211                   // vaddps        %ymm11,%ymm0,%ymm10
  .byte  196,65,44,89,201                    // vmulps        %ymm9,%ymm10,%ymm9
  .byte  196,66,125,184,204                  // vfmadd231ps   %ymm12,%ymm0,%ymm9
  .byte  197,124,82,208                      // vrsqrtps      %ymm0,%ymm10
  .byte  196,65,124,83,210                   // vrcpps        %ymm10,%ymm10
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  196,65,36,88,219                    // vaddps        %ymm11,%ymm11,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  196,67,45,74,201,176                // vblendvps     %ymm11,%ymm9,%ymm10,%ymm9
  .byte  197,124,16,100,36,200               // vmovups       -0x38(%rsp),%ymm12
  .byte  196,65,28,88,212                    // vaddps        %ymm12,%ymm12,%ymm10
  .byte  197,44,92,219                       // vsubps        %ymm3,%ymm10,%ymm11
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  196,226,37,168,195                  // vfmadd213ps   %ymm3,%ymm11,%ymm0
  .byte  197,36,89,223                       // vmulps        %ymm7,%ymm11,%ymm11
  .byte  196,65,36,89,201                    // vmulps        %ymm9,%ymm11,%ymm9
  .byte  197,252,89,198                      // vmulps        %ymm6,%ymm0,%ymm0
  .byte  196,98,101,184,206                  // vfmadd231ps   %ymm6,%ymm3,%ymm9
  .byte  197,44,194,211,2                    // vcmpleps      %ymm3,%ymm10,%ymm10
  .byte  196,99,53,74,200,160                // vblendvps     %ymm10,%ymm0,%ymm9,%ymm9
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,252,88,68,36,168                // vaddps        -0x58(%rsp),%ymm0,%ymm0
  .byte  197,172,89,202                      // vmulps        %ymm2,%ymm10,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  196,193,116,88,206                  // vaddps        %ymm14,%ymm1,%ymm1
  .byte  196,193,44,89,212                   // vmulps        %ymm12,%ymm10,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_hsw
.globl _sk_hue_hsw
FUNCTION(_sk_hue_hsw)
_sk_hue_hsw:
  .byte  197,124,40,194                      // vmovaps       %ymm2,%ymm8
  .byte  197,124,17,68,36,200                // vmovups       %ymm8,-0x38(%rsp)
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,108,89,203                      // vmulps        %ymm3,%ymm2,%ymm9
  .byte  197,116,89,211                      // vmulps        %ymm3,%ymm1,%ymm10
  .byte  197,60,89,219                       // vmulps        %ymm3,%ymm8,%ymm11
  .byte  197,84,95,198                       // vmaxps        %ymm6,%ymm5,%ymm8
  .byte  196,65,92,95,192                    // vmaxps        %ymm8,%ymm4,%ymm8
  .byte  197,84,93,230                       // vminps        %ymm6,%ymm5,%ymm12
  .byte  196,65,92,93,228                    // vminps        %ymm12,%ymm4,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,227                       // vmulps        %ymm3,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,195,45,74,200,240               // vblendvps     %ymm15,%ymm8,%ymm10,%ymm1
  .byte  196,65,36,92,213                    // vsubps        %ymm13,%ymm11,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm12
  .byte  196,98,125,24,53,21,59,0,0          // vbroadcastss  0x3b15(%rip),%ymm14        # 4658 <_sk_callback_hsw+0x18f>
  .byte  196,98,125,24,61,16,59,0,0          // vbroadcastss  0x3b10(%rip),%ymm15        # 465c <_sk_callback_hsw+0x193>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,66,93,184,238                   // vfmadd231ps   %ymm14,%ymm4,%ymm13
  .byte  196,226,125,24,5,1,59,0,0           // vbroadcastss  0x3b01(%rip),%ymm0        # 4660 <_sk_callback_hsw+0x197>
  .byte  196,98,77,184,232                   // vfmadd231ps   %ymm0,%ymm6,%ymm13
  .byte  196,65,116,89,215                   // vmulps        %ymm15,%ymm1,%ymm10
  .byte  196,66,53,184,214                   // vfmadd231ps   %ymm14,%ymm9,%ymm10
  .byte  196,98,29,184,208                   // vfmadd231ps   %ymm0,%ymm12,%ymm10
  .byte  196,66,101,170,234                  // vfmsub213ps   %ymm10,%ymm3,%ymm13
  .byte  196,65,52,88,213                    // vaddps        %ymm13,%ymm9,%ymm10
  .byte  196,65,116,88,221                   // vaddps        %ymm13,%ymm1,%ymm11
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,193,36,93,204                   // vminps        %ymm12,%ymm11,%ymm1
  .byte  197,44,93,233                       // vminps        %ymm1,%ymm10,%ymm13
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  196,66,45,184,206                   // vfmadd231ps   %ymm14,%ymm10,%ymm9
  .byte  196,98,29,184,200                   // vfmadd231ps   %ymm0,%ymm12,%ymm9
  .byte  196,193,44,92,193                   // vsubps        %ymm9,%ymm10,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,193,52,92,205                   // vsubps        %ymm13,%ymm9,%ymm1
  .byte  197,252,94,193                      // vdivps        %ymm1,%ymm0,%ymm0
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  197,12,94,241                       // vdivps        %ymm1,%ymm14,%ymm14
  .byte  196,65,28,92,249                    // vsubps        %ymm9,%ymm12,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  197,132,94,201                      // vdivps        %ymm1,%ymm15,%ymm1
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,204,208              // vblendvps     %ymm13,%ymm12,%ymm1,%ymm1
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,194,208              // vblendvps     %ymm13,%ymm10,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,124,92,217                   // vsubps        %ymm9,%ymm0,%ymm11
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,250,1                 // vcmpltps      %ymm10,%ymm12,%ymm15
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,217                    // vsubps        %ymm9,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,116,92,241                   // vsubps        %ymm9,%ymm1,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,210                    // vdivps        %ymm10,%ymm13,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,195,117,74,201,240              // vblendvps     %ymm15,%ymm9,%ymm1,%ymm1
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,200                    // vmaxps        %ymm8,%ymm11,%ymm9
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  196,226,125,24,13,238,57,0,0        // vbroadcastss  0x39ee(%rip),%ymm1        # 4664 <_sk_callback_hsw+0x19b>
  .byte  197,116,92,215                      // vsubps        %ymm7,%ymm1,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,116,92,219                      // vsubps        %ymm3,%ymm1,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,192                      // vaddps        %ymm0,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,208                   // vaddps        %ymm8,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_hsw
.globl _sk_saturation_hsw
FUNCTION(_sk_saturation_hsw)
_sk_saturation_hsw:
  .byte  197,124,40,194                      // vmovaps       %ymm2,%ymm8
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,17,68,36,200                // vmovups       %ymm0,-0x38(%rsp)
  .byte  197,116,95,192                      // vmaxps        %ymm0,%ymm1,%ymm8
  .byte  196,65,108,95,192                   // vmaxps        %ymm8,%ymm2,%ymm8
  .byte  197,116,93,224                      // vminps        %ymm0,%ymm1,%ymm12
  .byte  196,65,108,93,228                   // vminps        %ymm12,%ymm2,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,231                       // vmulps        %ymm7,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,195,45,74,200,240               // vblendvps     %ymm15,%ymm8,%ymm10,%ymm1
  .byte  196,65,36,92,213                    // vsubps        %ymm13,%ymm11,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm12
  .byte  196,98,125,24,53,5,57,0,0           // vbroadcastss  0x3905(%rip),%ymm14        # 4668 <_sk_callback_hsw+0x19f>
  .byte  196,98,125,24,61,0,57,0,0           // vbroadcastss  0x3900(%rip),%ymm15        # 466c <_sk_callback_hsw+0x1a3>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,66,93,184,238                   // vfmadd231ps   %ymm14,%ymm4,%ymm13
  .byte  196,226,125,24,5,241,56,0,0         // vbroadcastss  0x38f1(%rip),%ymm0        # 4670 <_sk_callback_hsw+0x1a7>
  .byte  196,98,77,184,232                   // vfmadd231ps   %ymm0,%ymm6,%ymm13
  .byte  196,65,116,89,215                   // vmulps        %ymm15,%ymm1,%ymm10
  .byte  196,66,53,184,214                   // vfmadd231ps   %ymm14,%ymm9,%ymm10
  .byte  196,98,29,184,208                   // vfmadd231ps   %ymm0,%ymm12,%ymm10
  .byte  196,66,101,170,234                  // vfmsub213ps   %ymm10,%ymm3,%ymm13
  .byte  196,65,52,88,213                    // vaddps        %ymm13,%ymm9,%ymm10
  .byte  196,65,116,88,221                   // vaddps        %ymm13,%ymm1,%ymm11
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,193,36,93,204                   // vminps        %ymm12,%ymm11,%ymm1
  .byte  197,44,93,233                       // vminps        %ymm1,%ymm10,%ymm13
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  196,66,45,184,206                   // vfmadd231ps   %ymm14,%ymm10,%ymm9
  .byte  196,98,29,184,200                   // vfmadd231ps   %ymm0,%ymm12,%ymm9
  .byte  196,193,44,92,193                   // vsubps        %ymm9,%ymm10,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,193,52,92,205                   // vsubps        %ymm13,%ymm9,%ymm1
  .byte  197,252,94,193                      // vdivps        %ymm1,%ymm0,%ymm0
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  197,12,94,241                       // vdivps        %ymm1,%ymm14,%ymm14
  .byte  196,65,28,92,249                    // vsubps        %ymm9,%ymm12,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  197,132,94,201                      // vdivps        %ymm1,%ymm15,%ymm1
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,204,208              // vblendvps     %ymm13,%ymm12,%ymm1,%ymm1
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,194,208              // vblendvps     %ymm13,%ymm10,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,124,92,217                   // vsubps        %ymm9,%ymm0,%ymm11
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,250,1                 // vcmpltps      %ymm10,%ymm12,%ymm15
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,217                    // vsubps        %ymm9,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,116,92,241                   // vsubps        %ymm9,%ymm1,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,210                    // vdivps        %ymm10,%ymm13,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,195,117,74,201,240              // vblendvps     %ymm15,%ymm9,%ymm1,%ymm1
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,200                    // vmaxps        %ymm8,%ymm11,%ymm9
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  196,226,125,24,13,222,55,0,0        // vbroadcastss  0x37de(%rip),%ymm1        # 4674 <_sk_callback_hsw+0x1ab>
  .byte  197,116,92,215                      // vsubps        %ymm7,%ymm1,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,116,92,219                      // vsubps        %ymm3,%ymm1,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,192                      // vaddps        %ymm0,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,208                   // vaddps        %ymm8,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_hsw
.globl _sk_color_hsw
FUNCTION(_sk_color_hsw)
_sk_color_hsw:
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,17,76,36,200                // vmovups       %ymm9,-0x38(%rsp)
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,108,89,199                      // vmulps        %ymm7,%ymm2,%ymm8
  .byte  197,116,89,215                      // vmulps        %ymm7,%ymm1,%ymm10
  .byte  197,52,89,223                       // vmulps        %ymm7,%ymm9,%ymm11
  .byte  196,98,125,24,45,119,55,0,0         // vbroadcastss  0x3777(%rip),%ymm13        # 4678 <_sk_callback_hsw+0x1af>
  .byte  196,98,125,24,53,114,55,0,0         // vbroadcastss  0x3772(%rip),%ymm14        # 467c <_sk_callback_hsw+0x1b3>
  .byte  196,65,84,89,230                    // vmulps        %ymm14,%ymm5,%ymm12
  .byte  196,66,93,184,229                   // vfmadd231ps   %ymm13,%ymm4,%ymm12
  .byte  196,98,125,24,61,99,55,0,0          // vbroadcastss  0x3763(%rip),%ymm15        # 4680 <_sk_callback_hsw+0x1b7>
  .byte  196,66,77,184,231                   // vfmadd231ps   %ymm15,%ymm6,%ymm12
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,66,61,184,205                   // vfmadd231ps   %ymm13,%ymm8,%ymm9
  .byte  196,66,37,184,207                   // vfmadd231ps   %ymm15,%ymm11,%ymm9
  .byte  196,66,101,170,225                  // vfmsub213ps   %ymm9,%ymm3,%ymm12
  .byte  196,65,60,88,204                    // vaddps        %ymm12,%ymm8,%ymm9
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,224                    // vminps        %ymm8,%ymm9,%ymm12
  .byte  196,65,44,89,198                    // vmulps        %ymm14,%ymm10,%ymm8
  .byte  196,66,53,184,197                   // vfmadd231ps   %ymm13,%ymm9,%ymm8
  .byte  196,66,37,184,199                   // vfmadd231ps   %ymm15,%ymm11,%ymm8
  .byte  196,65,52,92,232                    // vsubps        %ymm8,%ymm9,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,60,92,244                    // vsubps        %ymm12,%ymm8,%ymm14
  .byte  196,193,20,94,198                   // vdivps        %ymm14,%ymm13,%ymm0
  .byte  196,65,44,92,248                    // vsubps        %ymm8,%ymm10,%ymm15
  .byte  196,65,60,89,255                    // vmulps        %ymm15,%ymm8,%ymm15
  .byte  196,65,4,94,254                     // vdivps        %ymm14,%ymm15,%ymm15
  .byte  196,65,36,92,232                    // vsubps        %ymm8,%ymm11,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,20,94,238                    // vdivps        %ymm14,%ymm13,%ymm13
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,194,228,2                 // vcmpleps      %ymm12,%ymm14,%ymm12
  .byte  196,65,60,88,255                    // vaddps        %ymm15,%ymm8,%ymm15
  .byte  196,67,5,74,250,192                 // vblendvps     %ymm12,%ymm10,%ymm15,%ymm15
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,60,88,237                    // vaddps        %ymm13,%ymm8,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  196,195,125,74,201,192              // vblendvps     %ymm12,%ymm9,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,202                    // vmaxps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,92,208                   // vsubps        %ymm8,%ymm1,%ymm10
  .byte  196,65,28,92,232                    // vsubps        %ymm8,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,193,1                // vcmpltps      %ymm9,%ymm12,%ymm0
  .byte  196,65,52,92,200                    // vsubps        %ymm8,%ymm9,%ymm9
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,4,92,208                     // vsubps        %ymm8,%ymm15,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,67,5,74,210,0                   // vblendvps     %ymm0,%ymm10,%ymm15,%ymm10
  .byte  196,65,36,92,248                    // vsubps        %ymm8,%ymm11,%ymm15
  .byte  196,65,20,89,239                    // vmulps        %ymm15,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,193,116,95,206                  // vmaxps        %ymm14,%ymm1,%ymm1
  .byte  196,65,44,95,198                    // vmaxps        %ymm14,%ymm10,%ymm8
  .byte  196,65,124,95,206                   // vmaxps        %ymm14,%ymm0,%ymm9
  .byte  196,226,125,24,5,69,54,0,0          // vbroadcastss  0x3645(%rip),%ymm0        # 4684 <_sk_callback_hsw+0x1bb>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,193                      // vaddps        %ymm1,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,200                  // vaddps        %ymm8,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,209                   // vaddps        %ymm9,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_hsw
.globl _sk_luminosity_hsw
FUNCTION(_sk_luminosity_hsw)
_sk_luminosity_hsw:
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,17,76,36,168                // vmovups       %ymm9,-0x58(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  196,98,125,24,45,222,53,0,0         // vbroadcastss  0x35de(%rip),%ymm13        # 4688 <_sk_callback_hsw+0x1bf>
  .byte  196,98,125,24,53,217,53,0,0         // vbroadcastss  0x35d9(%rip),%ymm14        # 468c <_sk_callback_hsw+0x1c3>
  .byte  196,65,116,89,230                   // vmulps        %ymm14,%ymm1,%ymm12
  .byte  196,66,109,184,229                  // vfmadd231ps   %ymm13,%ymm2,%ymm12
  .byte  196,98,125,24,61,202,53,0,0         // vbroadcastss  0x35ca(%rip),%ymm15        # 4690 <_sk_callback_hsw+0x1c7>
  .byte  196,66,53,184,231                   // vfmadd231ps   %ymm15,%ymm9,%ymm12
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,66,61,184,205                   // vfmadd231ps   %ymm13,%ymm8,%ymm9
  .byte  196,66,37,184,207                   // vfmadd231ps   %ymm15,%ymm11,%ymm9
  .byte  196,66,69,170,225                   // vfmsub213ps   %ymm9,%ymm7,%ymm12
  .byte  196,65,60,88,204                    // vaddps        %ymm12,%ymm8,%ymm9
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,224                    // vminps        %ymm8,%ymm9,%ymm12
  .byte  196,65,44,89,198                    // vmulps        %ymm14,%ymm10,%ymm8
  .byte  196,66,53,184,197                   // vfmadd231ps   %ymm13,%ymm9,%ymm8
  .byte  196,66,37,184,199                   // vfmadd231ps   %ymm15,%ymm11,%ymm8
  .byte  196,65,52,92,232                    // vsubps        %ymm8,%ymm9,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,60,92,244                    // vsubps        %ymm12,%ymm8,%ymm14
  .byte  196,193,20,94,198                   // vdivps        %ymm14,%ymm13,%ymm0
  .byte  196,65,44,92,248                    // vsubps        %ymm8,%ymm10,%ymm15
  .byte  196,65,60,89,255                    // vmulps        %ymm15,%ymm8,%ymm15
  .byte  196,65,4,94,254                     // vdivps        %ymm14,%ymm15,%ymm15
  .byte  196,65,36,92,232                    // vsubps        %ymm8,%ymm11,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,20,94,238                    // vdivps        %ymm14,%ymm13,%ymm13
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,194,228,2                 // vcmpleps      %ymm12,%ymm14,%ymm12
  .byte  196,65,60,88,255                    // vaddps        %ymm15,%ymm8,%ymm15
  .byte  196,67,5,74,250,192                 // vblendvps     %ymm12,%ymm10,%ymm15,%ymm15
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,60,88,237                    // vaddps        %ymm13,%ymm8,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  196,195,125,74,201,192              // vblendvps     %ymm12,%ymm9,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,202                    // vmaxps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,92,208                   // vsubps        %ymm8,%ymm1,%ymm10
  .byte  196,65,28,92,232                    // vsubps        %ymm8,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,193,1                // vcmpltps      %ymm9,%ymm12,%ymm0
  .byte  196,65,52,92,200                    // vsubps        %ymm8,%ymm9,%ymm9
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,4,92,208                     // vsubps        %ymm8,%ymm15,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,67,5,74,210,0                   // vblendvps     %ymm0,%ymm10,%ymm15,%ymm10
  .byte  196,65,36,92,248                    // vsubps        %ymm8,%ymm11,%ymm15
  .byte  196,65,20,89,239                    // vmulps        %ymm15,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,193,116,95,206                  // vmaxps        %ymm14,%ymm1,%ymm1
  .byte  196,65,44,95,198                    // vmaxps        %ymm14,%ymm10,%ymm8
  .byte  196,65,124,95,206                   // vmaxps        %ymm14,%ymm0,%ymm9
  .byte  196,226,125,24,5,172,52,0,0         // vbroadcastss  0x34ac(%rip),%ymm0        # 4694 <_sk_callback_hsw+0x1cb>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,193                      // vaddps        %ymm1,%ymm2,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,200                  // vaddps        %ymm8,%ymm1,%ymm1
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,209                   // vaddps        %ymm9,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_0_hsw
.globl _sk_clamp_0_hsw
FUNCTION(_sk_clamp_0_hsw)
_sk_clamp_0_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_hsw
.globl _sk_clamp_1_hsw
FUNCTION(_sk_clamp_1_hsw)
_sk_clamp_1_hsw:
  .byte  196,98,125,24,5,72,52,0,0           // vbroadcastss  0x3448(%rip),%ymm8        # 4698 <_sk_callback_hsw+0x1cf>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_hsw
.globl _sk_clamp_a_hsw
FUNCTION(_sk_clamp_a_hsw)
_sk_clamp_a_hsw:
  .byte  196,98,125,24,5,43,52,0,0           // vbroadcastss  0x342b(%rip),%ymm8        # 469c <_sk_callback_hsw+0x1d3>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_hsw
.globl _sk_set_rgb_hsw
FUNCTION(_sk_set_rgb_hsw)
_sk_set_rgb_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_hsw
.globl _sk_swap_rb_hsw
FUNCTION(_sk_swap_rb_hsw)
_sk_swap_rb_hsw:
  .byte  197,124,40,192                      // vmovaps       %ymm0,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,194                      // vmovaps       %ymm2,%ymm0
  .byte  197,124,41,194                      // vmovaps       %ymm8,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_hsw
.globl _sk_swap_hsw
FUNCTION(_sk_swap_hsw)
_sk_swap_hsw:
  .byte  197,124,40,195                      // vmovaps       %ymm3,%ymm8
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,40,209                      // vmovaps       %ymm1,%ymm10
  .byte  197,124,40,216                      // vmovaps       %ymm0,%ymm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  197,124,41,220                      // vmovaps       %ymm11,%ymm4
  .byte  197,124,41,213                      // vmovaps       %ymm10,%ymm5
  .byte  197,124,41,206                      // vmovaps       %ymm9,%ymm6
  .byte  197,124,41,199                      // vmovaps       %ymm8,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_hsw
.globl _sk_move_src_dst_hsw
FUNCTION(_sk_move_src_dst_hsw)
_sk_move_src_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,242                      // vmovaps       %ymm2,%ymm6
  .byte  197,252,40,251                      // vmovaps       %ymm3,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_hsw
.globl _sk_move_dst_src_hsw
FUNCTION(_sk_move_dst_src_hsw)
_sk_move_dst_src_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_hsw
.globl _sk_premul_hsw
FUNCTION(_sk_premul_hsw)
_sk_premul_hsw:
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_hsw
.globl _sk_unpremul_hsw
FUNCTION(_sk_unpremul_hsw)
_sk_unpremul_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,100,194,200,0                // vcmpeqps      %ymm8,%ymm3,%ymm9
  .byte  196,98,125,24,21,115,51,0,0         // vbroadcastss  0x3373(%rip),%ymm10        # 46a0 <_sk_callback_hsw+0x1d7>
  .byte  197,44,94,211                       // vdivps        %ymm3,%ymm10,%ymm10
  .byte  196,67,45,74,192,144                // vblendvps     %ymm9,%ymm8,%ymm10,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_hsw
.globl _sk_from_srgb_hsw
FUNCTION(_sk_from_srgb_hsw)
_sk_from_srgb_hsw:
  .byte  196,98,125,24,5,84,51,0,0           // vbroadcastss  0x3354(%rip),%ymm8        # 46a4 <_sk_callback_hsw+0x1db>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  197,124,89,208                      // vmulps        %ymm0,%ymm0,%ymm10
  .byte  196,98,125,24,29,70,51,0,0          // vbroadcastss  0x3346(%rip),%ymm11        # 46a8 <_sk_callback_hsw+0x1df>
  .byte  196,98,125,24,37,65,51,0,0          // vbroadcastss  0x3341(%rip),%ymm12        # 46ac <_sk_callback_hsw+0x1e3>
  .byte  196,65,124,40,236                   // vmovaps       %ymm12,%ymm13
  .byte  196,66,125,168,235                  // vfmadd213ps   %ymm11,%ymm0,%ymm13
  .byte  196,98,125,24,53,50,51,0,0          // vbroadcastss  0x3332(%rip),%ymm14        # 46b0 <_sk_callback_hsw+0x1e7>
  .byte  196,66,45,168,238                   // vfmadd213ps   %ymm14,%ymm10,%ymm13
  .byte  196,98,125,24,21,40,51,0,0          // vbroadcastss  0x3328(%rip),%ymm10        # 46b4 <_sk_callback_hsw+0x1eb>
  .byte  196,193,124,194,194,1               // vcmpltps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,193,0                 // vblendvps     %ymm0,%ymm9,%ymm13,%ymm0
  .byte  196,65,116,89,200                   // vmulps        %ymm8,%ymm1,%ymm9
  .byte  197,116,89,233                      // vmulps        %ymm1,%ymm1,%ymm13
  .byte  196,65,124,40,252                   // vmovaps       %ymm12,%ymm15
  .byte  196,66,117,168,251                  // vfmadd213ps   %ymm11,%ymm1,%ymm15
  .byte  196,66,21,168,254                   // vfmadd213ps   %ymm14,%ymm13,%ymm15
  .byte  196,193,116,194,202,1               // vcmpltps      %ymm10,%ymm1,%ymm1
  .byte  196,195,5,74,201,16                 // vblendvps     %ymm1,%ymm9,%ymm15,%ymm1
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  197,108,89,202                      // vmulps        %ymm2,%ymm2,%ymm9
  .byte  196,66,109,168,227                  // vfmadd213ps   %ymm11,%ymm2,%ymm12
  .byte  196,66,53,168,230                   // vfmadd213ps   %ymm14,%ymm9,%ymm12
  .byte  196,193,108,194,210,1               // vcmpltps      %ymm10,%ymm2,%ymm2
  .byte  196,195,29,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm12,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_hsw
.globl _sk_to_srgb_hsw
FUNCTION(_sk_to_srgb_hsw)
_sk_to_srgb_hsw:
  .byte  197,124,82,192                      // vrsqrtps      %ymm0,%ymm8
  .byte  196,65,124,83,200                   // vrcpps        %ymm8,%ymm9
  .byte  196,65,124,82,208                   // vrsqrtps      %ymm8,%ymm10
  .byte  196,98,125,24,5,194,50,0,0          // vbroadcastss  0x32c2(%rip),%ymm8        # 46b8 <_sk_callback_hsw+0x1ef>
  .byte  196,65,124,89,216                   // vmulps        %ymm8,%ymm0,%ymm11
  .byte  196,98,125,24,37,184,50,0,0         // vbroadcastss  0x32b8(%rip),%ymm12        # 46bc <_sk_callback_hsw+0x1f3>
  .byte  196,98,125,24,45,179,50,0,0         // vbroadcastss  0x32b3(%rip),%ymm13        # 46c0 <_sk_callback_hsw+0x1f7>
  .byte  196,66,21,168,204                   // vfmadd213ps   %ymm12,%ymm13,%ymm9
  .byte  196,98,125,24,53,169,50,0,0         // vbroadcastss  0x32a9(%rip),%ymm14        # 46c4 <_sk_callback_hsw+0x1fb>
  .byte  196,66,13,184,202                   // vfmadd231ps   %ymm10,%ymm14,%ymm9
  .byte  196,98,125,24,21,159,50,0,0         // vbroadcastss  0x329f(%rip),%ymm10        # 46c8 <_sk_callback_hsw+0x1ff>
  .byte  196,65,44,93,201                    // vminps        %ymm9,%ymm10,%ymm9
  .byte  196,98,125,24,61,149,50,0,0         // vbroadcastss  0x3295(%rip),%ymm15        # 46cc <_sk_callback_hsw+0x203>
  .byte  196,193,124,194,199,1               // vcmpltps      %ymm15,%ymm0,%ymm0
  .byte  196,195,53,74,195,0                 // vblendvps     %ymm0,%ymm11,%ymm9,%ymm0
  .byte  197,124,82,201                      // vrsqrtps      %ymm1,%ymm9
  .byte  196,65,124,83,217                   // vrcpps        %ymm9,%ymm11
  .byte  196,65,124,82,201                   // vrsqrtps      %ymm9,%ymm9
  .byte  196,66,21,168,220                   // vfmadd213ps   %ymm12,%ymm13,%ymm11
  .byte  196,66,13,184,217                   // vfmadd231ps   %ymm9,%ymm14,%ymm11
  .byte  196,65,116,89,200                   // vmulps        %ymm8,%ymm1,%ymm9
  .byte  196,65,44,93,219                    // vminps        %ymm11,%ymm10,%ymm11
  .byte  196,193,116,194,207,1               // vcmpltps      %ymm15,%ymm1,%ymm1
  .byte  196,195,37,74,201,16                // vblendvps     %ymm1,%ymm9,%ymm11,%ymm1
  .byte  197,124,82,202                      // vrsqrtps      %ymm2,%ymm9
  .byte  196,65,124,83,217                   // vrcpps        %ymm9,%ymm11
  .byte  196,66,21,168,220                   // vfmadd213ps   %ymm12,%ymm13,%ymm11
  .byte  196,65,124,82,201                   // vrsqrtps      %ymm9,%ymm9
  .byte  196,66,13,184,217                   // vfmadd231ps   %ymm9,%ymm14,%ymm11
  .byte  196,65,44,93,203                    // vminps        %ymm11,%ymm10,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,193,108,194,215,1               // vcmpltps      %ymm15,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_hsw
.globl _sk_rgb_to_hsl_hsw
FUNCTION(_sk_rgb_to_hsl_hsw)
_sk_rgb_to_hsl_hsw:
  .byte  197,124,95,193                      // vmaxps        %ymm1,%ymm0,%ymm8
  .byte  197,60,95,194                       // vmaxps        %ymm2,%ymm8,%ymm8
  .byte  197,124,93,201                      // vminps        %ymm1,%ymm0,%ymm9
  .byte  197,52,93,202                       // vminps        %ymm2,%ymm9,%ymm9
  .byte  196,65,60,92,209                    // vsubps        %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,29,15,50,0,0          // vbroadcastss  0x320f(%rip),%ymm11        # 46d0 <_sk_callback_hsw+0x207>
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  197,116,92,226                      // vsubps        %ymm2,%ymm1,%ymm12
  .byte  197,116,194,234,1                   // vcmpltps      %ymm2,%ymm1,%ymm13
  .byte  196,98,125,24,53,252,49,0,0         // vbroadcastss  0x31fc(%rip),%ymm14        # 46d4 <_sk_callback_hsw+0x20b>
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,67,5,74,238,208                 // vblendvps     %ymm13,%ymm14,%ymm15,%ymm13
  .byte  196,66,37,168,229                   // vfmadd213ps   %ymm13,%ymm11,%ymm12
  .byte  197,236,92,208                      // vsubps        %ymm0,%ymm2,%ymm2
  .byte  197,124,92,233                      // vsubps        %ymm1,%ymm0,%ymm13
  .byte  196,98,125,24,53,227,49,0,0         // vbroadcastss  0x31e3(%rip),%ymm14        # 46dc <_sk_callback_hsw+0x213>
  .byte  196,66,37,168,238                   // vfmadd213ps   %ymm14,%ymm11,%ymm13
  .byte  196,98,125,24,53,209,49,0,0         // vbroadcastss  0x31d1(%rip),%ymm14        # 46d8 <_sk_callback_hsw+0x20f>
  .byte  196,194,37,168,214                  // vfmadd213ps   %ymm14,%ymm11,%ymm2
  .byte  197,188,194,201,0                   // vcmpeqps      %ymm1,%ymm8,%ymm1
  .byte  196,227,21,74,202,16                // vblendvps     %ymm1,%ymm2,%ymm13,%ymm1
  .byte  197,188,194,192,0                   // vcmpeqps      %ymm0,%ymm8,%ymm0
  .byte  196,195,117,74,196,0                // vblendvps     %ymm0,%ymm12,%ymm1,%ymm0
  .byte  196,193,60,88,201                   // vaddps        %ymm9,%ymm8,%ymm1
  .byte  196,98,125,24,29,180,49,0,0         // vbroadcastss  0x31b4(%rip),%ymm11        # 46e4 <_sk_callback_hsw+0x21b>
  .byte  196,193,116,89,211                  // vmulps        %ymm11,%ymm1,%ymm2
  .byte  197,36,194,218,1                    // vcmpltps      %ymm2,%ymm11,%ymm11
  .byte  196,65,12,92,224                    // vsubps        %ymm8,%ymm14,%ymm12
  .byte  196,65,28,92,225                    // vsubps        %ymm9,%ymm12,%ymm12
  .byte  196,195,117,74,204,176              // vblendvps     %ymm11,%ymm12,%ymm1,%ymm1
  .byte  196,65,60,194,193,0                 // vcmpeqps      %ymm9,%ymm8,%ymm8
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  196,195,125,74,199,128              // vblendvps     %ymm8,%ymm15,%ymm0,%ymm0
  .byte  196,195,117,74,207,128              // vblendvps     %ymm8,%ymm15,%ymm1,%ymm1
  .byte  196,98,125,24,5,119,49,0,0          // vbroadcastss  0x3177(%rip),%ymm8        # 46e0 <_sk_callback_hsw+0x217>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_hsw
.globl _sk_hsl_to_rgb_hsw
FUNCTION(_sk_hsl_to_rgb_hsw)
_sk_hsl_to_rgb_hsw:
  .byte  72,131,236,56                       // sub           $0x38,%rsp
  .byte  197,252,17,60,36                    // vmovups       %ymm7,(%rsp)
  .byte  197,252,17,116,36,224               // vmovups       %ymm6,-0x20(%rsp)
  .byte  197,252,17,108,36,192               // vmovups       %ymm5,-0x40(%rsp)
  .byte  197,252,17,100,36,160               // vmovups       %ymm4,-0x60(%rsp)
  .byte  197,252,17,92,36,128                // vmovups       %ymm3,-0x80(%rsp)
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  196,98,125,24,5,68,49,0,0           // vbroadcastss  0x3144(%rip),%ymm8        # 46e8 <_sk_callback_hsw+0x21f>
  .byte  197,60,194,202,2                    // vcmpleps      %ymm2,%ymm8,%ymm9
  .byte  197,84,89,210                       // vmulps        %ymm2,%ymm5,%ymm10
  .byte  196,65,84,92,218                    // vsubps        %ymm10,%ymm5,%ymm11
  .byte  196,67,45,74,203,144                // vblendvps     %ymm9,%ymm11,%ymm10,%ymm9
  .byte  197,52,88,210                       // vaddps        %ymm2,%ymm9,%ymm10
  .byte  196,98,125,24,13,39,49,0,0          // vbroadcastss  0x3127(%rip),%ymm9        # 46ec <_sk_callback_hsw+0x223>
  .byte  196,66,109,170,202                  // vfmsub213ps   %ymm10,%ymm2,%ymm9
  .byte  196,98,125,24,29,29,49,0,0          // vbroadcastss  0x311d(%rip),%ymm11        # 46f0 <_sk_callback_hsw+0x227>
  .byte  196,65,92,88,219                    // vaddps        %ymm11,%ymm4,%ymm11
  .byte  196,67,125,8,227,1                  // vroundps      $0x1,%ymm11,%ymm12
  .byte  196,65,36,92,252                    // vsubps        %ymm12,%ymm11,%ymm15
  .byte  196,65,44,92,217                    // vsubps        %ymm9,%ymm10,%ymm11
  .byte  196,98,125,24,45,7,49,0,0           // vbroadcastss  0x3107(%rip),%ymm13        # 46f8 <_sk_callback_hsw+0x22f>
  .byte  196,193,4,89,197                    // vmulps        %ymm13,%ymm15,%ymm0
  .byte  196,98,125,24,53,253,48,0,0         // vbroadcastss  0x30fd(%rip),%ymm14        # 46fc <_sk_callback_hsw+0x233>
  .byte  197,12,92,224                       // vsubps        %ymm0,%ymm14,%ymm12
  .byte  196,66,37,168,225                   // vfmadd213ps   %ymm9,%ymm11,%ymm12
  .byte  196,226,125,24,29,227,48,0,0        // vbroadcastss  0x30e3(%rip),%ymm3        # 46f4 <_sk_callback_hsw+0x22b>
  .byte  196,193,100,194,255,2               // vcmpleps      %ymm15,%ymm3,%ymm7
  .byte  196,195,29,74,249,112               // vblendvps     %ymm7,%ymm9,%ymm12,%ymm7
  .byte  196,65,60,194,231,2                 // vcmpleps      %ymm15,%ymm8,%ymm12
  .byte  196,227,45,74,255,192               // vblendvps     %ymm12,%ymm7,%ymm10,%ymm7
  .byte  196,98,125,24,37,206,48,0,0         // vbroadcastss  0x30ce(%rip),%ymm12        # 4700 <_sk_callback_hsw+0x237>
  .byte  196,65,28,194,255,2                 // vcmpleps      %ymm15,%ymm12,%ymm15
  .byte  196,194,37,168,193                  // vfmadd213ps   %ymm9,%ymm11,%ymm0
  .byte  196,99,125,74,255,240               // vblendvps     %ymm15,%ymm7,%ymm0,%ymm15
  .byte  196,227,125,8,196,1                 // vroundps      $0x1,%ymm4,%ymm0
  .byte  197,220,92,192                      // vsubps        %ymm0,%ymm4,%ymm0
  .byte  196,193,124,89,253                  // vmulps        %ymm13,%ymm0,%ymm7
  .byte  197,140,92,207                      // vsubps        %ymm7,%ymm14,%ymm1
  .byte  196,194,37,168,201                  // vfmadd213ps   %ymm9,%ymm11,%ymm1
  .byte  197,228,194,240,2                   // vcmpleps      %ymm0,%ymm3,%ymm6
  .byte  196,195,117,74,201,96               // vblendvps     %ymm6,%ymm9,%ymm1,%ymm1
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,201,96                // vblendvps     %ymm6,%ymm1,%ymm10,%ymm1
  .byte  197,156,194,192,2                   // vcmpleps      %ymm0,%ymm12,%ymm0
  .byte  196,194,37,168,249                  // vfmadd213ps   %ymm9,%ymm11,%ymm7
  .byte  196,227,69,74,201,0                 // vblendvps     %ymm0,%ymm1,%ymm7,%ymm1
  .byte  196,226,125,24,5,122,48,0,0         // vbroadcastss  0x307a(%rip),%ymm0        # 4704 <_sk_callback_hsw+0x23b>
  .byte  197,220,88,192                      // vaddps        %ymm0,%ymm4,%ymm0
  .byte  196,227,125,8,224,1                 // vroundps      $0x1,%ymm0,%ymm4
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  197,228,194,216,2                   // vcmpleps      %ymm0,%ymm3,%ymm3
  .byte  196,193,124,89,229                  // vmulps        %ymm13,%ymm0,%ymm4
  .byte  197,140,92,244                      // vsubps        %ymm4,%ymm14,%ymm6
  .byte  196,194,37,168,241                  // vfmadd213ps   %ymm9,%ymm11,%ymm6
  .byte  196,195,77,74,217,48                // vblendvps     %ymm3,%ymm9,%ymm6,%ymm3
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,219,96                // vblendvps     %ymm6,%ymm3,%ymm10,%ymm3
  .byte  196,98,37,184,204                   // vfmadd231ps   %ymm4,%ymm11,%ymm9
  .byte  197,156,194,192,2                   // vcmpleps      %ymm0,%ymm12,%ymm0
  .byte  196,227,53,74,219,0                 // vblendvps     %ymm0,%ymm3,%ymm9,%ymm3
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,212,194,224,0                   // vcmpeqps      %ymm0,%ymm5,%ymm4
  .byte  196,227,5,74,194,64                 // vblendvps     %ymm4,%ymm2,%ymm15,%ymm0
  .byte  196,227,117,74,202,64               // vblendvps     %ymm4,%ymm2,%ymm1,%ymm1
  .byte  196,227,101,74,210,64               // vblendvps     %ymm4,%ymm2,%ymm3,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,92,36,128                // vmovups       -0x80(%rsp),%ymm3
  .byte  197,252,16,100,36,160               // vmovups       -0x60(%rsp),%ymm4
  .byte  197,252,16,108,36,192               // vmovups       -0x40(%rsp),%ymm5
  .byte  197,252,16,116,36,224               // vmovups       -0x20(%rsp),%ymm6
  .byte  197,252,16,60,36                    // vmovups       (%rsp),%ymm7
  .byte  72,131,196,56                       // add           $0x38,%rsp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_hsw
.globl _sk_scale_1_float_hsw
FUNCTION(_sk_scale_1_float_hsw)
_sk_scale_1_float_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_hsw
.globl _sk_scale_u8_hsw
FUNCTION(_sk_scale_u8_hsw)
_sk_scale_u8_hsw:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,1,248                            // add           %rdi,%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,51                              // jne           176a <_sk_scale_u8_hsw+0x43>
  .byte  197,122,126,0                       // vmovq         (%rax),%xmm8
  .byte  196,66,125,49,192                   // vpmovzxbd     %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,186,47,0,0         // vbroadcastss  0x2fba(%rip),%ymm9        # 4708 <_sk_callback_hsw+0x23f>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  49,201                              // xor           %ecx,%ecx
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  69,49,201                           // xor           %r9d,%r9d
  .byte  68,15,182,24                        // movzbl        (%rax),%r11d
  .byte  72,255,192                          // inc           %rax
  .byte  73,211,227                          // shl           %cl,%r11
  .byte  77,9,217                            // or            %r11,%r9
  .byte  72,131,193,8                        // add           $0x8,%rcx
  .byte  73,255,202                          // dec           %r10
  .byte  117,234                             // jne           1772 <_sk_scale_u8_hsw+0x4b>
  .byte  196,65,249,110,193                  // vmovq         %r9,%xmm8
  .byte  235,172                             // jmp           173b <_sk_scale_u8_hsw+0x14>

HIDDEN _sk_lerp_1_float_hsw
.globl _sk_lerp_1_float_hsw
FUNCTION(_sk_lerp_1_float_hsw)
_sk_lerp_1_float_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_hsw
.globl _sk_lerp_u8_hsw
FUNCTION(_sk_lerp_u8_hsw)
_sk_lerp_u8_hsw:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,1,248                            // add           %rdi,%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,71                              // jne           1815 <_sk_lerp_u8_hsw+0x57>
  .byte  197,122,126,0                       // vmovq         (%rax),%xmm8
  .byte  196,66,125,49,192                   // vpmovzxbd     %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,39,47,0,0          // vbroadcastss  0x2f27(%rip),%ymm9        # 470c <_sk_callback_hsw+0x243>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  49,201                              // xor           %ecx,%ecx
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  69,49,201                           // xor           %r9d,%r9d
  .byte  68,15,182,24                        // movzbl        (%rax),%r11d
  .byte  72,255,192                          // inc           %rax
  .byte  73,211,227                          // shl           %cl,%r11
  .byte  77,9,217                            // or            %r11,%r9
  .byte  72,131,193,8                        // add           $0x8,%rcx
  .byte  73,255,202                          // dec           %r10
  .byte  117,234                             // jne           181d <_sk_lerp_u8_hsw+0x5f>
  .byte  196,65,249,110,193                  // vmovq         %r9,%xmm8
  .byte  235,152                             // jmp           17d2 <_sk_lerp_u8_hsw+0x14>

HIDDEN _sk_lerp_565_hsw
.globl _sk_lerp_565_hsw
FUNCTION(_sk_lerp_565_hsw)
_sk_lerp_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,169,0,0,0                    // jne           18f1 <_sk_lerp_565_hsw+0xb7>
  .byte  196,65,122,111,4,122                // vmovdqu       (%r10,%rdi,2),%xmm8
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  196,98,125,88,13,180,46,0,0         // vpbroadcastd  0x2eb4(%rip),%ymm9        # 4710 <_sk_callback_hsw+0x247>
  .byte  196,65,61,219,201                   // vpand         %ymm9,%ymm8,%ymm9
  .byte  196,65,124,91,201                   // vcvtdq2ps     %ymm9,%ymm9
  .byte  196,98,125,24,21,165,46,0,0         // vbroadcastss  0x2ea5(%rip),%ymm10        # 4714 <_sk_callback_hsw+0x24b>
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,88,21,155,46,0,0         // vpbroadcastd  0x2e9b(%rip),%ymm10        # 4718 <_sk_callback_hsw+0x24f>
  .byte  196,65,61,219,210                   // vpand         %ymm10,%ymm8,%ymm10
  .byte  196,65,124,91,210                   // vcvtdq2ps     %ymm10,%ymm10
  .byte  196,98,125,24,29,140,46,0,0         // vbroadcastss  0x2e8c(%rip),%ymm11        # 471c <_sk_callback_hsw+0x253>
  .byte  196,65,44,89,211                    // vmulps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,88,29,130,46,0,0         // vpbroadcastd  0x2e82(%rip),%ymm11        # 4720 <_sk_callback_hsw+0x257>
  .byte  196,65,61,219,195                   // vpand         %ymm11,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,29,115,46,0,0         // vbroadcastss  0x2e73(%rip),%ymm11        # 4724 <_sk_callback_hsw+0x25b>
  .byte  196,65,60,89,195                    // vmulps        %ymm11,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,53,168,196                  // vfmadd213ps   %ymm4,%ymm9,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,45,168,205                  // vfmadd213ps   %ymm5,%ymm10,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,98,101,168,207                  // vfmadd213ps   %ymm7,%ymm3,%ymm9
  .byte  196,98,101,168,215                  // vfmadd213ps   %ymm7,%ymm3,%ymm10
  .byte  196,98,101,168,199                  // vfmadd213ps   %ymm7,%ymm3,%ymm8
  .byte  196,193,44,95,216                   // vmaxps        %ymm8,%ymm10,%ymm3
  .byte  197,180,95,219                      // vmaxps        %ymm3,%ymm9,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  15,135,68,255,255,255               // ja            184e <_sk_lerp_565_hsw+0x14>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,75,0,0,0                  // lea           0x4b(%rip),%r9        # 1960 <_sk_lerp_565_hsw+0x126>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,65,57,196,68,122,12,6           // vpinsrw       $0x6,0xc(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,10,5           // vpinsrw       $0x5,0xa(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,8,4            // vpinsrw       $0x4,0x8(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,6,3            // vpinsrw       $0x3,0x6(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,4,2            // vpinsrw       $0x2,0x4(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,2,1            // vpinsrw       $0x1,0x2(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,4,122,0               // vpinsrw       $0x0,(%r10,%rdi,2),%xmm8,%xmm8
  .byte  233,239,254,255,255                 // jmpq          184e <_sk_lerp_565_hsw+0x14>
  .byte  144                                 // nop
  .byte  243,255                             // repz          (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  235,255                             // jmp           1965 <_sk_lerp_565_hsw+0x12b>
  .byte  255                                 // (bad)
  .byte  255,227                             // jmpq          *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  219,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,203                             // dec           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190                                 // .byte         0xbe
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_tables_hsw
.globl _sk_load_tables_hsw
FUNCTION(_sk_load_tables_hsw)
_sk_load_tables_hsw:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,12,189,0,0,0,0               // lea           0x0(,%rdi,4),%r9
  .byte  76,3,8                              // add           (%rax),%r9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,105                             // jne           19fa <_sk_load_tables_hsw+0x7e>
  .byte  196,193,126,111,25                  // vmovdqu       (%r9),%ymm3
  .byte  197,229,219,13,66,48,0,0            // vpand         0x3042(%rip),%ymm3,%ymm1        # 49e0 <_sk_callback_hsw+0x517>
  .byte  196,65,61,118,192                   // vpcmpeqd      %ymm8,%ymm8,%ymm8
  .byte  72,139,72,8                         // mov           0x8(%rax),%rcx
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,226,109,146,4,137               // vgatherdps    %ymm2,(%rcx,%ymm1,4),%ymm0
  .byte  196,226,101,0,21,66,48,0,0          // vpshufb       0x3042(%rip),%ymm3,%ymm2        # 4a00 <_sk_callback_hsw+0x537>
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,194,53,146,12,145               // vgatherdps    %ymm9,(%r9,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,98,101,0,13,74,48,0,0           // vpshufb       0x304a(%rip),%ymm3,%ymm9        # 4a20 <_sk_callback_hsw+0x557>
  .byte  196,162,61,146,20,136               // vgatherdps    %ymm8,(%rax,%ymm9,4),%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,58,45,0,0           // vbroadcastss  0x2d3a(%rip),%ymm8        # 4728 <_sk_callback_hsw+0x25f>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  73,199,194,255,255,255,255          // mov           $0xffffffffffffffff,%r10
  .byte  73,211,234                          // shr           %cl,%r10
  .byte  196,193,249,110,194                 // vmovq         %r10,%xmm0
  .byte  196,226,125,33,192                  // vpmovsxbd     %xmm0,%ymm0
  .byte  196,194,125,140,25                  // vpmaskmovd    (%r9),%ymm0,%ymm3
  .byte  233,115,255,255,255                 // jmpq          1996 <_sk_load_tables_hsw+0x1a>

HIDDEN _sk_load_tables_u16_be_hsw
.globl _sk_load_tables_u16_be_hsw
FUNCTION(_sk_load_tables_u16_be_hsw)
_sk_load_tables_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  76,141,12,189,0,0,0,0               // lea           0x0(,%rdi,4),%r9
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,201,0,0,0                    // jne           1b02 <_sk_load_tables_u16_be_hsw+0xdf>
  .byte  196,1,121,16,4,72                   // vmovupd       (%r8,%r9,2),%xmm8
  .byte  196,129,121,16,84,72,16             // vmovupd       0x10(%r8,%r9,2),%xmm2
  .byte  196,129,121,16,92,72,32             // vmovupd       0x20(%r8,%r9,2),%xmm3
  .byte  196,1,122,111,76,72,48              // vmovdqu       0x30(%r8,%r9,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,195                      // vpunpcklwd    %xmm3,%xmm1,%xmm0
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,200                     // vpunpcklqdq   %xmm0,%xmm8,%xmm1
  .byte  197,185,109,208                     // vpunpckhqdq   %xmm0,%xmm8,%xmm2
  .byte  197,49,108,195                      // vpunpcklqdq   %xmm3,%xmm9,%xmm8
  .byte  197,121,111,21,214,48,0,0           // vmovdqa       0x30d6(%rip),%xmm10        # 4b60 <_sk_callback_hsw+0x697>
  .byte  196,193,113,219,194                 // vpand         %xmm10,%xmm1,%xmm0
  .byte  196,226,125,51,200                  // vpmovzxwd     %xmm0,%ymm1
  .byte  196,65,37,118,219                   // vpcmpeqd      %ymm11,%ymm11,%ymm11
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,65,29,118,228                   // vpcmpeqd      %ymm12,%ymm12,%ymm12
  .byte  196,194,29,146,4,136                // vgatherdps    %ymm12,(%r8,%ymm1,4),%ymm0
  .byte  196,193,105,219,202                 // vpand         %xmm10,%xmm2,%xmm1
  .byte  196,226,125,51,209                  // vpmovzxwd     %xmm1,%ymm2
  .byte  196,65,29,118,228                   // vpcmpeqd      %ymm12,%ymm12,%ymm12
  .byte  196,194,29,146,12,145               // vgatherdps    %ymm12,(%r9,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,57,219,210                  // vpand         %xmm10,%xmm8,%xmm2
  .byte  196,98,125,51,194                   // vpmovzxwd     %xmm2,%ymm8
  .byte  196,162,37,146,20,128               // vgatherdps    %ymm11,(%rax,%ymm8,4),%ymm2
  .byte  197,177,109,219                     // vpunpckhqdq   %xmm3,%xmm9,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,226,125,51,219                  // vpmovzxwd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,51,44,0,0           // vbroadcastss  0x2c33(%rip),%ymm8        # 472c <_sk_callback_hsw+0x263>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,1,123,16,4,72                   // vmovsd        (%r8,%r9,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,85                              // je            1b68 <_sk_load_tables_u16_be_hsw+0x145>
  .byte  196,1,57,22,68,72,8                 // vmovhpd       0x8(%r8,%r9,2),%xmm8,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,72                              // jb            1b68 <_sk_load_tables_u16_be_hsw+0x145>
  .byte  196,129,123,16,84,72,16             // vmovsd        0x10(%r8,%r9,2),%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  116,72                              // je            1b75 <_sk_load_tables_u16_be_hsw+0x152>
  .byte  196,129,105,22,84,72,24             // vmovhpd       0x18(%r8,%r9,2),%xmm2,%xmm2
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,59                              // jb            1b75 <_sk_load_tables_u16_be_hsw+0x152>
  .byte  196,129,123,16,92,72,32             // vmovsd        0x20(%r8,%r9,2),%xmm3
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  15,132,9,255,255,255                // je            1a54 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  196,129,97,22,92,72,40              // vmovhpd       0x28(%r8,%r9,2),%xmm3,%xmm3
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  15,130,248,254,255,255              // jb            1a54 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  196,1,122,126,76,72,48              // vmovq         0x30(%r8,%r9,2),%xmm9
  .byte  233,236,254,255,255                 // jmpq          1a54 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,223,254,255,255                 // jmpq          1a54 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,214,254,255,255                 // jmpq          1a54 <_sk_load_tables_u16_be_hsw+0x31>

HIDDEN _sk_load_tables_rgb_u16_be_hsw
.globl _sk_load_tables_rgb_u16_be_hsw
FUNCTION(_sk_load_tables_rgb_u16_be_hsw)
_sk_load_tables_rgb_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  76,141,12,127                       // lea           (%rdi,%rdi,2),%r9
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,193,0,0,0                    // jne           1c51 <_sk_load_tables_rgb_u16_be_hsw+0xd3>
  .byte  196,129,122,111,4,72                // vmovdqu       (%r8,%r9,2),%xmm0
  .byte  196,129,122,111,84,72,12            // vmovdqu       0xc(%r8,%r9,2),%xmm2
  .byte  196,129,122,111,76,72,24            // vmovdqu       0x18(%r8,%r9,2),%xmm1
  .byte  196,129,122,111,92,72,32            // vmovdqu       0x20(%r8,%r9,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,249,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm0
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,203                     // vpunpckhwd    %xmm3,%xmm1,%xmm1
  .byte  197,185,108,218                     // vpunpcklqdq   %xmm2,%xmm8,%xmm3
  .byte  197,185,109,210                     // vpunpckhqdq   %xmm2,%xmm8,%xmm2
  .byte  197,121,108,193                     // vpunpcklqdq   %xmm1,%xmm0,%xmm8
  .byte  197,121,111,13,118,47,0,0           // vmovdqa       0x2f76(%rip),%xmm9        # 4b70 <_sk_callback_hsw+0x6a7>
  .byte  196,193,97,219,193                  // vpand         %xmm9,%xmm3,%xmm0
  .byte  196,226,125,51,200                  // vpmovzxwd     %xmm0,%ymm1
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,65,45,118,210                   // vpcmpeqd      %ymm10,%ymm10,%ymm10
  .byte  196,194,45,146,4,136                // vgatherdps    %ymm10,(%r8,%ymm1,4),%ymm0
  .byte  196,193,105,219,201                 // vpand         %xmm9,%xmm2,%xmm1
  .byte  196,226,125,51,209                  // vpmovzxwd     %xmm1,%ymm2
  .byte  196,65,45,118,210                   // vpcmpeqd      %ymm10,%ymm10,%ymm10
  .byte  196,194,45,146,12,145               // vgatherdps    %ymm10,(%r9,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,57,219,209                  // vpand         %xmm9,%xmm8,%xmm2
  .byte  196,98,125,51,194                   // vpmovzxwd     %xmm2,%ymm8
  .byte  196,162,101,146,20,128              // vgatherdps    %ymm3,(%rax,%ymm8,4),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,225,42,0,0        // vbroadcastss  0x2ae1(%rip),%ymm3        # 4730 <_sk_callback_hsw+0x267>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,129,121,110,4,72                // vmovd         (%r8,%r9,2),%xmm0
  .byte  196,129,121,196,68,72,4,2           // vpinsrw       $0x2,0x4(%r8,%r9,2),%xmm0,%xmm0
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  117,5                               // jne           1c6a <_sk_load_tables_rgb_u16_be_hsw+0xec>
  .byte  233,90,255,255,255                  // jmpq          1bc4 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,76,72,6             // vmovd         0x6(%r8,%r9,2),%xmm1
  .byte  196,1,113,196,68,72,10,2            // vpinsrw       $0x2,0xa(%r8,%r9,2),%xmm1,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,26                              // jb            1c99 <_sk_load_tables_rgb_u16_be_hsw+0x11b>
  .byte  196,129,121,110,76,72,12            // vmovd         0xc(%r8,%r9,2),%xmm1
  .byte  196,129,113,196,84,72,16,2          // vpinsrw       $0x2,0x10(%r8,%r9,2),%xmm1,%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  117,10                              // jne           1c9e <_sk_load_tables_rgb_u16_be_hsw+0x120>
  .byte  233,43,255,255,255                  // jmpq          1bc4 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,38,255,255,255                  // jmpq          1bc4 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,76,72,18            // vmovd         0x12(%r8,%r9,2),%xmm1
  .byte  196,1,113,196,76,72,22,2            // vpinsrw       $0x2,0x16(%r8,%r9,2),%xmm1,%xmm9
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,26                              // jb            1ccd <_sk_load_tables_rgb_u16_be_hsw+0x14f>
  .byte  196,129,121,110,76,72,24            // vmovd         0x18(%r8,%r9,2),%xmm1
  .byte  196,129,113,196,76,72,28,2          // vpinsrw       $0x2,0x1c(%r8,%r9,2),%xmm1,%xmm1
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  117,10                              // jne           1cd2 <_sk_load_tables_rgb_u16_be_hsw+0x154>
  .byte  233,247,254,255,255                 // jmpq          1bc4 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,242,254,255,255                 // jmpq          1bc4 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,92,72,30            // vmovd         0x1e(%r8,%r9,2),%xmm3
  .byte  196,1,97,196,92,72,34,2             // vpinsrw       $0x2,0x22(%r8,%r9,2),%xmm3,%xmm11
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,20                              // jb            1cfb <_sk_load_tables_rgb_u16_be_hsw+0x17d>
  .byte  196,129,121,110,92,72,36            // vmovd         0x24(%r8,%r9,2),%xmm3
  .byte  196,129,97,196,92,72,40,2           // vpinsrw       $0x2,0x28(%r8,%r9,2),%xmm3,%xmm3
  .byte  233,201,254,255,255                 // jmpq          1bc4 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,196,254,255,255                 // jmpq          1bc4 <_sk_load_tables_rgb_u16_be_hsw+0x46>

HIDDEN _sk_byte_tables_hsw
.globl _sk_byte_tables_hsw
FUNCTION(_sk_byte_tables_hsw)
_sk_byte_tables_hsw:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,31,42,0,0           // vbroadcastss  0x2a1f(%rip),%ymm8        # 4734 <_sk_callback_hsw+0x26b>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,195,249,22,192,1                // vpextrq       $0x1,%xmm0,%r8
  .byte  68,137,197                          // mov           %r8d,%ebp
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,192                 // vmovq         %xmm0,%r8
  .byte  69,137,195                          // mov           %r8d,%r11d
  .byte  77,137,199                          // mov           %r8,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,195,249,22,192,1                // vpextrq       $0x1,%xmm0,%r8
  .byte  69,137,198                          // mov           %r8d,%r14d
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,57,1               // vpinsrb       $0x1,(%r9,%r15,1),%xmm0,%xmm0
  .byte  65,15,182,44,41                     // movzbl        (%r9,%rbp,1),%ebp
  .byte  196,227,121,32,197,2                // vpinsrb       $0x2,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,17                     // movzbl        (%r9,%r10,1),%ebp
  .byte  196,227,121,32,197,3                // vpinsrb       $0x3,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,41                     // movzbl        (%r9,%r13,1),%ebp
  .byte  196,227,121,32,197,4                // vpinsrb       $0x4,%ebp,%xmm0,%xmm0
  .byte  65,15,182,44,25                     // movzbl        (%r9,%rbx,1),%ebp
  .byte  196,227,121,32,197,5                // vpinsrb       $0x5,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,49                     // movzbl        (%r9,%r14,1),%ebp
  .byte  196,227,121,32,197,6                // vpinsrb       $0x6,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,33                     // movzbl        (%r9,%r12,1),%ebp
  .byte  196,227,121,32,197,7                // vpinsrb       $0x7,%ebp,%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,112,41,0,0         // vbroadcastss  0x2970(%rip),%ymm9        # 4738 <_sk_callback_hsw+0x26f>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,227,249,22,205,1                // vpextrq       $0x1,%xmm1,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,203                 // vmovq         %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,57,201,1                // vextracti128  $0x1,%ymm1,%xmm1
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,193,249,126,207                 // vmovq         %xmm1,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,131,121,32,12,16,0              // vpinsrb       $0x0,(%r8,%r10,1),%xmm0,%xmm1
  .byte  196,195,113,32,12,24,1              // vpinsrb       $0x1,(%r8,%rbx,1),%xmm1,%xmm1
  .byte  67,15,182,28,8                      // movzbl        (%r8,%r9,1),%ebx
  .byte  196,227,113,32,203,2                // vpinsrb       $0x2,%ebx,%xmm1,%xmm1
  .byte  65,15,182,44,40                     // movzbl        (%r8,%rbp,1),%ebp
  .byte  196,227,113,32,205,3                // vpinsrb       $0x3,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,32                     // movzbl        (%r8,%r12,1),%ebp
  .byte  196,227,113,32,205,4                // vpinsrb       $0x4,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,56                     // movzbl        (%r8,%r15,1),%ebp
  .byte  196,227,113,32,205,5                // vpinsrb       $0x5,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,48                     // movzbl        (%r8,%r14,1),%ebp
  .byte  196,227,113,32,205,6                // vpinsrb       $0x6,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,24                     // movzbl        (%r8,%r11,1),%ebp
  .byte  196,227,113,32,205,7                // vpinsrb       $0x7,%ebp,%xmm1,%xmm1
  .byte  196,226,125,49,201                  // vpmovzxbd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,227,249,22,213,1                // vpextrq       $0x1,%xmm2,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,211                 // vmovq         %xmm2,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,57,210,1                // vextracti128  $0x1,%ymm2,%xmm2
  .byte  196,195,249,22,211,1                // vpextrq       $0x1,%xmm2,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,193,249,126,215                 // vmovq         %xmm2,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,131,121,32,20,16,0              // vpinsrb       $0x0,(%r8,%r10,1),%xmm0,%xmm2
  .byte  196,195,105,32,20,24,1              // vpinsrb       $0x1,(%r8,%rbx,1),%xmm2,%xmm2
  .byte  67,15,182,28,8                      // movzbl        (%r8,%r9,1),%ebx
  .byte  196,227,105,32,211,2                // vpinsrb       $0x2,%ebx,%xmm2,%xmm2
  .byte  65,15,182,44,40                     // movzbl        (%r8,%rbp,1),%ebp
  .byte  196,227,105,32,213,3                // vpinsrb       $0x3,%ebp,%xmm2,%xmm2
  .byte  67,15,182,44,32                     // movzbl        (%r8,%r12,1),%ebp
  .byte  196,227,105,32,213,4                // vpinsrb       $0x4,%ebp,%xmm2,%xmm2
  .byte  67,15,182,44,56                     // movzbl        (%r8,%r15,1),%ebp
  .byte  196,227,105,32,213,5                // vpinsrb       $0x5,%ebp,%xmm2,%xmm2
  .byte  67,15,182,44,48                     // movzbl        (%r8,%r14,1),%ebp
  .byte  196,227,105,32,213,6                // vpinsrb       $0x6,%ebp,%xmm2,%xmm2
  .byte  67,15,182,44,24                     // movzbl        (%r8,%r11,1),%ebp
  .byte  196,227,105,32,213,7                // vpinsrb       $0x7,%ebp,%xmm2,%xmm2
  .byte  196,226,125,49,210                  // vpmovzxbd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,227,249,22,221,1                // vpextrq       $0x1,%xmm3,%rbp
  .byte  65,137,232                          // mov           %ebp,%r8d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,219                 // vmovq         %xmm3,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,57,219,1                // vextracti128  $0x1,%ymm3,%xmm3
  .byte  196,195,249,22,218,1                // vpextrq       $0x1,%xmm3,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,222                 // vmovq         %xmm3,%r14
  .byte  69,137,247                          // mov           %r14d,%r15d
  .byte  73,193,238,32                       // shr           $0x20,%r14
  .byte  196,163,121,32,28,8,0               // vpinsrb       $0x0,(%rax,%r9,1),%xmm0,%xmm3
  .byte  196,227,97,32,28,24,1               // vpinsrb       $0x1,(%rax,%rbx,1),%xmm3,%xmm3
  .byte  66,15,182,28,0                      // movzbl        (%rax,%r8,1),%ebx
  .byte  196,227,97,32,219,2                 // vpinsrb       $0x2,%ebx,%xmm3,%xmm3
  .byte  15,182,44,40                        // movzbl        (%rax,%rbp,1),%ebp
  .byte  196,227,97,32,221,3                 // vpinsrb       $0x3,%ebp,%xmm3,%xmm3
  .byte  66,15,182,44,56                     // movzbl        (%rax,%r15,1),%ebp
  .byte  196,227,97,32,221,4                 // vpinsrb       $0x4,%ebp,%xmm3,%xmm3
  .byte  66,15,182,44,48                     // movzbl        (%rax,%r14,1),%ebp
  .byte  196,227,97,32,221,5                 // vpinsrb       $0x5,%ebp,%xmm3,%xmm3
  .byte  66,15,182,44,24                     // movzbl        (%rax,%r11,1),%ebp
  .byte  196,227,97,32,221,6                 // vpinsrb       $0x6,%ebp,%xmm3,%xmm3
  .byte  66,15,182,4,16                      // movzbl        (%rax,%r10,1),%eax
  .byte  196,227,97,32,216,7                 // vpinsrb       $0x7,%eax,%xmm3,%xmm3
  .byte  196,226,125,49,219                  // vpmovzxbd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_hsw
.globl _sk_byte_tables_rgb_hsw
FUNCTION(_sk_byte_tables_rgb_hsw)
_sk_byte_tables_rgb_hsw:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,64,24                        // mov           0x18(%rax),%r8d
  .byte  65,255,200                          // dec           %r8d
  .byte  196,65,121,110,192                  // vmovd         %r8d,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,195,249,22,192,1                // vpextrq       $0x1,%xmm0,%r8
  .byte  68,137,197                          // mov           %r8d,%ebp
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,192                 // vmovq         %xmm0,%r8
  .byte  69,137,195                          // mov           %r8d,%r11d
  .byte  77,137,199                          // mov           %r8,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,195,249,22,192,1                // vpextrq       $0x1,%xmm0,%r8
  .byte  69,137,198                          // mov           %r8d,%r14d
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,57,1               // vpinsrb       $0x1,(%r9,%r15,1),%xmm0,%xmm0
  .byte  65,15,182,44,41                     // movzbl        (%r9,%rbp,1),%ebp
  .byte  196,227,121,32,197,2                // vpinsrb       $0x2,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,17                     // movzbl        (%r9,%r10,1),%ebp
  .byte  196,227,121,32,197,3                // vpinsrb       $0x3,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,41                     // movzbl        (%r9,%r13,1),%ebp
  .byte  196,227,121,32,197,4                // vpinsrb       $0x4,%ebp,%xmm0,%xmm0
  .byte  65,15,182,44,25                     // movzbl        (%r9,%rbx,1),%ebp
  .byte  196,227,121,32,197,5                // vpinsrb       $0x5,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,49                     // movzbl        (%r9,%r14,1),%ebp
  .byte  196,227,121,32,197,6                // vpinsrb       $0x6,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,33                     // movzbl        (%r9,%r12,1),%ebp
  .byte  196,227,121,32,197,7                // vpinsrb       $0x7,%ebp,%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,169,38,0,0         // vbroadcastss  0x26a9(%rip),%ymm9        # 473c <_sk_callback_hsw+0x273>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,227,249,22,205,1                // vpextrq       $0x1,%xmm1,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,203                 // vmovq         %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,57,201,1                // vextracti128  $0x1,%ymm1,%xmm1
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,193,249,126,207                 // vmovq         %xmm1,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,131,121,32,12,16,0              // vpinsrb       $0x0,(%r8,%r10,1),%xmm0,%xmm1
  .byte  196,195,113,32,12,24,1              // vpinsrb       $0x1,(%r8,%rbx,1),%xmm1,%xmm1
  .byte  67,15,182,28,8                      // movzbl        (%r8,%r9,1),%ebx
  .byte  196,227,113,32,203,2                // vpinsrb       $0x2,%ebx,%xmm1,%xmm1
  .byte  65,15,182,44,40                     // movzbl        (%r8,%rbp,1),%ebp
  .byte  196,227,113,32,205,3                // vpinsrb       $0x3,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,32                     // movzbl        (%r8,%r12,1),%ebp
  .byte  196,227,113,32,205,4                // vpinsrb       $0x4,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,56                     // movzbl        (%r8,%r15,1),%ebp
  .byte  196,227,113,32,205,5                // vpinsrb       $0x5,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,48                     // movzbl        (%r8,%r14,1),%ebp
  .byte  196,227,113,32,205,6                // vpinsrb       $0x6,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,24                     // movzbl        (%r8,%r11,1),%ebp
  .byte  196,227,113,32,205,7                // vpinsrb       $0x7,%ebp,%xmm1,%xmm1
  .byte  196,226,125,49,201                  // vpmovzxbd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  72,139,64,16                        // mov           0x10(%rax),%rax
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,227,249,22,213,1                // vpextrq       $0x1,%xmm2,%rbp
  .byte  65,137,232                          // mov           %ebp,%r8d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,211                 // vmovq         %xmm2,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,57,210,1                // vextracti128  $0x1,%ymm2,%xmm2
  .byte  196,195,249,22,210,1                // vpextrq       $0x1,%xmm2,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,214                 // vmovq         %xmm2,%r14
  .byte  69,137,247                          // mov           %r14d,%r15d
  .byte  73,193,238,32                       // shr           $0x20,%r14
  .byte  196,163,121,32,20,8,0               // vpinsrb       $0x0,(%rax,%r9,1),%xmm0,%xmm2
  .byte  196,227,105,32,20,24,1              // vpinsrb       $0x1,(%rax,%rbx,1),%xmm2,%xmm2
  .byte  66,15,182,28,0                      // movzbl        (%rax,%r8,1),%ebx
  .byte  196,227,105,32,211,2                // vpinsrb       $0x2,%ebx,%xmm2,%xmm2
  .byte  15,182,44,40                        // movzbl        (%rax,%rbp,1),%ebp
  .byte  196,227,105,32,213,3                // vpinsrb       $0x3,%ebp,%xmm2,%xmm2
  .byte  66,15,182,44,56                     // movzbl        (%rax,%r15,1),%ebp
  .byte  196,227,105,32,213,4                // vpinsrb       $0x4,%ebp,%xmm2,%xmm2
  .byte  66,15,182,44,48                     // movzbl        (%rax,%r14,1),%ebp
  .byte  196,227,105,32,213,5                // vpinsrb       $0x5,%ebp,%xmm2,%xmm2
  .byte  66,15,182,44,24                     // movzbl        (%rax,%r11,1),%ebp
  .byte  196,227,105,32,213,6                // vpinsrb       $0x6,%ebp,%xmm2,%xmm2
  .byte  66,15,182,4,16                      // movzbl        (%rax,%r10,1),%eax
  .byte  196,227,105,32,208,7                // vpinsrb       $0x7,%eax,%xmm2,%xmm2
  .byte  196,226,125,49,210                  // vpmovzxbd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_hsw
.globl _sk_table_r_hsw
FUNCTION(_sk_table_r_hsw)
_sk_table_r_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,4,128                // vgatherdps    %ymm9,(%r8,%ymm8,4),%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_hsw
.globl _sk_table_g_hsw
FUNCTION(_sk_table_g_hsw)
_sk_table_g_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,125,91,193                      // vcvtps2dq     %ymm1,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,12,128               // vgatherdps    %ymm9,(%r8,%ymm8,4),%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_hsw
.globl _sk_table_b_hsw
FUNCTION(_sk_table_b_hsw)
_sk_table_b_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,125,91,194                      // vcvtps2dq     %ymm2,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,20,128               // vgatherdps    %ymm9,(%r8,%ymm8,4),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_hsw
.globl _sk_table_a_hsw
FUNCTION(_sk_table_a_hsw)
_sk_table_a_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,125,91,195                      // vcvtps2dq     %ymm3,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,28,128               // vgatherdps    %ymm9,(%r8,%ymm8,4),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_hsw
.globl _sk_parametric_r_hsw
FUNCTION(_sk_parametric_r_hsw)
_sk_parametric_r_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,124,194,192,2                // vcmpleps      %ymm8,%ymm0,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,125,168,202                  // vfmadd213ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,125,168,211                  // vfmadd213ps   %ymm11,%ymm0,%ymm10
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,92,36,0,0          // vbroadcastss  0x245c(%rip),%ymm12        # 4740 <_sk_callback_hsw+0x277>
  .byte  196,98,125,24,45,87,36,0,0          // vbroadcastss  0x2457(%rip),%ymm13        # 4744 <_sk_callback_hsw+0x27b>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,77,36,0,0          // vbroadcastss  0x244d(%rip),%ymm13        # 4748 <_sk_callback_hsw+0x27f>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,67,36,0,0          // vbroadcastss  0x2443(%rip),%ymm13        # 474c <_sk_callback_hsw+0x283>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,57,36,0,0          // vbroadcastss  0x2439(%rip),%ymm11        # 4750 <_sk_callback_hsw+0x287>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,47,36,0,0          // vbroadcastss  0x242f(%rip),%ymm12        # 4754 <_sk_callback_hsw+0x28b>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,37,36,0,0          // vbroadcastss  0x2425(%rip),%ymm12        # 4758 <_sk_callback_hsw+0x28f>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  196,99,125,8,208,1                  // vroundps      $0x1,%ymm0,%ymm10
  .byte  196,65,124,92,210                   // vsubps        %ymm10,%ymm0,%ymm10
  .byte  196,98,125,24,29,6,36,0,0           // vbroadcastss  0x2406(%rip),%ymm11        # 475c <_sk_callback_hsw+0x293>
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,252,35,0,0         // vbroadcastss  0x23fc(%rip),%ymm11        # 4760 <_sk_callback_hsw+0x297>
  .byte  196,98,45,172,216                   // vfnmadd213ps  %ymm0,%ymm10,%ymm11
  .byte  196,226,125,24,5,242,35,0,0         // vbroadcastss  0x23f2(%rip),%ymm0        # 4764 <_sk_callback_hsw+0x29b>
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  196,98,125,24,21,232,35,0,0         // vbroadcastss  0x23e8(%rip),%ymm10        # 4768 <_sk_callback_hsw+0x29f>
  .byte  197,172,94,192                      // vdivps        %ymm0,%ymm10,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  196,98,125,24,21,219,35,0,0         // vbroadcastss  0x23db(%rip),%ymm10        # 476c <_sk_callback_hsw+0x2a3>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,195,125,74,193,128              // vblendvps     %ymm8,%ymm9,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,178,35,0,0          // vbroadcastss  0x23b2(%rip),%ymm8        # 4770 <_sk_callback_hsw+0x2a7>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_hsw
.globl _sk_parametric_g_hsw
FUNCTION(_sk_parametric_g_hsw)
_sk_parametric_g_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,116,194,192,2                // vcmpleps      %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,117,168,202                  // vfmadd213ps   %ymm10,%ymm1,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,117,168,211                  // vfmadd213ps   %ymm11,%ymm1,%ymm10
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,106,35,0,0         // vbroadcastss  0x236a(%rip),%ymm12        # 4774 <_sk_callback_hsw+0x2ab>
  .byte  196,98,125,24,45,101,35,0,0         // vbroadcastss  0x2365(%rip),%ymm13        # 4778 <_sk_callback_hsw+0x2af>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,91,35,0,0          // vbroadcastss  0x235b(%rip),%ymm13        # 477c <_sk_callback_hsw+0x2b3>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,81,35,0,0          // vbroadcastss  0x2351(%rip),%ymm13        # 4780 <_sk_callback_hsw+0x2b7>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,71,35,0,0          // vbroadcastss  0x2347(%rip),%ymm11        # 4784 <_sk_callback_hsw+0x2bb>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,61,35,0,0          // vbroadcastss  0x233d(%rip),%ymm12        # 4788 <_sk_callback_hsw+0x2bf>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,51,35,0,0          // vbroadcastss  0x2333(%rip),%ymm12        # 478c <_sk_callback_hsw+0x2c3>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  196,99,125,8,209,1                  // vroundps      $0x1,%ymm1,%ymm10
  .byte  196,65,116,92,210                   // vsubps        %ymm10,%ymm1,%ymm10
  .byte  196,98,125,24,29,20,35,0,0          // vbroadcastss  0x2314(%rip),%ymm11        # 4790 <_sk_callback_hsw+0x2c7>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,10,35,0,0          // vbroadcastss  0x230a(%rip),%ymm11        # 4794 <_sk_callback_hsw+0x2cb>
  .byte  196,98,45,172,217                   // vfnmadd213ps  %ymm1,%ymm10,%ymm11
  .byte  196,226,125,24,13,0,35,0,0          // vbroadcastss  0x2300(%rip),%ymm1        # 4798 <_sk_callback_hsw+0x2cf>
  .byte  196,193,116,92,202                  // vsubps        %ymm10,%ymm1,%ymm1
  .byte  196,98,125,24,21,246,34,0,0         // vbroadcastss  0x22f6(%rip),%ymm10        # 479c <_sk_callback_hsw+0x2d3>
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,98,125,24,21,233,34,0,0         // vbroadcastss  0x22e9(%rip),%ymm10        # 47a0 <_sk_callback_hsw+0x2d7>
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,195,117,74,201,128              // vblendvps     %ymm8,%ymm9,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,5,192,34,0,0          // vbroadcastss  0x22c0(%rip),%ymm8        # 47a4 <_sk_callback_hsw+0x2db>
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_hsw
.globl _sk_parametric_b_hsw
FUNCTION(_sk_parametric_b_hsw)
_sk_parametric_b_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,108,194,192,2                // vcmpleps      %ymm8,%ymm2,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,109,168,202                  // vfmadd213ps   %ymm10,%ymm2,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,109,168,211                  // vfmadd213ps   %ymm11,%ymm2,%ymm10
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,120,34,0,0         // vbroadcastss  0x2278(%rip),%ymm12        # 47a8 <_sk_callback_hsw+0x2df>
  .byte  196,98,125,24,45,115,34,0,0         // vbroadcastss  0x2273(%rip),%ymm13        # 47ac <_sk_callback_hsw+0x2e3>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,105,34,0,0         // vbroadcastss  0x2269(%rip),%ymm13        # 47b0 <_sk_callback_hsw+0x2e7>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,95,34,0,0          // vbroadcastss  0x225f(%rip),%ymm13        # 47b4 <_sk_callback_hsw+0x2eb>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,85,34,0,0          // vbroadcastss  0x2255(%rip),%ymm11        # 47b8 <_sk_callback_hsw+0x2ef>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,75,34,0,0          // vbroadcastss  0x224b(%rip),%ymm12        # 47bc <_sk_callback_hsw+0x2f3>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,65,34,0,0          // vbroadcastss  0x2241(%rip),%ymm12        # 47c0 <_sk_callback_hsw+0x2f7>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  196,99,125,8,210,1                  // vroundps      $0x1,%ymm2,%ymm10
  .byte  196,65,108,92,210                   // vsubps        %ymm10,%ymm2,%ymm10
  .byte  196,98,125,24,29,34,34,0,0          // vbroadcastss  0x2222(%rip),%ymm11        # 47c4 <_sk_callback_hsw+0x2fb>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,24,34,0,0          // vbroadcastss  0x2218(%rip),%ymm11        # 47c8 <_sk_callback_hsw+0x2ff>
  .byte  196,98,45,172,218                   // vfnmadd213ps  %ymm2,%ymm10,%ymm11
  .byte  196,226,125,24,21,14,34,0,0         // vbroadcastss  0x220e(%rip),%ymm2        # 47cc <_sk_callback_hsw+0x303>
  .byte  196,193,108,92,210                  // vsubps        %ymm10,%ymm2,%ymm2
  .byte  196,98,125,24,21,4,34,0,0           // vbroadcastss  0x2204(%rip),%ymm10        # 47d0 <_sk_callback_hsw+0x307>
  .byte  197,172,94,210                      // vdivps        %ymm2,%ymm10,%ymm2
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,98,125,24,21,247,33,0,0         // vbroadcastss  0x21f7(%rip),%ymm10        # 47d4 <_sk_callback_hsw+0x30b>
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,195,109,74,209,128              // vblendvps     %ymm8,%ymm9,%ymm2,%ymm2
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,206,33,0,0          // vbroadcastss  0x21ce(%rip),%ymm8        # 47d8 <_sk_callback_hsw+0x30f>
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_hsw
.globl _sk_parametric_a_hsw
FUNCTION(_sk_parametric_a_hsw)
_sk_parametric_a_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,100,194,192,2                // vcmpleps      %ymm8,%ymm3,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,101,168,202                  // vfmadd213ps   %ymm10,%ymm3,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,101,168,211                  // vfmadd213ps   %ymm11,%ymm3,%ymm10
  .byte  196,226,125,24,24                   // vbroadcastss  (%rax),%ymm3
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,134,33,0,0         // vbroadcastss  0x2186(%rip),%ymm12        # 47dc <_sk_callback_hsw+0x313>
  .byte  196,98,125,24,45,129,33,0,0         // vbroadcastss  0x2181(%rip),%ymm13        # 47e0 <_sk_callback_hsw+0x317>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,119,33,0,0         // vbroadcastss  0x2177(%rip),%ymm13        # 47e4 <_sk_callback_hsw+0x31b>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,109,33,0,0         // vbroadcastss  0x216d(%rip),%ymm13        # 47e8 <_sk_callback_hsw+0x31f>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,99,33,0,0          // vbroadcastss  0x2163(%rip),%ymm11        # 47ec <_sk_callback_hsw+0x323>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,89,33,0,0          // vbroadcastss  0x2159(%rip),%ymm12        # 47f0 <_sk_callback_hsw+0x327>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,79,33,0,0          // vbroadcastss  0x214f(%rip),%ymm12        # 47f4 <_sk_callback_hsw+0x32b>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  196,99,125,8,211,1                  // vroundps      $0x1,%ymm3,%ymm10
  .byte  196,65,100,92,210                   // vsubps        %ymm10,%ymm3,%ymm10
  .byte  196,98,125,24,29,48,33,0,0          // vbroadcastss  0x2130(%rip),%ymm11        # 47f8 <_sk_callback_hsw+0x32f>
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,38,33,0,0          // vbroadcastss  0x2126(%rip),%ymm11        # 47fc <_sk_callback_hsw+0x333>
  .byte  196,98,45,172,219                   // vfnmadd213ps  %ymm3,%ymm10,%ymm11
  .byte  196,226,125,24,29,28,33,0,0         // vbroadcastss  0x211c(%rip),%ymm3        # 4800 <_sk_callback_hsw+0x337>
  .byte  196,193,100,92,218                  // vsubps        %ymm10,%ymm3,%ymm3
  .byte  196,98,125,24,21,18,33,0,0          // vbroadcastss  0x2112(%rip),%ymm10        # 4804 <_sk_callback_hsw+0x33b>
  .byte  197,172,94,219                      // vdivps        %ymm3,%ymm10,%ymm3
  .byte  197,164,88,219                      // vaddps        %ymm3,%ymm11,%ymm3
  .byte  196,98,125,24,21,5,33,0,0           // vbroadcastss  0x2105(%rip),%ymm10        # 4808 <_sk_callback_hsw+0x33f>
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,195,101,74,217,128              // vblendvps     %ymm8,%ymm9,%ymm3,%ymm3
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  196,98,125,24,5,220,32,0,0          // vbroadcastss  0x20dc(%rip),%ymm8        # 480c <_sk_callback_hsw+0x343>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_hsw
.globl _sk_lab_to_xyz_hsw
FUNCTION(_sk_lab_to_xyz_hsw)
_sk_lab_to_xyz_hsw:
  .byte  196,98,125,24,5,206,32,0,0          // vbroadcastss  0x20ce(%rip),%ymm8        # 4810 <_sk_callback_hsw+0x347>
  .byte  196,98,125,24,13,201,32,0,0         // vbroadcastss  0x20c9(%rip),%ymm9        # 4814 <_sk_callback_hsw+0x34b>
  .byte  196,98,125,24,21,196,32,0,0         // vbroadcastss  0x20c4(%rip),%ymm10        # 4818 <_sk_callback_hsw+0x34f>
  .byte  196,194,53,168,202                  // vfmadd213ps   %ymm10,%ymm9,%ymm1
  .byte  196,194,53,168,210                  // vfmadd213ps   %ymm10,%ymm9,%ymm2
  .byte  196,98,125,24,13,181,32,0,0         // vbroadcastss  0x20b5(%rip),%ymm9        # 481c <_sk_callback_hsw+0x353>
  .byte  196,66,125,184,200                  // vfmadd231ps   %ymm8,%ymm0,%ymm9
  .byte  196,226,125,24,5,171,32,0,0         // vbroadcastss  0x20ab(%rip),%ymm0        # 4820 <_sk_callback_hsw+0x357>
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,98,125,24,5,162,32,0,0          // vbroadcastss  0x20a2(%rip),%ymm8        # 4824 <_sk_callback_hsw+0x35b>
  .byte  196,98,117,168,192                  // vfmadd213ps   %ymm0,%ymm1,%ymm8
  .byte  196,98,125,24,13,152,32,0,0         // vbroadcastss  0x2098(%rip),%ymm9        # 4828 <_sk_callback_hsw+0x35f>
  .byte  196,98,109,172,200                  // vfnmadd213ps  %ymm0,%ymm2,%ymm9
  .byte  196,193,60,89,200                   // vmulps        %ymm8,%ymm8,%ymm1
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  196,226,125,24,21,133,32,0,0        // vbroadcastss  0x2085(%rip),%ymm2        # 482c <_sk_callback_hsw+0x363>
  .byte  197,108,194,209,1                   // vcmpltps      %ymm1,%ymm2,%ymm10
  .byte  196,98,125,24,29,123,32,0,0         // vbroadcastss  0x207b(%rip),%ymm11        # 4830 <_sk_callback_hsw+0x367>
  .byte  196,65,60,88,195                    // vaddps        %ymm11,%ymm8,%ymm8
  .byte  196,98,125,24,37,113,32,0,0         // vbroadcastss  0x2071(%rip),%ymm12        # 4834 <_sk_callback_hsw+0x36b>
  .byte  196,65,60,89,196                    // vmulps        %ymm12,%ymm8,%ymm8
  .byte  196,99,61,74,193,160                // vblendvps     %ymm10,%ymm1,%ymm8,%ymm8
  .byte  197,252,89,200                      // vmulps        %ymm0,%ymm0,%ymm1
  .byte  197,252,89,201                      // vmulps        %ymm1,%ymm0,%ymm1
  .byte  197,108,194,209,1                   // vcmpltps      %ymm1,%ymm2,%ymm10
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,193,124,89,196                  // vmulps        %ymm12,%ymm0,%ymm0
  .byte  196,227,125,74,201,160              // vblendvps     %ymm10,%ymm1,%ymm0,%ymm1
  .byte  196,193,52,89,193                   // vmulps        %ymm9,%ymm9,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,236,194,208,1                   // vcmpltps      %ymm0,%ymm2,%ymm2
  .byte  196,65,52,88,203                    // vaddps        %ymm11,%ymm9,%ymm9
  .byte  196,65,52,89,204                    // vmulps        %ymm12,%ymm9,%ymm9
  .byte  196,227,53,74,208,32                // vblendvps     %ymm2,%ymm0,%ymm9,%ymm2
  .byte  196,226,125,24,5,38,32,0,0          // vbroadcastss  0x2026(%rip),%ymm0        # 4838 <_sk_callback_hsw+0x36f>
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,29,32,0,0           // vbroadcastss  0x201d(%rip),%ymm8        # 483c <_sk_callback_hsw+0x373>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_hsw
.globl _sk_load_a8_hsw
FUNCTION(_sk_load_a8_hsw)
_sk_load_a8_hsw:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,1,248                            // add           %rdi,%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,45                              // jne           2865 <_sk_load_a8_hsw+0x3d>
  .byte  197,250,126,0                       // vmovq         (%rax),%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,242,31,0,0        // vbroadcastss  0x1ff2(%rip),%ymm1        # 4840 <_sk_callback_hsw+0x377>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  49,201                              // xor           %ecx,%ecx
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  69,49,201                           // xor           %r9d,%r9d
  .byte  68,15,182,24                        // movzbl        (%rax),%r11d
  .byte  72,255,192                          // inc           %rax
  .byte  73,211,227                          // shl           %cl,%r11
  .byte  77,9,217                            // or            %r11,%r9
  .byte  72,131,193,8                        // add           $0x8,%rcx
  .byte  73,255,202                          // dec           %r10
  .byte  117,234                             // jne           286d <_sk_load_a8_hsw+0x45>
  .byte  196,193,249,110,193                 // vmovq         %r9,%xmm0
  .byte  235,178                             // jmp           283c <_sk_load_a8_hsw+0x14>

HIDDEN _sk_gather_a8_hsw
.globl _sk_gather_a8_hsw
FUNCTION(_sk_gather_a8_hsw)
_sk_gather_a8_hsw:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,199                 // vmovq         %xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,131,121,32,4,24,0               // vpinsrb       $0x0,(%r8,%r11,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,16,1               // vpinsrb       $0x1,(%r8,%r10,1),%xmm0,%xmm0
  .byte  71,15,182,12,8                      // movzbl        (%r8,%r9,1),%r9d
  .byte  196,195,121,32,193,2                // vpinsrb       $0x2,%r9d,%xmm0,%xmm0
  .byte  65,15,182,4,0                       // movzbl        (%r8,%rax,1),%eax
  .byte  196,227,121,32,192,3                // vpinsrb       $0x3,%eax,%xmm0,%xmm0
  .byte  67,15,182,4,32                      // movzbl        (%r8,%r12,1),%eax
  .byte  196,227,121,32,192,4                // vpinsrb       $0x4,%eax,%xmm0,%xmm0
  .byte  67,15,182,4,56                      // movzbl        (%r8,%r15,1),%eax
  .byte  196,227,121,32,192,5                // vpinsrb       $0x5,%eax,%xmm0,%xmm0
  .byte  67,15,182,4,48                      // movzbl        (%r8,%r14,1),%eax
  .byte  196,227,121,32,192,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,4,24                      // movzbl        (%r8,%rbx,1),%eax
  .byte  196,227,121,32,192,7                // vpinsrb       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,253,30,0,0        // vbroadcastss  0x1efd(%rip),%ymm1        # 4844 <_sk_callback_hsw+0x37b>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,237,239,210                     // vpxor         %ymm2,%ymm2,%ymm2
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_hsw
.globl _sk_store_a8_hsw
FUNCTION(_sk_store_a8_hsw)
_sk_store_a8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  196,98,125,24,5,216,30,0,0          // vbroadcastss  0x1ed8(%rip),%ymm8        # 4848 <_sk_callback_hsw+0x37f>
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  196,65,57,103,192                   // vpackuswb     %xmm8,%xmm8,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,10                              // jne           2999 <_sk_store_a8_hsw+0x37>
  .byte  196,65,123,17,4,58                  // vmovsd        %xmm8,(%r10,%rdi,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  119,236                             // ja            2995 <_sk_store_a8_hsw+0x33>
  .byte  196,66,121,48,192                   // vpmovzxbw     %xmm8,%xmm8
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,67,0,0,0                  // lea           0x43(%rip),%r9        # 29fc <_sk_store_a8_hsw+0x9a>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,20,68,58,6,12            // vpextrb       $0xc,%xmm8,0x6(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,5,10            // vpextrb       $0xa,%xmm8,0x5(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,4,8             // vpextrb       $0x8,%xmm8,0x4(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,3,6             // vpextrb       $0x6,%xmm8,0x3(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,2,4             // vpextrb       $0x4,%xmm8,0x2(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,1,2             // vpextrb       $0x2,%xmm8,0x1(%r10,%rdi,1)
  .byte  196,67,121,20,4,58,0                // vpextrb       $0x0,%xmm8,(%r10,%rdi,1)
  .byte  235,154                             // jmp           2995 <_sk_store_a8_hsw+0x33>
  .byte  144                                 // nop
  .byte  246,255                             // idiv          %bh
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,206                             // dec           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,198                             // inc           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_hsw
.globl _sk_load_g8_hsw
FUNCTION(_sk_load_g8_hsw)
_sk_load_g8_hsw:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,1,248                            // add           %rdi,%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,50                              // jne           2a5a <_sk_load_g8_hsw+0x42>
  .byte  197,250,126,0                       // vmovq         (%rax),%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,14,30,0,0         // vbroadcastss  0x1e0e(%rip),%ymm1        # 484c <_sk_callback_hsw+0x383>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,3,30,0,0          // vbroadcastss  0x1e03(%rip),%ymm3        # 4850 <_sk_callback_hsw+0x387>
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  49,201                              // xor           %ecx,%ecx
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  69,49,201                           // xor           %r9d,%r9d
  .byte  68,15,182,24                        // movzbl        (%rax),%r11d
  .byte  72,255,192                          // inc           %rax
  .byte  73,211,227                          // shl           %cl,%r11
  .byte  77,9,217                            // or            %r11,%r9
  .byte  72,131,193,8                        // add           $0x8,%rcx
  .byte  73,255,202                          // dec           %r10
  .byte  117,234                             // jne           2a62 <_sk_load_g8_hsw+0x4a>
  .byte  196,193,249,110,193                 // vmovq         %r9,%xmm0
  .byte  235,173                             // jmp           2a2c <_sk_load_g8_hsw+0x14>

HIDDEN _sk_gather_g8_hsw
.globl _sk_gather_g8_hsw
FUNCTION(_sk_gather_g8_hsw)
_sk_gather_g8_hsw:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,199                 // vmovq         %xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,131,121,32,4,24,0               // vpinsrb       $0x0,(%r8,%r11,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,16,1               // vpinsrb       $0x1,(%r8,%r10,1),%xmm0,%xmm0
  .byte  71,15,182,12,8                      // movzbl        (%r8,%r9,1),%r9d
  .byte  196,195,121,32,193,2                // vpinsrb       $0x2,%r9d,%xmm0,%xmm0
  .byte  65,15,182,4,0                       // movzbl        (%r8,%rax,1),%eax
  .byte  196,227,121,32,192,3                // vpinsrb       $0x3,%eax,%xmm0,%xmm0
  .byte  67,15,182,4,32                      // movzbl        (%r8,%r12,1),%eax
  .byte  196,227,121,32,192,4                // vpinsrb       $0x4,%eax,%xmm0,%xmm0
  .byte  67,15,182,4,56                      // movzbl        (%r8,%r15,1),%eax
  .byte  196,227,121,32,192,5                // vpinsrb       $0x5,%eax,%xmm0,%xmm0
  .byte  67,15,182,4,48                      // movzbl        (%r8,%r14,1),%eax
  .byte  196,227,121,32,192,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,4,24                      // movzbl        (%r8,%rbx,1),%eax
  .byte  196,227,121,32,192,7                // vpinsrb       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,24,29,0,0         // vbroadcastss  0x1d18(%rip),%ymm1        # 4854 <_sk_callback_hsw+0x38b>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,13,29,0,0         // vbroadcastss  0x1d0d(%rip),%ymm3        # 4858 <_sk_callback_hsw+0x38f>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_hsw
.globl _sk_gather_i8_hsw
FUNCTION(_sk_gather_i8_hsw)
_sk_gather_i8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,192                          // mov           %rax,%r8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  116,5                               // je            2b6b <_sk_gather_i8_hsw+0xf>
  .byte  76,137,192                          // mov           %r8,%rax
  .byte  235,2                               // jmp           2b6d <_sk_gather_i8_hsw+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  65,137,223                          // mov           %ebx,%r15d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,196                 // vmovq         %xmm0,%r12
  .byte  69,137,229                          // mov           %r12d,%r13d
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,131,121,32,4,49,0               // vpinsrb       $0x0,(%r9,%r14,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,25,1               // vpinsrb       $0x1,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,17,2               // vpinsrb       $0x2,(%r9,%r10,1),%xmm0,%xmm0
  .byte  196,195,121,32,4,1,3                // vpinsrb       $0x3,(%r9,%rax,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,41,4               // vpinsrb       $0x4,(%r9,%r13,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,33,5               // vpinsrb       $0x5,(%r9,%r12,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,57,6               // vpinsrb       $0x6,(%r9,%r15,1),%xmm0,%xmm0
  .byte  196,195,121,32,4,25,7               // vpinsrb       $0x7,(%r9,%rbx,1),%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  73,139,64,8                         // mov           0x8(%r8),%rax
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,226,117,144,28,128              // vpgatherdd    %ymm1,(%rax,%ymm0,4),%ymm3
  .byte  197,229,219,5,37,30,0,0             // vpand         0x1e25(%rip),%ymm3,%ymm0        # 4a40 <_sk_callback_hsw+0x577>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,52,28,0,0           // vbroadcastss  0x1c34(%rip),%ymm8        # 485c <_sk_callback_hsw+0x393>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,42,30,0,0          // vpshufb       0x1e2a(%rip),%ymm3,%ymm1        # 4a60 <_sk_callback_hsw+0x597>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,56,30,0,0          // vpshufb       0x1e38(%rip),%ymm3,%ymm2        # 4a80 <_sk_callback_hsw+0x5b7>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_hsw
.globl _sk_load_565_hsw
FUNCTION(_sk_load_565_hsw)
_sk_load_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,114                             // jne           2ce8 <_sk_load_565_hsw+0x7c>
  .byte  196,193,122,111,4,122               // vmovdqu       (%r10,%rdi,2),%xmm0
  .byte  196,226,125,51,208                  // vpmovzxwd     %xmm0,%ymm2
  .byte  196,226,125,88,5,214,27,0,0         // vpbroadcastd  0x1bd6(%rip),%ymm0        # 4860 <_sk_callback_hsw+0x397>
  .byte  197,237,219,192                     // vpand         %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,201,27,0,0        // vbroadcastss  0x1bc9(%rip),%ymm1        # 4864 <_sk_callback_hsw+0x39b>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,192,27,0,0        // vpbroadcastd  0x1bc0(%rip),%ymm1        # 4868 <_sk_callback_hsw+0x39f>
  .byte  197,237,219,201                     // vpand         %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,179,27,0,0        // vbroadcastss  0x1bb3(%rip),%ymm3        # 486c <_sk_callback_hsw+0x3a3>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,88,29,170,27,0,0        // vpbroadcastd  0x1baa(%rip),%ymm3        # 4870 <_sk_callback_hsw+0x3a7>
  .byte  197,237,219,211                     // vpand         %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,157,27,0,0        // vbroadcastss  0x1b9d(%rip),%ymm3        # 4874 <_sk_callback_hsw+0x3ab>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,146,27,0,0        // vbroadcastss  0x1b92(%rip),%ymm3        # 4878 <_sk_callback_hsw+0x3af>
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  119,128                             // ja            2c7c <_sk_load_565_hsw+0x10>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,73,0,0,0                  // lea           0x49(%rip),%r9        # 2d50 <_sk_load_565_hsw+0xe4>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,122,12,6         // vpinsrw       $0x6,0xc(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,10,5         // vpinsrw       $0x5,0xa(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,8,4          // vpinsrw       $0x4,0x8(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,6,3          // vpinsrw       $0x3,0x6(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,4,2          // vpinsrw       $0x2,0x4(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,2,1          // vpinsrw       $0x1,0x2(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,4,122,0             // vpinsrw       $0x0,(%r10,%rdi,2),%xmm0,%xmm0
  .byte  233,44,255,255,255                  // jmpq          2c7c <_sk_load_565_hsw+0x10>
  .byte  244                                 // hlt
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_565_hsw
.globl _sk_gather_565_hsw
FUNCTION(_sk_gather_565_hsw)
_sk_gather_565_hsw:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,199                 // vmovq         %xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  71,15,183,20,80                     // movzwl        (%r8,%r10,2),%r10d
  .byte  71,15,183,28,88                     // movzwl        (%r8,%r11,2),%r11d
  .byte  196,193,121,110,195                 // vmovd         %r11d,%xmm0
  .byte  196,193,121,196,194,1               // vpinsrw       $0x1,%r10d,%xmm0,%xmm0
  .byte  71,15,183,12,72                     // movzwl        (%r8,%r9,2),%r9d
  .byte  196,193,121,196,193,2               // vpinsrw       $0x2,%r9d,%xmm0,%xmm0
  .byte  65,15,183,4,64                      // movzwl        (%r8,%rax,2),%eax
  .byte  197,249,196,192,3                   // vpinsrw       $0x3,%eax,%xmm0,%xmm0
  .byte  67,15,183,4,96                      // movzwl        (%r8,%r12,2),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  67,15,183,4,120                     // movzwl        (%r8,%r15,2),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  67,15,183,4,112                     // movzwl        (%r8,%r14,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,183,4,88                      // movzwl        (%r8,%rbx,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,51,208                  // vpmovzxwd     %xmm0,%ymm2
  .byte  196,226,125,88,5,85,26,0,0          // vpbroadcastd  0x1a55(%rip),%ymm0        # 487c <_sk_callback_hsw+0x3b3>
  .byte  197,237,219,192                     // vpand         %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,72,26,0,0         // vbroadcastss  0x1a48(%rip),%ymm1        # 4880 <_sk_callback_hsw+0x3b7>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,63,26,0,0         // vpbroadcastd  0x1a3f(%rip),%ymm1        # 4884 <_sk_callback_hsw+0x3bb>
  .byte  197,237,219,201                     // vpand         %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,50,26,0,0         // vbroadcastss  0x1a32(%rip),%ymm3        # 4888 <_sk_callback_hsw+0x3bf>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,88,29,41,26,0,0         // vpbroadcastd  0x1a29(%rip),%ymm3        # 488c <_sk_callback_hsw+0x3c3>
  .byte  197,237,219,211                     // vpand         %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,28,26,0,0         // vbroadcastss  0x1a1c(%rip),%ymm3        # 4890 <_sk_callback_hsw+0x3c7>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,17,26,0,0         // vbroadcastss  0x1a11(%rip),%ymm3        # 4894 <_sk_callback_hsw+0x3cb>
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_hsw
.globl _sk_store_565_hsw
FUNCTION(_sk_store_565_hsw)
_sk_store_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  196,98,125,24,5,254,25,0,0          // vbroadcastss  0x19fe(%rip),%ymm8        # 4898 <_sk_callback_hsw+0x3cf>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,53,114,241,11               // vpslld        $0xb,%ymm9,%ymm9
  .byte  196,98,125,24,21,233,25,0,0         // vbroadcastss  0x19e9(%rip),%ymm10        # 489c <_sk_callback_hsw+0x3d3>
  .byte  196,65,116,89,210                   // vmulps        %ymm10,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,5                // vpslld        $0x5,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,10                              // jne           2ef1 <_sk_store_565_hsw+0x65>
  .byte  196,65,122,127,4,122                // vmovdqu       %xmm8,(%r10,%rdi,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  119,236                             // ja            2eed <_sk_store_565_hsw+0x61>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,68,0,0,0                  // lea           0x44(%rip),%r9        # 2f50 <_sk_store_565_hsw+0xc4>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,68,122,12,6           // vpextrw       $0x6,%xmm8,0xc(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,10,5           // vpextrw       $0x5,%xmm8,0xa(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,8,4            // vpextrw       $0x4,%xmm8,0x8(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,6,3            // vpextrw       $0x3,%xmm8,0x6(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,4,2            // vpextrw       $0x2,%xmm8,0x4(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,2,1            // vpextrw       $0x1,%xmm8,0x2(%r10,%rdi,2)
  .byte  196,67,121,21,4,122,0               // vpextrw       $0x0,%xmm8,(%r10,%rdi,2)
  .byte  235,159                             // jmp           2eed <_sk_store_565_hsw+0x61>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  245                                 // cmc
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_4444_hsw
.globl _sk_load_4444_hsw
FUNCTION(_sk_load_4444_hsw)
_sk_load_4444_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,138,0,0,0                    // jne           3004 <_sk_load_4444_hsw+0x98>
  .byte  196,193,122,111,4,122               // vmovdqu       (%r10,%rdi,2),%xmm0
  .byte  196,226,125,51,216                  // vpmovzxwd     %xmm0,%ymm3
  .byte  196,226,125,88,5,18,25,0,0          // vpbroadcastd  0x1912(%rip),%ymm0        # 48a0 <_sk_callback_hsw+0x3d7>
  .byte  197,229,219,192                     // vpand         %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,5,25,0,0          // vbroadcastss  0x1905(%rip),%ymm1        # 48a4 <_sk_callback_hsw+0x3db>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,252,24,0,0        // vpbroadcastd  0x18fc(%rip),%ymm1        # 48a8 <_sk_callback_hsw+0x3df>
  .byte  197,229,219,201                     // vpand         %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,239,24,0,0        // vbroadcastss  0x18ef(%rip),%ymm2        # 48ac <_sk_callback_hsw+0x3e3>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,88,21,230,24,0,0        // vpbroadcastd  0x18e6(%rip),%ymm2        # 48b0 <_sk_callback_hsw+0x3e7>
  .byte  197,229,219,210                     // vpand         %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,217,24,0,0          // vbroadcastss  0x18d9(%rip),%ymm8        # 48b4 <_sk_callback_hsw+0x3eb>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,88,5,207,24,0,0          // vpbroadcastd  0x18cf(%rip),%ymm8        # 48b8 <_sk_callback_hsw+0x3ef>
  .byte  196,193,101,219,216                 // vpand         %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,193,24,0,0          // vbroadcastss  0x18c1(%rip),%ymm8        # 48bc <_sk_callback_hsw+0x3f3>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  15,135,100,255,255,255              // ja            2f80 <_sk_load_4444_hsw+0x14>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,73,0,0,0                  // lea           0x49(%rip),%r9        # 3070 <_sk_load_4444_hsw+0x104>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,122,12,6         // vpinsrw       $0x6,0xc(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,10,5         // vpinsrw       $0x5,0xa(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,8,4          // vpinsrw       $0x4,0x8(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,6,3          // vpinsrw       $0x3,0x6(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,4,2          // vpinsrw       $0x2,0x4(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,2,1          // vpinsrw       $0x1,0x2(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,4,122,0             // vpinsrw       $0x0,(%r10,%rdi,2),%xmm0,%xmm0
  .byte  233,16,255,255,255                  // jmpq          2f80 <_sk_load_4444_hsw+0x14>
  .byte  244                                 // hlt
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_4444_hsw
.globl _sk_gather_4444_hsw
FUNCTION(_sk_gather_4444_hsw)
_sk_gather_4444_hsw:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,199                 // vmovq         %xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  71,15,183,20,80                     // movzwl        (%r8,%r10,2),%r10d
  .byte  71,15,183,28,88                     // movzwl        (%r8,%r11,2),%r11d
  .byte  196,193,121,110,195                 // vmovd         %r11d,%xmm0
  .byte  196,193,121,196,194,1               // vpinsrw       $0x1,%r10d,%xmm0,%xmm0
  .byte  71,15,183,12,72                     // movzwl        (%r8,%r9,2),%r9d
  .byte  196,193,121,196,193,2               // vpinsrw       $0x2,%r9d,%xmm0,%xmm0
  .byte  65,15,183,4,64                      // movzwl        (%r8,%rax,2),%eax
  .byte  197,249,196,192,3                   // vpinsrw       $0x3,%eax,%xmm0,%xmm0
  .byte  67,15,183,4,96                      // movzwl        (%r8,%r12,2),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  67,15,183,4,120                     // movzwl        (%r8,%r15,2),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  67,15,183,4,112                     // movzwl        (%r8,%r14,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,183,4,88                      // movzwl        (%r8,%rbx,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,51,216                  // vpmovzxwd     %xmm0,%ymm3
  .byte  196,226,125,88,5,121,23,0,0         // vpbroadcastd  0x1779(%rip),%ymm0        # 48c0 <_sk_callback_hsw+0x3f7>
  .byte  197,229,219,192                     // vpand         %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,108,23,0,0        // vbroadcastss  0x176c(%rip),%ymm1        # 48c4 <_sk_callback_hsw+0x3fb>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,99,23,0,0         // vpbroadcastd  0x1763(%rip),%ymm1        # 48c8 <_sk_callback_hsw+0x3ff>
  .byte  197,229,219,201                     // vpand         %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,86,23,0,0         // vbroadcastss  0x1756(%rip),%ymm2        # 48cc <_sk_callback_hsw+0x403>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,88,21,77,23,0,0         // vpbroadcastd  0x174d(%rip),%ymm2        # 48d0 <_sk_callback_hsw+0x407>
  .byte  197,229,219,210                     // vpand         %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,64,23,0,0           // vbroadcastss  0x1740(%rip),%ymm8        # 48d4 <_sk_callback_hsw+0x40b>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,88,5,54,23,0,0           // vpbroadcastd  0x1736(%rip),%ymm8        # 48d8 <_sk_callback_hsw+0x40f>
  .byte  196,193,101,219,216                 // vpand         %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,40,23,0,0           // vbroadcastss  0x1728(%rip),%ymm8        # 48dc <_sk_callback_hsw+0x413>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_hsw
.globl _sk_store_4444_hsw
FUNCTION(_sk_store_4444_hsw)
_sk_store_4444_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  196,98,125,24,5,14,23,0,0           // vbroadcastss  0x170e(%rip),%ymm8        # 48e0 <_sk_callback_hsw+0x417>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,53,114,241,12               // vpslld        $0xc,%ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,8                // vpslld        $0x8,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,4                // vpslld        $0x4,%ymm10,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,10                              // jne           3235 <_sk_store_4444_hsw+0x71>
  .byte  196,65,122,127,4,122                // vmovdqu       %xmm8,(%r10,%rdi,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  119,236                             // ja            3231 <_sk_store_4444_hsw+0x6d>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,68,0,0,0                  // lea           0x44(%rip),%r9        # 3294 <_sk_store_4444_hsw+0xd0>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,68,122,12,6           // vpextrw       $0x6,%xmm8,0xc(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,10,5           // vpextrw       $0x5,%xmm8,0xa(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,8,4            // vpextrw       $0x4,%xmm8,0x8(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,6,3            // vpextrw       $0x3,%xmm8,0x6(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,4,2            // vpextrw       $0x2,%xmm8,0x4(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,2,1            // vpextrw       $0x1,%xmm8,0x2(%r10,%rdi,2)
  .byte  196,67,121,21,4,122,0               // vpextrw       $0x0,%xmm8,(%r10,%rdi,2)
  .byte  235,159                             // jmp           3231 <_sk_store_4444_hsw+0x6d>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  245                                 // cmc
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_8888_hsw
.globl _sk_load_8888_hsw
FUNCTION(_sk_load_8888_hsw)
_sk_load_8888_hsw:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,12,189,0,0,0,0               // lea           0x0(,%rdi,4),%r9
  .byte  76,3,8                              // add           (%rax),%r9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,88                              // jne           331d <_sk_load_8888_hsw+0x6d>
  .byte  196,193,126,111,25                  // vmovdqu       (%r9),%ymm3
  .byte  197,229,219,5,206,23,0,0            // vpand         0x17ce(%rip),%ymm3,%ymm0        # 4aa0 <_sk_callback_hsw+0x5d7>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,5,22,0,0            // vbroadcastss  0x1605(%rip),%ymm8        # 48e4 <_sk_callback_hsw+0x41b>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,211,23,0,0         // vpshufb       0x17d3(%rip),%ymm3,%ymm1        # 4ac0 <_sk_callback_hsw+0x5f7>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,225,23,0,0         // vpshufb       0x17e1(%rip),%ymm3,%ymm2        # 4ae0 <_sk_callback_hsw+0x617>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,192                 // vmovq         %rax,%xmm0
  .byte  196,226,125,33,192                  // vpmovsxbd     %xmm0,%ymm0
  .byte  196,194,125,140,25                  // vpmaskmovd    (%r9),%ymm0,%ymm3
  .byte  235,135                             // jmp           32ca <_sk_load_8888_hsw+0x1a>

HIDDEN _sk_gather_8888_hsw
.globl _sk_gather_8888_hsw
FUNCTION(_sk_gather_8888_hsw)
_sk_gather_8888_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,194,117,144,28,128              // vpgatherdd    %ymm1,(%r8,%ymm0,4),%ymm3
  .byte  197,229,219,5,143,23,0,0            // vpand         0x178f(%rip),%ymm3,%ymm0        # 4b00 <_sk_callback_hsw+0x637>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,106,21,0,0          // vbroadcastss  0x156a(%rip),%ymm8        # 48e8 <_sk_callback_hsw+0x41f>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,148,23,0,0         // vpshufb       0x1794(%rip),%ymm3,%ymm1        # 4b20 <_sk_callback_hsw+0x657>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,162,23,0,0         // vpshufb       0x17a2(%rip),%ymm3,%ymm2        # 4b40 <_sk_callback_hsw+0x677>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_hsw
.globl _sk_store_8888_hsw
FUNCTION(_sk_store_8888_hsw)
_sk_store_8888_hsw:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,12,189,0,0,0,0               // lea           0x0(,%rdi,4),%r9
  .byte  76,3,8                              // add           (%rax),%r9
  .byte  196,98,125,24,5,26,21,0,0           // vbroadcastss  0x151a(%rip),%ymm8        # 48ec <_sk_callback_hsw+0x423>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,8                // vpslld        $0x8,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,16               // vpslld        $0x10,%ymm10,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,193,61,114,240,24               // vpslld        $0x18,%ymm8,%ymm8
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,12                              // jne           342c <_sk_store_8888_hsw+0x73>
  .byte  196,65,126,127,1                    // vmovdqu       %ymm8,(%r9)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,125,33,201                   // vpmovsxbd     %xmm9,%ymm9
  .byte  196,66,53,142,1                     // vpmaskmovd    %ymm8,%ymm9,(%r9)
  .byte  235,211                             // jmp           3425 <_sk_store_8888_hsw+0x6c>

HIDDEN _sk_load_f16_hsw
.globl _sk_load_f16_hsw
FUNCTION(_sk_load_f16_hsw)
_sk_load_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,97                              // jne           34bd <_sk_load_f16_hsw+0x6b>
  .byte  197,121,16,4,248                    // vmovupd       (%rax,%rdi,8),%xmm8
  .byte  197,249,16,84,248,16                // vmovupd       0x10(%rax,%rdi,8),%xmm2
  .byte  197,249,16,92,248,32                // vmovupd       0x20(%rax,%rdi,8),%xmm3
  .byte  197,122,111,76,248,48               // vmovdqu       0x30(%rax,%rdi,8),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  196,226,125,19,192                  // vcvtph2ps     %xmm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  196,226,125,19,201                  // vcvtph2ps     %xmm1,%ymm1
  .byte  197,177,108,211                     // vpunpcklqdq   %xmm3,%xmm9,%xmm2
  .byte  196,226,125,19,210                  // vcvtph2ps     %xmm2,%ymm2
  .byte  197,177,109,219                     // vpunpckhqdq   %xmm3,%xmm9,%xmm3
  .byte  196,226,125,19,219                  // vcvtph2ps     %xmm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,123,16,4,248                    // vmovsd        (%rax,%rdi,8),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,79                              // je            351c <_sk_load_f16_hsw+0xca>
  .byte  197,57,22,68,248,8                  // vmovhpd       0x8(%rax,%rdi,8),%xmm8,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,67                              // jb            351c <_sk_load_f16_hsw+0xca>
  .byte  197,251,16,84,248,16                // vmovsd        0x10(%rax,%rdi,8),%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  116,68                              // je            3529 <_sk_load_f16_hsw+0xd7>
  .byte  197,233,22,84,248,24                // vmovhpd       0x18(%rax,%rdi,8),%xmm2,%xmm2
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,56                              // jb            3529 <_sk_load_f16_hsw+0xd7>
  .byte  197,251,16,92,248,32                // vmovsd        0x20(%rax,%rdi,8),%xmm3
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  15,132,114,255,255,255              // je            3473 <_sk_load_f16_hsw+0x21>
  .byte  197,225,22,92,248,40                // vmovhpd       0x28(%rax,%rdi,8),%xmm3,%xmm3
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  15,130,98,255,255,255               // jb            3473 <_sk_load_f16_hsw+0x21>
  .byte  197,122,126,76,248,48               // vmovq         0x30(%rax,%rdi,8),%xmm9
  .byte  233,87,255,255,255                  // jmpq          3473 <_sk_load_f16_hsw+0x21>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,74,255,255,255                  // jmpq          3473 <_sk_load_f16_hsw+0x21>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,65,255,255,255                  // jmpq          3473 <_sk_load_f16_hsw+0x21>

HIDDEN _sk_gather_f16_hsw
.globl _sk_gather_f16_hsw
FUNCTION(_sk_gather_f16_hsw)
_sk_gather_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,194,237,144,28,192              // vpgatherdq    %ymm2,(%r8,%xmm0,8),%ymm3
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,194,245,144,20,192              // vpgatherdq    %ymm1,(%r8,%xmm0,8),%ymm2
  .byte  196,227,125,57,216,1                // vextracti128  $0x1,%ymm3,%xmm0
  .byte  196,227,125,57,209,1                // vextracti128  $0x1,%ymm2,%xmm1
  .byte  197,97,97,192                       // vpunpcklwd    %xmm0,%xmm3,%xmm8
  .byte  197,225,105,192                     // vpunpckhwd    %xmm0,%xmm3,%xmm0
  .byte  197,233,97,217                      // vpunpcklwd    %xmm1,%xmm2,%xmm3
  .byte  197,233,105,201                     // vpunpckhwd    %xmm1,%xmm2,%xmm1
  .byte  197,57,97,200                       // vpunpcklwd    %xmm0,%xmm8,%xmm9
  .byte  197,57,105,192                      // vpunpckhwd    %xmm0,%xmm8,%xmm8
  .byte  197,225,97,209                      // vpunpcklwd    %xmm1,%xmm3,%xmm2
  .byte  197,225,105,217                     // vpunpckhwd    %xmm1,%xmm3,%xmm3
  .byte  197,177,108,194                     // vpunpcklqdq   %xmm2,%xmm9,%xmm0
  .byte  196,226,125,19,192                  // vcvtph2ps     %xmm0,%ymm0
  .byte  197,177,109,202                     // vpunpckhqdq   %xmm2,%xmm9,%xmm1
  .byte  196,226,125,19,201                  // vcvtph2ps     %xmm1,%ymm1
  .byte  197,185,108,211                     // vpunpcklqdq   %xmm3,%xmm8,%xmm2
  .byte  196,226,125,19,210                  // vcvtph2ps     %xmm2,%ymm2
  .byte  197,185,109,219                     // vpunpckhqdq   %xmm3,%xmm8,%xmm3
  .byte  196,226,125,19,219                  // vcvtph2ps     %xmm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_hsw
.globl _sk_store_f16_hsw
FUNCTION(_sk_store_f16_hsw)
_sk_store_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  196,195,125,29,192,4                // vcvtps2ph     $0x4,%ymm0,%xmm8
  .byte  196,195,125,29,201,4                // vcvtps2ph     $0x4,%ymm1,%xmm9
  .byte  196,195,125,29,210,4                // vcvtps2ph     $0x4,%ymm2,%xmm10
  .byte  196,195,125,29,219,4                // vcvtps2ph     $0x4,%ymm3,%xmm11
  .byte  196,65,57,97,225                    // vpunpcklwd    %xmm9,%xmm8,%xmm12
  .byte  196,65,57,105,193                   // vpunpckhwd    %xmm9,%xmm8,%xmm8
  .byte  196,65,41,97,203                    // vpunpcklwd    %xmm11,%xmm10,%xmm9
  .byte  196,65,41,105,235                   // vpunpckhwd    %xmm11,%xmm10,%xmm13
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,57,98,205                    // vpunpckldq    %xmm13,%xmm8,%xmm9
  .byte  196,65,57,106,197                   // vpunpckhdq    %xmm13,%xmm8,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,27                              // jne           3621 <_sk_store_f16_hsw+0x65>
  .byte  197,120,17,28,248                   // vmovups       %xmm11,(%rax,%rdi,8)
  .byte  197,120,17,84,248,16                // vmovups       %xmm10,0x10(%rax,%rdi,8)
  .byte  197,120,17,76,248,32                // vmovups       %xmm9,0x20(%rax,%rdi,8)
  .byte  197,122,127,68,248,48               // vmovdqu       %xmm8,0x30(%rax,%rdi,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,121,214,28,248                  // vmovq         %xmm11,(%rax,%rdi,8)
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,241                             // je            361d <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,92,248,8                 // vmovhpd       %xmm11,0x8(%rax,%rdi,8)
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,229                             // jb            361d <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,84,248,16               // vmovq         %xmm10,0x10(%rax,%rdi,8)
  .byte  116,221                             // je            361d <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,84,248,24                // vmovhpd       %xmm10,0x18(%rax,%rdi,8)
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,209                             // jb            361d <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,76,248,32               // vmovq         %xmm9,0x20(%rax,%rdi,8)
  .byte  116,201                             // je            361d <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,76,248,40                // vmovhpd       %xmm9,0x28(%rax,%rdi,8)
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,189                             // jb            361d <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,68,248,48               // vmovq         %xmm8,0x30(%rax,%rdi,8)
  .byte  235,181                             // jmp           361d <_sk_store_f16_hsw+0x61>

HIDDEN _sk_load_u16_be_hsw
.globl _sk_load_u16_be_hsw
FUNCTION(_sk_load_u16_be_hsw)
_sk_load_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,141,4,189,0,0,0,0                // lea           0x0(,%rdi,4),%rax
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,204,0,0,0                    // jne           374a <_sk_load_u16_be_hsw+0xe2>
  .byte  196,65,121,16,4,64                  // vmovupd       (%r8,%rax,2),%xmm8
  .byte  196,193,121,16,84,64,16             // vmovupd       0x10(%r8,%rax,2),%xmm2
  .byte  196,193,121,16,92,64,32             // vmovupd       0x20(%r8,%rax,2),%xmm3
  .byte  196,65,122,111,76,64,48             // vmovdqu       0x30(%r8,%rax,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm11
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,21,17,18,0,0          // vbroadcastss  0x1211(%rip),%ymm10        # 48f0 <_sk_callback_hsw+0x427>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,226,125,51,201                  // vpmovzxwd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  196,193,49,108,211                  // vpunpcklqdq   %xmm11,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,226,125,51,210                  // vpmovzxwd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  196,193,49,109,219                  // vpunpckhqdq   %xmm11,%xmm9,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,226,125,51,219                  // vpmovzxwd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,123,16,4,64                  // vmovsd        (%r8,%rax,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,85                              // je            37b0 <_sk_load_u16_be_hsw+0x148>
  .byte  196,65,57,22,68,64,8                // vmovhpd       0x8(%r8,%rax,2),%xmm8,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,72                              // jb            37b0 <_sk_load_u16_be_hsw+0x148>
  .byte  196,193,123,16,84,64,16             // vmovsd        0x10(%r8,%rax,2),%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  116,72                              // je            37bd <_sk_load_u16_be_hsw+0x155>
  .byte  196,193,105,22,84,64,24             // vmovhpd       0x18(%r8,%rax,2),%xmm2,%xmm2
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,59                              // jb            37bd <_sk_load_u16_be_hsw+0x155>
  .byte  196,193,123,16,92,64,32             // vmovsd        0x20(%r8,%rax,2),%xmm3
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  15,132,6,255,255,255                // je            3699 <_sk_load_u16_be_hsw+0x31>
  .byte  196,193,97,22,92,64,40              // vmovhpd       0x28(%r8,%rax,2),%xmm3,%xmm3
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  15,130,245,254,255,255              // jb            3699 <_sk_load_u16_be_hsw+0x31>
  .byte  196,65,122,126,76,64,48             // vmovq         0x30(%r8,%rax,2),%xmm9
  .byte  233,233,254,255,255                 // jmpq          3699 <_sk_load_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,220,254,255,255                 // jmpq          3699 <_sk_load_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,211,254,255,255                 // jmpq          3699 <_sk_load_u16_be_hsw+0x31>

HIDDEN _sk_load_rgb_u16_be_hsw
.globl _sk_load_rgb_u16_be_hsw
FUNCTION(_sk_load_rgb_u16_be_hsw)
_sk_load_rgb_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,141,4,127                        // lea           (%rdi,%rdi,2),%rax
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,204,0,0,0                    // jne           38a4 <_sk_load_rgb_u16_be_hsw+0xde>
  .byte  196,193,122,111,4,64                // vmovdqu       (%r8,%rax,2),%xmm0
  .byte  196,193,122,111,84,64,12            // vmovdqu       0xc(%r8,%rax,2),%xmm2
  .byte  196,193,122,111,76,64,24            // vmovdqu       0x18(%r8,%rax,2),%xmm1
  .byte  196,193,122,111,92,64,32            // vmovdqu       0x20(%r8,%rax,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,21,162,16,0,0         // vbroadcastss  0x10a2(%rip),%ymm10        # 48f4 <_sk_callback_hsw+0x42b>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,226,125,51,201                  // vpmovzxwd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,177,108,211                     // vpunpcklqdq   %xmm3,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,226,125,51,210                  // vpmovzxwd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,86,16,0,0         // vbroadcastss  0x1056(%rip),%ymm3        # 48f8 <_sk_callback_hsw+0x42f>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,193,121,110,4,64                // vmovd         (%r8,%rax,2),%xmm0
  .byte  196,193,121,196,68,64,4,2           // vpinsrw       $0x2,0x4(%r8,%rax,2),%xmm0,%xmm0
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  117,5                               // jne           38bd <_sk_load_rgb_u16_be_hsw+0xf7>
  .byte  233,79,255,255,255                  // jmpq          380c <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,76,64,6             // vmovd         0x6(%r8,%rax,2),%xmm1
  .byte  196,65,113,196,68,64,10,2           // vpinsrw       $0x2,0xa(%r8,%rax,2),%xmm1,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,26                              // jb            38ec <_sk_load_rgb_u16_be_hsw+0x126>
  .byte  196,193,121,110,76,64,12            // vmovd         0xc(%r8,%rax,2),%xmm1
  .byte  196,193,113,196,84,64,16,2          // vpinsrw       $0x2,0x10(%r8,%rax,2),%xmm1,%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  117,10                              // jne           38f1 <_sk_load_rgb_u16_be_hsw+0x12b>
  .byte  233,32,255,255,255                  // jmpq          380c <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,27,255,255,255                  // jmpq          380c <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,76,64,18            // vmovd         0x12(%r8,%rax,2),%xmm1
  .byte  196,65,113,196,76,64,22,2           // vpinsrw       $0x2,0x16(%r8,%rax,2),%xmm1,%xmm9
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,26                              // jb            3920 <_sk_load_rgb_u16_be_hsw+0x15a>
  .byte  196,193,121,110,76,64,24            // vmovd         0x18(%r8,%rax,2),%xmm1
  .byte  196,193,113,196,76,64,28,2          // vpinsrw       $0x2,0x1c(%r8,%rax,2),%xmm1,%xmm1
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  117,10                              // jne           3925 <_sk_load_rgb_u16_be_hsw+0x15f>
  .byte  233,236,254,255,255                 // jmpq          380c <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,231,254,255,255                 // jmpq          380c <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,92,64,30            // vmovd         0x1e(%r8,%rax,2),%xmm3
  .byte  196,65,97,196,92,64,34,2            // vpinsrw       $0x2,0x22(%r8,%rax,2),%xmm3,%xmm11
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,20                              // jb            394e <_sk_load_rgb_u16_be_hsw+0x188>
  .byte  196,193,121,110,92,64,36            // vmovd         0x24(%r8,%rax,2),%xmm3
  .byte  196,193,97,196,92,64,40,2           // vpinsrw       $0x2,0x28(%r8,%rax,2),%xmm3,%xmm3
  .byte  233,190,254,255,255                 // jmpq          380c <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,185,254,255,255                 // jmpq          380c <_sk_load_rgb_u16_be_hsw+0x46>

HIDDEN _sk_store_u16_be_hsw
.globl _sk_store_u16_be_hsw
FUNCTION(_sk_store_u16_be_hsw)
_sk_store_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,141,4,189,0,0,0,0                // lea           0x0(,%rdi,4),%rax
  .byte  196,98,125,24,5,147,15,0,0          // vbroadcastss  0xf93(%rip),%ymm8        # 48fc <_sk_callback_hsw+0x433>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,67,125,25,202,1                 // vextractf128  $0x1,%ymm9,%xmm10
  .byte  196,66,49,43,202                    // vpackusdw     %xmm10,%xmm9,%xmm9
  .byte  196,193,41,113,241,8                // vpsllw        $0x8,%xmm9,%xmm10
  .byte  196,193,49,113,209,8                // vpsrlw        $0x8,%xmm9,%xmm9
  .byte  196,65,41,235,201                   // vpor          %xmm9,%xmm10,%xmm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,67,125,25,211,1                 // vextractf128  $0x1,%ymm10,%xmm11
  .byte  196,66,41,43,211                    // vpackusdw     %xmm11,%xmm10,%xmm10
  .byte  196,193,33,113,242,8                // vpsllw        $0x8,%xmm10,%xmm11
  .byte  196,193,41,113,210,8                // vpsrlw        $0x8,%xmm10,%xmm10
  .byte  196,65,33,235,210                   // vpor          %xmm10,%xmm11,%xmm10
  .byte  196,65,108,89,216                   // vmulps        %ymm8,%ymm2,%ymm11
  .byte  196,65,125,91,219                   // vcvtps2dq     %ymm11,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,66,33,43,220                    // vpackusdw     %xmm12,%xmm11,%xmm11
  .byte  196,193,25,113,243,8                // vpsllw        $0x8,%xmm11,%xmm12
  .byte  196,193,33,113,211,8                // vpsrlw        $0x8,%xmm11,%xmm11
  .byte  196,65,25,235,219                   // vpor          %xmm11,%xmm12,%xmm11
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,196,1                 // vextractf128  $0x1,%ymm8,%xmm12
  .byte  196,66,57,43,196                    // vpackusdw     %xmm12,%xmm8,%xmm8
  .byte  196,193,25,113,240,8                // vpsllw        $0x8,%xmm8,%xmm12
  .byte  196,193,57,113,208,8                // vpsrlw        $0x8,%xmm8,%xmm8
  .byte  196,65,25,235,192                   // vpor          %xmm8,%xmm12,%xmm8
  .byte  196,65,49,97,226                    // vpunpcklwd    %xmm10,%xmm9,%xmm12
  .byte  196,65,49,105,234                   // vpunpckhwd    %xmm10,%xmm9,%xmm13
  .byte  196,65,33,97,200                    // vpunpcklwd    %xmm8,%xmm11,%xmm9
  .byte  196,65,33,105,192                   // vpunpckhwd    %xmm8,%xmm11,%xmm8
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,17,98,200                    // vpunpckldq    %xmm8,%xmm13,%xmm9
  .byte  196,65,17,106,192                   // vpunpckhdq    %xmm8,%xmm13,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,31                              // jne           3a4d <_sk_store_u16_be_hsw+0xfa>
  .byte  196,65,120,17,28,64                 // vmovups       %xmm11,(%r8,%rax,2)
  .byte  196,65,120,17,84,64,16              // vmovups       %xmm10,0x10(%r8,%rax,2)
  .byte  196,65,120,17,76,64,32              // vmovups       %xmm9,0x20(%r8,%rax,2)
  .byte  196,65,122,127,68,64,48             // vmovdqu       %xmm8,0x30(%r8,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,214,28,64                // vmovq         %xmm11,(%r8,%rax,2)
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,240                             // je            3a49 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,92,64,8               // vmovhpd       %xmm11,0x8(%r8,%rax,2)
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,227                             // jb            3a49 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,84,64,16             // vmovq         %xmm10,0x10(%r8,%rax,2)
  .byte  116,218                             // je            3a49 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,84,64,24              // vmovhpd       %xmm10,0x18(%r8,%rax,2)
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,205                             // jb            3a49 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,76,64,32             // vmovq         %xmm9,0x20(%r8,%rax,2)
  .byte  116,196                             // je            3a49 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,76,64,40              // vmovhpd       %xmm9,0x28(%r8,%rax,2)
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,183                             // jb            3a49 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,68,64,48             // vmovq         %xmm8,0x30(%r8,%rax,2)
  .byte  235,174                             // jmp           3a49 <_sk_store_u16_be_hsw+0xf6>

HIDDEN _sk_load_f32_hsw
.globl _sk_load_f32_hsw
FUNCTION(_sk_load_f32_hsw)
_sk_load_f32_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  119,110                             // ja            3b11 <_sk_load_f32_hsw+0x76>
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  76,141,12,189,0,0,0,0               // lea           0x0(,%rdi,4),%r9
  .byte  76,141,21,135,0,0,0                 // lea           0x87(%rip),%r10        # 3b3c <_sk_load_f32_hsw+0xa1>
  .byte  73,99,4,138                         // movslq        (%r10,%rcx,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,3,125,24,68,136,112,1           // vinsertf128   $0x1,0x70(%r8,%r9,4),%ymm0,%ymm8
  .byte  196,131,125,24,92,136,96,1          // vinsertf128   $0x1,0x60(%r8,%r9,4),%ymm0,%ymm3
  .byte  196,131,125,24,76,136,80,1          // vinsertf128   $0x1,0x50(%r8,%r9,4),%ymm0,%ymm1
  .byte  196,131,125,24,84,136,64,1          // vinsertf128   $0x1,0x40(%r8,%r9,4),%ymm0,%ymm2
  .byte  196,129,121,16,68,136,48            // vmovupd       0x30(%r8,%r9,4),%xmm0
  .byte  196,195,125,13,192,12               // vblendpd      $0xc,%ymm8,%ymm0,%ymm0
  .byte  196,1,121,16,68,136,32              // vmovupd       0x20(%r8,%r9,4),%xmm8
  .byte  196,99,61,13,203,12                 // vblendpd      $0xc,%ymm3,%ymm8,%ymm9
  .byte  196,129,121,16,92,136,16            // vmovupd       0x10(%r8,%r9,4),%xmm3
  .byte  196,99,101,13,209,12                // vblendpd      $0xc,%ymm1,%ymm3,%ymm10
  .byte  196,129,121,16,12,136               // vmovupd       (%r8,%r9,4),%xmm1
  .byte  196,227,117,13,202,12               // vblendpd      $0xc,%ymm2,%ymm1,%ymm1
  .byte  196,193,116,20,210                  // vunpcklps     %ymm10,%ymm1,%ymm2
  .byte  196,193,116,21,218                  // vunpckhps     %ymm10,%ymm1,%ymm3
  .byte  197,180,20,200                      // vunpcklps     %ymm0,%ymm9,%ymm1
  .byte  197,52,21,192                       // vunpckhps     %ymm0,%ymm9,%ymm8
  .byte  197,237,20,193                      // vunpcklpd     %ymm1,%ymm2,%ymm0
  .byte  197,237,21,201                      // vunpckhpd     %ymm1,%ymm2,%ymm1
  .byte  196,193,101,20,208                  // vunpcklpd     %ymm8,%ymm3,%ymm2
  .byte  196,193,101,21,216                  // vunpckhpd     %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  15,31,0                             // nopl          (%rax)
  .byte  130                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  188,255,255,255,175                 // mov           $0xafffffff,%esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,162,255,255,255,154             // jmpq          *-0x65000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,146,255,255,255,138             // callq         *-0x75000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_f32_hsw
.globl _sk_store_f32_hsw
FUNCTION(_sk_store_f32_hsw)
_sk_store_f32_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,141,4,189,0,0,0,0                // lea           0x0(,%rdi,4),%rax
  .byte  197,124,20,193                      // vunpcklps     %ymm1,%ymm0,%ymm8
  .byte  197,124,21,217                      // vunpckhps     %ymm1,%ymm0,%ymm11
  .byte  197,108,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm9
  .byte  197,108,21,227                      // vunpckhps     %ymm3,%ymm2,%ymm12
  .byte  196,65,61,20,209                    // vunpcklpd     %ymm9,%ymm8,%ymm10
  .byte  196,65,61,21,201                    // vunpckhpd     %ymm9,%ymm8,%ymm9
  .byte  196,65,37,20,196                    // vunpcklpd     %ymm12,%ymm11,%ymm8
  .byte  196,65,37,21,220                    // vunpckhpd     %ymm12,%ymm11,%ymm11
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,55                              // jne           3bc9 <_sk_store_f32_hsw+0x6d>
  .byte  196,67,45,24,225,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm12
  .byte  196,67,61,24,235,1                  // vinsertf128   $0x1,%xmm11,%ymm8,%ymm13
  .byte  196,67,45,6,201,49                  // vperm2f128    $0x31,%ymm9,%ymm10,%ymm9
  .byte  196,67,61,6,195,49                  // vperm2f128    $0x31,%ymm11,%ymm8,%ymm8
  .byte  196,65,125,17,36,128                // vmovupd       %ymm12,(%r8,%rax,4)
  .byte  196,65,125,17,108,128,32            // vmovupd       %ymm13,0x20(%r8,%rax,4)
  .byte  196,65,125,17,76,128,64             // vmovupd       %ymm9,0x40(%r8,%rax,4)
  .byte  196,65,125,17,68,128,96             // vmovupd       %ymm8,0x60(%r8,%rax,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,17,20,128                // vmovupd       %xmm10,(%r8,%rax,4)
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,240                             // je            3bc5 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,76,128,16             // vmovupd       %xmm9,0x10(%r8,%rax,4)
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,227                             // jb            3bc5 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,68,128,32             // vmovupd       %xmm8,0x20(%r8,%rax,4)
  .byte  116,218                             // je            3bc5 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,92,128,48             // vmovupd       %xmm11,0x30(%r8,%rax,4)
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,205                             // jb            3bc5 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,84,128,64,1           // vextractf128  $0x1,%ymm10,0x40(%r8,%rax,4)
  .byte  116,195                             // je            3bc5 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,76,128,80,1           // vextractf128  $0x1,%ymm9,0x50(%r8,%rax,4)
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,181                             // jb            3bc5 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,68,128,96,1           // vextractf128  $0x1,%ymm8,0x60(%r8,%rax,4)
  .byte  235,171                             // jmp           3bc5 <_sk_store_f32_hsw+0x69>

HIDDEN _sk_clamp_x_hsw
.globl _sk_clamp_x_hsw
FUNCTION(_sk_clamp_x_hsw)
_sk_clamp_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_hsw
.globl _sk_clamp_y_hsw
FUNCTION(_sk_clamp_y_hsw)
_sk_clamp_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,201                      // vmaxps        %ymm1,%ymm8,%ymm1
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_hsw
.globl _sk_repeat_x_hsw
FUNCTION(_sk_repeat_x_hsw)
_sk_repeat_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,65,124,94,200                   // vdivps        %ymm8,%ymm0,%ymm9
  .byte  196,67,125,8,201,1                  // vroundps      $0x1,%ymm9,%ymm9
  .byte  196,98,61,172,200                   // vfnmadd213ps  %ymm0,%ymm8,%ymm9
  .byte  196,193,52,93,192                   // vminps        %ymm8,%ymm9,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_hsw
.globl _sk_repeat_y_hsw
FUNCTION(_sk_repeat_y_hsw)
_sk_repeat_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,65,116,94,200                   // vdivps        %ymm8,%ymm1,%ymm9
  .byte  196,67,125,8,201,1                  // vroundps      $0x1,%ymm9,%ymm9
  .byte  196,98,61,172,201                   // vfnmadd213ps  %ymm1,%ymm8,%ymm9
  .byte  196,193,52,93,200                   // vminps        %ymm8,%ymm9,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_hsw
.globl _sk_mirror_x_hsw
FUNCTION(_sk_mirror_x_hsw)
_sk_mirror_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,122,16,0                        // vmovss        (%rax),%xmm8
  .byte  196,66,125,24,200                   // vbroadcastss  %xmm8,%ymm9
  .byte  196,65,124,92,209                   // vsubps        %ymm9,%ymm0,%ymm10
  .byte  196,193,58,88,192                   // vaddss        %xmm8,%xmm8,%xmm0
  .byte  196,226,125,24,192                  // vbroadcastss  %xmm0,%ymm0
  .byte  197,44,94,192                       // vdivps        %ymm0,%ymm10,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,66,125,172,194                  // vfnmadd213ps  %ymm10,%ymm0,%ymm8
  .byte  196,193,60,92,193                   // vsubps        %ymm9,%ymm8,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,188,84,192                      // vandps        %ymm0,%ymm8,%ymm0
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_hsw
.globl _sk_mirror_y_hsw
FUNCTION(_sk_mirror_y_hsw)
_sk_mirror_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,122,16,0                        // vmovss        (%rax),%xmm8
  .byte  196,66,125,24,200                   // vbroadcastss  %xmm8,%ymm9
  .byte  196,65,116,92,209                   // vsubps        %ymm9,%ymm1,%ymm10
  .byte  196,193,58,88,200                   // vaddss        %xmm8,%xmm8,%xmm1
  .byte  196,226,125,24,201                  // vbroadcastss  %xmm1,%ymm1
  .byte  197,44,94,193                       // vdivps        %ymm1,%ymm10,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,66,117,172,194                  // vfnmadd213ps  %ymm10,%ymm1,%ymm8
  .byte  196,193,60,92,201                   // vsubps        %ymm9,%ymm8,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,193                       // vsubps        %ymm1,%ymm8,%ymm8
  .byte  197,188,84,201                      // vandps        %ymm1,%ymm8,%ymm1
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_hsw
.globl _sk_luminance_to_alpha_hsw
FUNCTION(_sk_luminance_to_alpha_hsw)
_sk_luminance_to_alpha_hsw:
  .byte  196,226,125,24,29,227,11,0,0        // vbroadcastss  0xbe3(%rip),%ymm3        # 4900 <_sk_callback_hsw+0x437>
  .byte  196,98,125,24,5,222,11,0,0          // vbroadcastss  0xbde(%rip),%ymm8        # 4904 <_sk_callback_hsw+0x43b>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,125,184,203                 // vfmadd231ps   %ymm3,%ymm0,%ymm1
  .byte  196,226,125,24,29,207,11,0,0        // vbroadcastss  0xbcf(%rip),%ymm3        # 4908 <_sk_callback_hsw+0x43f>
  .byte  196,226,109,168,217                 // vfmadd213ps   %ymm1,%ymm2,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_hsw
.globl _sk_matrix_2x3_hsw
FUNCTION(_sk_matrix_2x3_hsw)
_sk_matrix_2x3_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,12                 // vbroadcastss  0xc(%rax),%ymm11
  .byte  196,98,125,24,72,20                 // vbroadcastss  0x14(%rax),%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_hsw
.globl _sk_matrix_3x4_hsw
FUNCTION(_sk_matrix_3x4_hsw)
_sk_matrix_3x4_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,12                 // vbroadcastss  0xc(%rax),%ymm10
  .byte  196,98,125,24,88,24                 // vbroadcastss  0x18(%rax),%ymm11
  .byte  196,98,125,24,64,36                 // vbroadcastss  0x24(%rax),%ymm8
  .byte  196,66,109,184,195                  // vfmadd231ps   %ymm11,%ymm2,%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,16                 // vbroadcastss  0x10(%rax),%ymm11
  .byte  196,98,125,24,96,28                 // vbroadcastss  0x1c(%rax),%ymm12
  .byte  196,98,125,24,72,40                 // vbroadcastss  0x28(%rax),%ymm9
  .byte  196,66,109,184,204                  // vfmadd231ps   %ymm12,%ymm2,%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,98,125,24,96,20                 // vbroadcastss  0x14(%rax),%ymm12
  .byte  196,98,125,24,104,32                // vbroadcastss  0x20(%rax),%ymm13
  .byte  196,98,125,24,80,44                 // vbroadcastss  0x2c(%rax),%ymm10
  .byte  196,66,109,184,213                  // vfmadd231ps   %ymm13,%ymm2,%ymm10
  .byte  196,66,117,184,212                  // vfmadd231ps   %ymm12,%ymm1,%ymm10
  .byte  196,66,125,184,211                  // vfmadd231ps   %ymm11,%ymm0,%ymm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_hsw
.globl _sk_matrix_4x5_hsw
FUNCTION(_sk_matrix_4x5_hsw)
_sk_matrix_4x5_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,32                 // vbroadcastss  0x20(%rax),%ymm11
  .byte  196,98,125,24,96,48                 // vbroadcastss  0x30(%rax),%ymm12
  .byte  196,98,125,24,64,64                 // vbroadcastss  0x40(%rax),%ymm8
  .byte  196,66,101,184,196                  // vfmadd231ps   %ymm12,%ymm3,%ymm8
  .byte  196,66,109,184,195                  // vfmadd231ps   %ymm11,%ymm2,%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,98,125,24,96,36                 // vbroadcastss  0x24(%rax),%ymm12
  .byte  196,98,125,24,104,52                // vbroadcastss  0x34(%rax),%ymm13
  .byte  196,98,125,24,72,68                 // vbroadcastss  0x44(%rax),%ymm9
  .byte  196,66,101,184,205                  // vfmadd231ps   %ymm13,%ymm3,%ymm9
  .byte  196,66,109,184,204                  // vfmadd231ps   %ymm12,%ymm2,%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,98,125,24,96,24                 // vbroadcastss  0x18(%rax),%ymm12
  .byte  196,98,125,24,104,40                // vbroadcastss  0x28(%rax),%ymm13
  .byte  196,98,125,24,112,56                // vbroadcastss  0x38(%rax),%ymm14
  .byte  196,98,125,24,80,72                 // vbroadcastss  0x48(%rax),%ymm10
  .byte  196,66,101,184,214                  // vfmadd231ps   %ymm14,%ymm3,%ymm10
  .byte  196,66,109,184,213                  // vfmadd231ps   %ymm13,%ymm2,%ymm10
  .byte  196,66,117,184,212                  // vfmadd231ps   %ymm12,%ymm1,%ymm10
  .byte  196,66,125,184,211                  // vfmadd231ps   %ymm11,%ymm0,%ymm10
  .byte  196,98,125,24,96,12                 // vbroadcastss  0xc(%rax),%ymm12
  .byte  196,98,125,24,104,28                // vbroadcastss  0x1c(%rax),%ymm13
  .byte  196,98,125,24,112,44                // vbroadcastss  0x2c(%rax),%ymm14
  .byte  196,98,125,24,120,60                // vbroadcastss  0x3c(%rax),%ymm15
  .byte  196,98,125,24,88,76                 // vbroadcastss  0x4c(%rax),%ymm11
  .byte  196,66,101,184,223                  // vfmadd231ps   %ymm15,%ymm3,%ymm11
  .byte  196,66,109,184,222                  // vfmadd231ps   %ymm14,%ymm2,%ymm11
  .byte  196,66,117,184,221                  // vfmadd231ps   %ymm13,%ymm1,%ymm11
  .byte  196,66,125,184,220                  // vfmadd231ps   %ymm12,%ymm0,%ymm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  197,124,41,219                      // vmovaps       %ymm11,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_hsw
.globl _sk_matrix_perspective_hsw
FUNCTION(_sk_matrix_perspective_hsw)
_sk_matrix_perspective_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,66,117,184,209                  // vfmadd231ps   %ymm9,%ymm1,%ymm10
  .byte  196,66,125,184,208                  // vfmadd231ps   %ymm8,%ymm0,%ymm10
  .byte  196,98,125,24,64,12                 // vbroadcastss  0xc(%rax),%ymm8
  .byte  196,98,125,24,72,16                 // vbroadcastss  0x10(%rax),%ymm9
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,66,117,184,217                  // vfmadd231ps   %ymm9,%ymm1,%ymm11
  .byte  196,66,125,184,216                  // vfmadd231ps   %ymm8,%ymm0,%ymm11
  .byte  196,98,125,24,64,24                 // vbroadcastss  0x18(%rax),%ymm8
  .byte  196,98,125,24,72,28                 // vbroadcastss  0x1c(%rax),%ymm9
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  196,66,117,184,225                  // vfmadd231ps   %ymm9,%ymm1,%ymm12
  .byte  196,66,125,184,224                  // vfmadd231ps   %ymm8,%ymm0,%ymm12
  .byte  196,193,124,83,204                  // vrcpps        %ymm12,%ymm1
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_hsw
.globl _sk_gradient_hsw
FUNCTION(_sk_gradient_hsw)
_sk_gradient_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,98,125,24,72,28                 // vbroadcastss  0x1c(%rax),%ymm9
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,132,143,0,0,0                    // je            4011 <_sk_gradient_hsw+0xb5>
  .byte  72,139,64,8                         // mov           0x8(%rax),%rax
  .byte  72,131,192,32                       // add           $0x20,%rax
  .byte  196,65,28,87,228                    // vxorps        %ymm12,%ymm12,%ymm12
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  196,98,125,24,104,224               // vbroadcastss  -0x20(%rax),%ymm13
  .byte  196,65,124,194,237,1                // vcmpltps      %ymm13,%ymm0,%ymm13
  .byte  196,98,125,24,112,228               // vbroadcastss  -0x1c(%rax),%ymm14
  .byte  196,67,13,74,228,208                // vblendvps     %ymm13,%ymm12,%ymm14,%ymm12
  .byte  196,98,125,24,112,232               // vbroadcastss  -0x18(%rax),%ymm14
  .byte  196,227,13,74,201,208               // vblendvps     %ymm13,%ymm1,%ymm14,%ymm1
  .byte  196,98,125,24,112,236               // vbroadcastss  -0x14(%rax),%ymm14
  .byte  196,227,13,74,210,208               // vblendvps     %ymm13,%ymm2,%ymm14,%ymm2
  .byte  196,98,125,24,112,240               // vbroadcastss  -0x10(%rax),%ymm14
  .byte  196,227,13,74,219,208               // vblendvps     %ymm13,%ymm3,%ymm14,%ymm3
  .byte  196,98,125,24,112,244               // vbroadcastss  -0xc(%rax),%ymm14
  .byte  196,67,13,74,192,208                // vblendvps     %ymm13,%ymm8,%ymm14,%ymm8
  .byte  196,98,125,24,112,248               // vbroadcastss  -0x8(%rax),%ymm14
  .byte  196,67,13,74,219,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm11
  .byte  196,98,125,24,112,252               // vbroadcastss  -0x4(%rax),%ymm14
  .byte  196,67,13,74,210,208                // vblendvps     %ymm13,%ymm10,%ymm14,%ymm10
  .byte  196,98,125,24,48                    // vbroadcastss  (%rax),%ymm14
  .byte  196,67,13,74,201,208                // vblendvps     %ymm13,%ymm9,%ymm14,%ymm9
  .byte  72,131,192,36                       // add           $0x24,%rax
  .byte  73,255,200                          // dec           %r8
  .byte  117,140                             // jne           3f9b <_sk_gradient_hsw+0x3f>
  .byte  235,17                              // jmp           4022 <_sk_gradient_hsw+0xc6>
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  196,65,28,87,228                    // vxorps        %ymm12,%ymm12,%ymm12
  .byte  196,66,125,184,196                  // vfmadd231ps   %ymm12,%ymm0,%ymm8
  .byte  196,194,125,168,203                 // vfmadd213ps   %ymm11,%ymm0,%ymm1
  .byte  196,194,125,168,210                 // vfmadd213ps   %ymm10,%ymm0,%ymm2
  .byte  196,194,125,168,217                 // vfmadd213ps   %ymm9,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_hsw
.globl _sk_evenly_spaced_2_stop_gradient_hsw
FUNCTION(_sk_evenly_spaced_2_stop_gradient_hsw)
_sk_evenly_spaced_2_stop_gradient_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,98,125,184,193                  // vfmadd231ps   %ymm1,%ymm0,%ymm8
  .byte  196,226,125,24,80,4                 // vbroadcastss  0x4(%rax),%ymm2
  .byte  196,226,125,24,72,20                // vbroadcastss  0x14(%rax),%ymm1
  .byte  196,226,125,184,202                 // vfmadd231ps   %ymm2,%ymm0,%ymm1
  .byte  196,226,125,24,88,8                 // vbroadcastss  0x8(%rax),%ymm3
  .byte  196,226,125,24,80,24                // vbroadcastss  0x18(%rax),%ymm2
  .byte  196,226,125,184,211                 // vfmadd231ps   %ymm3,%ymm0,%ymm2
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,226,125,24,88,28                // vbroadcastss  0x1c(%rax),%ymm3
  .byte  196,194,125,184,217                 // vfmadd231ps   %ymm9,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_hsw
.globl _sk_xy_to_unit_angle_hsw
FUNCTION(_sk_xy_to_unit_angle_hsw)
_sk_xy_to_unit_angle_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,200                       // vsubps        %ymm0,%ymm8,%ymm9
  .byte  197,52,84,200                       // vandps        %ymm0,%ymm9,%ymm9
  .byte  197,60,92,209                       // vsubps        %ymm1,%ymm8,%ymm10
  .byte  197,44,84,209                       // vandps        %ymm1,%ymm10,%ymm10
  .byte  196,65,52,93,218                    // vminps        %ymm10,%ymm9,%ymm11
  .byte  196,65,52,95,226                    // vmaxps        %ymm10,%ymm9,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  196,65,36,89,227                    // vmulps        %ymm11,%ymm11,%ymm12
  .byte  196,98,125,24,45,79,8,0,0           // vbroadcastss  0x84f(%rip),%ymm13        # 490c <_sk_callback_hsw+0x443>
  .byte  196,98,125,24,53,74,8,0,0           // vbroadcastss  0x84a(%rip),%ymm14        # 4910 <_sk_callback_hsw+0x447>
  .byte  196,66,29,184,245                   // vfmadd231ps   %ymm13,%ymm12,%ymm14
  .byte  196,98,125,24,45,64,8,0,0           // vbroadcastss  0x840(%rip),%ymm13        # 4914 <_sk_callback_hsw+0x44b>
  .byte  196,66,29,184,238                   // vfmadd231ps   %ymm14,%ymm12,%ymm13
  .byte  196,98,125,24,53,54,8,0,0           // vbroadcastss  0x836(%rip),%ymm14        # 4918 <_sk_callback_hsw+0x44f>
  .byte  196,66,29,184,245                   // vfmadd231ps   %ymm13,%ymm12,%ymm14
  .byte  196,65,36,89,222                    // vmulps        %ymm14,%ymm11,%ymm11
  .byte  196,65,52,194,202,1                 // vcmpltps      %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,33,8,0,0           // vbroadcastss  0x821(%rip),%ymm10        # 491c <_sk_callback_hsw+0x453>
  .byte  196,65,44,92,211                    // vsubps        %ymm11,%ymm10,%ymm10
  .byte  196,67,37,74,202,144                // vblendvps     %ymm9,%ymm10,%ymm11,%ymm9
  .byte  196,193,124,194,192,1               // vcmpltps      %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,21,11,8,0,0           // vbroadcastss  0x80b(%rip),%ymm10        # 4920 <_sk_callback_hsw+0x457>
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  196,65,116,194,200,1                // vcmpltps      %ymm8,%ymm1,%ymm9
  .byte  196,98,125,24,21,245,7,0,0          // vbroadcastss  0x7f5(%rip),%ymm10        # 4924 <_sk_callback_hsw+0x45b>
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  196,195,125,74,194,144              // vblendvps     %ymm9,%ymm10,%ymm0,%ymm0
  .byte  196,65,124,194,200,3                // vcmpunordps   %ymm8,%ymm0,%ymm9
  .byte  196,195,125,74,192,144              // vblendvps     %ymm9,%ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_hsw
.globl _sk_xy_to_radius_hsw
FUNCTION(_sk_xy_to_radius_hsw)
_sk_xy_to_radius_hsw:
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,98,125,184,192                  // vfmadd231ps   %ymm0,%ymm0,%ymm8
  .byte  196,193,124,82,192                  // vrsqrtps      %ymm8,%ymm0
  .byte  197,252,83,192                      // vrcpps        %ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_hsw
.globl _sk_save_xy_hsw
FUNCTION(_sk_save_xy_hsw)
_sk_save_xy_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,190,7,0,0           // vbroadcastss  0x7be(%rip),%ymm8        # 4928 <_sk_callback_hsw+0x45f>
  .byte  196,65,124,88,200                   // vaddps        %ymm8,%ymm0,%ymm9
  .byte  196,67,125,8,209,1                  // vroundps      $0x1,%ymm9,%ymm10
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,88,192                   // vaddps        %ymm8,%ymm1,%ymm8
  .byte  196,67,125,8,208,1                  // vroundps      $0x1,%ymm8,%ymm10
  .byte  196,65,60,92,194                    // vsubps        %ymm10,%ymm8,%ymm8
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,124,17,72,64                    // vmovups       %ymm9,0x40(%rax)
  .byte  197,124,17,64,96                    // vmovups       %ymm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_hsw
.globl _sk_accumulate_hsw
FUNCTION(_sk_accumulate_hsw)
_sk_accumulate_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,16,128,128,0,0,0            // vmovups       0x80(%rax),%ymm8
  .byte  197,60,89,128,160,0,0,0             // vmulps        0xa0(%rax),%ymm8,%ymm8
  .byte  196,226,61,184,224                  // vfmadd231ps   %ymm0,%ymm8,%ymm4
  .byte  196,226,61,184,233                  // vfmadd231ps   %ymm1,%ymm8,%ymm5
  .byte  196,226,61,184,242                  // vfmadd231ps   %ymm2,%ymm8,%ymm6
  .byte  196,98,101,168,199                  // vfmadd213ps   %ymm7,%ymm3,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,199                      // vmovaps       %ymm8,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_hsw
.globl _sk_bilinear_nx_hsw
FUNCTION(_sk_bilinear_nx_hsw)
_sk_bilinear_nx_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,82,7,0,0           // vbroadcastss  0x752(%rip),%ymm0        # 492c <_sk_callback_hsw+0x463>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,73,7,0,0            // vbroadcastss  0x749(%rip),%ymm8        # 4930 <_sk_callback_hsw+0x467>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_hsw
.globl _sk_bilinear_px_hsw
FUNCTION(_sk_bilinear_px_hsw)
_sk_bilinear_px_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,49,7,0,0           // vbroadcastss  0x731(%rip),%ymm0        # 4934 <_sk_callback_hsw+0x46b>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_hsw
.globl _sk_bilinear_ny_hsw
FUNCTION(_sk_bilinear_ny_hsw)
_sk_bilinear_ny_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,21,7,0,0          // vbroadcastss  0x715(%rip),%ymm1        # 4938 <_sk_callback_hsw+0x46f>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,11,7,0,0            // vbroadcastss  0x70b(%rip),%ymm8        # 493c <_sk_callback_hsw+0x473>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_hsw
.globl _sk_bilinear_py_hsw
FUNCTION(_sk_bilinear_py_hsw)
_sk_bilinear_py_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,243,6,0,0         // vbroadcastss  0x6f3(%rip),%ymm1        # 4940 <_sk_callback_hsw+0x477>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_hsw
.globl _sk_bicubic_n3x_hsw
FUNCTION(_sk_bicubic_n3x_hsw)
_sk_bicubic_n3x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,214,6,0,0          // vbroadcastss  0x6d6(%rip),%ymm0        # 4944 <_sk_callback_hsw+0x47b>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,205,6,0,0           // vbroadcastss  0x6cd(%rip),%ymm8        # 4948 <_sk_callback_hsw+0x47f>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,190,6,0,0          // vbroadcastss  0x6be(%rip),%ymm10        # 494c <_sk_callback_hsw+0x483>
  .byte  196,98,125,24,29,185,6,0,0          // vbroadcastss  0x6b9(%rip),%ymm11        # 4950 <_sk_callback_hsw+0x487>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,36,89,193                    // vmulps        %ymm9,%ymm11,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_hsw
.globl _sk_bicubic_n1x_hsw
FUNCTION(_sk_bicubic_n1x_hsw)
_sk_bicubic_n1x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,156,6,0,0          // vbroadcastss  0x69c(%rip),%ymm0        # 4954 <_sk_callback_hsw+0x48b>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,147,6,0,0           // vbroadcastss  0x693(%rip),%ymm8        # 4958 <_sk_callback_hsw+0x48f>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,137,6,0,0          // vbroadcastss  0x689(%rip),%ymm9        # 495c <_sk_callback_hsw+0x493>
  .byte  196,98,125,24,21,132,6,0,0          // vbroadcastss  0x684(%rip),%ymm10        # 4960 <_sk_callback_hsw+0x497>
  .byte  196,66,61,168,209                   // vfmadd213ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,13,122,6,0,0          // vbroadcastss  0x67a(%rip),%ymm9        # 4964 <_sk_callback_hsw+0x49b>
  .byte  196,66,61,184,202                   // vfmadd231ps   %ymm10,%ymm8,%ymm9
  .byte  196,98,125,24,21,112,6,0,0          // vbroadcastss  0x670(%rip),%ymm10        # 4968 <_sk_callback_hsw+0x49f>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  197,124,17,144,128,0,0,0            // vmovups       %ymm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_hsw
.globl _sk_bicubic_p1x_hsw
FUNCTION(_sk_bicubic_p1x_hsw)
_sk_bicubic_p1x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,88,6,0,0            // vbroadcastss  0x658(%rip),%ymm8        # 496c <_sk_callback_hsw+0x4a3>
  .byte  197,188,88,0                        // vaddps        (%rax),%ymm8,%ymm0
  .byte  197,124,16,72,64                    // vmovups       0x40(%rax),%ymm9
  .byte  196,98,125,24,21,74,6,0,0           // vbroadcastss  0x64a(%rip),%ymm10        # 4970 <_sk_callback_hsw+0x4a7>
  .byte  196,98,125,24,29,69,6,0,0           // vbroadcastss  0x645(%rip),%ymm11        # 4974 <_sk_callback_hsw+0x4ab>
  .byte  196,66,53,168,218                   // vfmadd213ps   %ymm10,%ymm9,%ymm11
  .byte  196,66,53,168,216                   // vfmadd213ps   %ymm8,%ymm9,%ymm11
  .byte  196,98,125,24,5,54,6,0,0            // vbroadcastss  0x636(%rip),%ymm8        # 4978 <_sk_callback_hsw+0x4af>
  .byte  196,66,53,184,195                   // vfmadd231ps   %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_hsw
.globl _sk_bicubic_p3x_hsw
FUNCTION(_sk_bicubic_p3x_hsw)
_sk_bicubic_p3x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,30,6,0,0           // vbroadcastss  0x61e(%rip),%ymm0        # 497c <_sk_callback_hsw+0x4b3>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,11,6,0,0           // vbroadcastss  0x60b(%rip),%ymm10        # 4980 <_sk_callback_hsw+0x4b7>
  .byte  196,98,125,24,29,6,6,0,0            // vbroadcastss  0x606(%rip),%ymm11        # 4984 <_sk_callback_hsw+0x4bb>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,52,89,195                    // vmulps        %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_hsw
.globl _sk_bicubic_n3y_hsw
FUNCTION(_sk_bicubic_n3y_hsw)
_sk_bicubic_n3y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,233,5,0,0         // vbroadcastss  0x5e9(%rip),%ymm1        # 4988 <_sk_callback_hsw+0x4bf>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,223,5,0,0           // vbroadcastss  0x5df(%rip),%ymm8        # 498c <_sk_callback_hsw+0x4c3>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,208,5,0,0          // vbroadcastss  0x5d0(%rip),%ymm10        # 4990 <_sk_callback_hsw+0x4c7>
  .byte  196,98,125,24,29,203,5,0,0          // vbroadcastss  0x5cb(%rip),%ymm11        # 4994 <_sk_callback_hsw+0x4cb>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,36,89,193                    // vmulps        %ymm9,%ymm11,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_hsw
.globl _sk_bicubic_n1y_hsw
FUNCTION(_sk_bicubic_n1y_hsw)
_sk_bicubic_n1y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,174,5,0,0         // vbroadcastss  0x5ae(%rip),%ymm1        # 4998 <_sk_callback_hsw+0x4cf>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,164,5,0,0           // vbroadcastss  0x5a4(%rip),%ymm8        # 499c <_sk_callback_hsw+0x4d3>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,154,5,0,0          // vbroadcastss  0x59a(%rip),%ymm9        # 49a0 <_sk_callback_hsw+0x4d7>
  .byte  196,98,125,24,21,149,5,0,0          // vbroadcastss  0x595(%rip),%ymm10        # 49a4 <_sk_callback_hsw+0x4db>
  .byte  196,66,61,168,209                   // vfmadd213ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,13,139,5,0,0          // vbroadcastss  0x58b(%rip),%ymm9        # 49a8 <_sk_callback_hsw+0x4df>
  .byte  196,66,61,184,202                   // vfmadd231ps   %ymm10,%ymm8,%ymm9
  .byte  196,98,125,24,21,129,5,0,0          // vbroadcastss  0x581(%rip),%ymm10        # 49ac <_sk_callback_hsw+0x4e3>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  197,124,17,144,160,0,0,0            // vmovups       %ymm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_hsw
.globl _sk_bicubic_p1y_hsw
FUNCTION(_sk_bicubic_p1y_hsw)
_sk_bicubic_p1y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,105,5,0,0           // vbroadcastss  0x569(%rip),%ymm8        # 49b0 <_sk_callback_hsw+0x4e7>
  .byte  197,188,88,72,32                    // vaddps        0x20(%rax),%ymm8,%ymm1
  .byte  197,124,16,72,96                    // vmovups       0x60(%rax),%ymm9
  .byte  196,98,125,24,21,90,5,0,0           // vbroadcastss  0x55a(%rip),%ymm10        # 49b4 <_sk_callback_hsw+0x4eb>
  .byte  196,98,125,24,29,85,5,0,0           // vbroadcastss  0x555(%rip),%ymm11        # 49b8 <_sk_callback_hsw+0x4ef>
  .byte  196,66,53,168,218                   // vfmadd213ps   %ymm10,%ymm9,%ymm11
  .byte  196,66,53,168,216                   // vfmadd213ps   %ymm8,%ymm9,%ymm11
  .byte  196,98,125,24,5,70,5,0,0            // vbroadcastss  0x546(%rip),%ymm8        # 49bc <_sk_callback_hsw+0x4f3>
  .byte  196,66,53,184,195                   // vfmadd231ps   %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_hsw
.globl _sk_bicubic_p3y_hsw
FUNCTION(_sk_bicubic_p3y_hsw)
_sk_bicubic_p3y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,46,5,0,0          // vbroadcastss  0x52e(%rip),%ymm1        # 49c0 <_sk_callback_hsw+0x4f7>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,26,5,0,0           // vbroadcastss  0x51a(%rip),%ymm10        # 49c4 <_sk_callback_hsw+0x4fb>
  .byte  196,98,125,24,29,21,5,0,0           // vbroadcastss  0x515(%rip),%ymm11        # 49c8 <_sk_callback_hsw+0x4ff>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,52,89,195                    // vmulps        %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_hsw
.globl _sk_callback_hsw
FUNCTION(_sk_callback_hsw)
_sk_callback_hsw:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,129,236,144,0,0,0                // sub           $0x90,%rsp
  .byte  197,252,17,124,36,96                // vmovups       %ymm7,0x60(%rsp)
  .byte  197,252,17,116,36,64                // vmovups       %ymm6,0x40(%rsp)
  .byte  197,252,17,108,36,32                // vmovups       %ymm5,0x20(%rsp)
  .byte  197,252,17,36,36                    // vmovups       %ymm4,(%rsp)
  .byte  73,137,205                          // mov           %rcx,%r13
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  73,137,255                          // mov           %rdi,%r15
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,137,195                          // mov           %rax,%rbx
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,193                      // vunpckhps     %ymm1,%ymm0,%ymm0
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,211                      // vunpckhps     %ymm3,%ymm2,%ymm2
  .byte  197,221,20,217                      // vunpcklpd     %ymm1,%ymm4,%ymm3
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,253,20,226                      // vunpcklpd     %ymm2,%ymm0,%ymm4
  .byte  197,253,21,194                      // vunpckhpd     %ymm2,%ymm0,%ymm0
  .byte  196,227,101,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm2
  .byte  196,227,93,24,232,1                 // vinsertf128   $0x1,%xmm0,%ymm4,%ymm5
  .byte  196,227,101,6,201,49                // vperm2f128    $0x31,%ymm1,%ymm3,%ymm1
  .byte  196,227,93,6,192,49                 // vperm2f128    $0x31,%ymm0,%ymm4,%ymm0
  .byte  197,253,17,83,8                     // vmovupd       %ymm2,0x8(%rbx)
  .byte  197,253,17,107,40                   // vmovupd       %ymm5,0x28(%rbx)
  .byte  197,253,17,75,72                    // vmovupd       %ymm1,0x48(%rbx)
  .byte  197,253,17,67,104                   // vmovupd       %ymm0,0x68(%rbx)
  .byte  77,133,237                          // test          %r13,%r13
  .byte  190,8,0,0,0                         // mov           $0x8,%esi
  .byte  65,15,69,245                        // cmovne        %r13d,%esi
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  197,248,119                         // vzeroupper
  .byte  255,19                              // callq         *(%rbx)
  .byte  72,139,131,136,0,0,0                // mov           0x88(%rbx),%rax
  .byte  197,248,16,0                        // vmovups       (%rax),%xmm0
  .byte  197,248,16,72,16                    // vmovups       0x10(%rax),%xmm1
  .byte  197,248,16,80,32                    // vmovups       0x20(%rax),%xmm2
  .byte  197,248,16,88,48                    // vmovups       0x30(%rax),%xmm3
  .byte  196,227,101,24,88,112,1             // vinsertf128   $0x1,0x70(%rax),%ymm3,%ymm3
  .byte  196,227,109,24,80,96,1              // vinsertf128   $0x1,0x60(%rax),%ymm2,%ymm2
  .byte  196,227,117,24,72,80,1              // vinsertf128   $0x1,0x50(%rax),%ymm1,%ymm1
  .byte  196,227,125,24,64,64,1              // vinsertf128   $0x1,0x40(%rax),%ymm0,%ymm0
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,233                      // vunpckhps     %ymm1,%ymm0,%ymm5
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,219                      // vunpckhps     %ymm3,%ymm2,%ymm3
  .byte  197,221,20,193                      // vunpcklpd     %ymm1,%ymm4,%ymm0
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,213,20,211                      // vunpcklpd     %ymm3,%ymm5,%ymm2
  .byte  197,213,21,219                      // vunpckhpd     %ymm3,%ymm5,%ymm3
  .byte  76,137,230                          // mov           %r12,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,255                          // mov           %r15,%rdi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  76,137,233                          // mov           %r13,%rcx
  .byte  197,252,16,36,36                    // vmovups       (%rsp),%ymm4
  .byte  197,252,16,108,36,32                // vmovups       0x20(%rsp),%ymm5
  .byte  197,252,16,116,36,64                // vmovups       0x40(%rsp),%ymm6
  .byte  197,252,16,124,36,96                // vmovups       0x60(%rsp),%ymm7
  .byte  72,129,196,144,0,0,0                // add           $0x90,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,128,63                      // mov           $0x3f800000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,224                   // add           %al,-0x1fffff41(%rax)
  .byte  64,154                              // rex           (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 46a1 <.literal4+0xb1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 46b1 <.literal4+0xc1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 46c1 <.literal4+0xd1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 46d1 <.literal4+0xe1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,145                          // cmpb          $0x91,(%rdi)
  .byte  131,158,61,92,143,50,63             // sbbl          $0x3f,0x328f5c3d(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,10,215                           // ds            or  %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,41,92,71,65                      // cmp           $0x41475c29,%eax
  .byte  168,87                              // test          $0x57,%al
  .byte  202,189,206                         // lret          $0xcebd
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  194,135,210                         // retq          $0xd287
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,63,4                            // cmpb          $0x4,(%rdi)
  .byte  231,140                             // out           %eax,$0x8c
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,128,64,171,170,42                 // add           %al,0x2aaaab40(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,64,171                            // add           %al,-0x55(%rax)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,129,128,128,59                  // mov           $0x3b808081,%esi
  .byte  129,128,128,59,0,248,0,0,8,33       // addl          $0x21080000,-0x7ffc480(%rax)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4721 <.literal4+0x131>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,129,128,128,59              // and           %eax,0x3b808081(,%rdi,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  0,52,255                            // add           %dh,(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4748 <.literal4+0x158>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            47c1 <.literal4+0x1d1>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            477c <.literal4+0x18c>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            47f5 <.literal4+0x205>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            47b0 <.literal4+0x1c0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4829 <.literal4+0x239>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            47e4 <.literal4+0x1f4>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            485d <.literal4+0x26d>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,200                    // add           %al,-0x37ffffc1(%rax)
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  127,67                              // jg            485b <.literal4+0x26b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,203,61,13       // movabs        %eax,0xd3dcb3c1118c23b
  .byte  190,80,128,3,62                     // mov           $0x3e038050,%esi
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           487b <.literal4+0x28b>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  127,67                              // jg            488f <.literal4+0x29f>
  .byte  129,128,128,59,0,0,128,63,129,128   // addl          $0x80813f80,0x3b80(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,128,63,129,128,128                // add           %al,-0x7f7f7ec1(%rax)
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4871 <.literal4+0x281>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        488d <.literal4+0x29d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            48e2 <.literal4+0x2f2>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,240                // mov           %ecx,-0xfffc278(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,0                  // mov           %ecx,0x3d88(%rax)
  .byte  112,65                              // jo            4925 <.literal4+0x335>
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  127,67                              // jg            4933 <.literal4+0x343>
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            4947 <.literal4+0x357>
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,111,43,231               // fstl          -0x18d490c3(%rbx)
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,169,240,34,62                   // mov           $0x3e22f0a9,%ebp
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,171              // sarb          $0xab,0x3f800000(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,57,142,99,61                    // mov           $0x3d638e39,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,171                          // sarb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,171              // sarb          $0xab,0x3f800000(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,57,142,99,61                    // mov           $0x3d638e39,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,171                          // sarb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi

BALIGN32
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a004a08 <_sk_callback_hsw+0xa00053f>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12004a10 <_sk_callback_hsw+0x12000547>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a004a18 <_sk_callback_hsw+0x1a00054f>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3004a20 <_sk_callback_hsw+0x3000557>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a004a68 <_sk_callback_hsw+0xa00059f>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12004a70 <_sk_callback_hsw+0x120005a7>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a004a78 <_sk_callback_hsw+0x1a0005af>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3004a80 <_sk_callback_hsw+0x30005b7>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a004ac8 <_sk_callback_hsw+0xa0005ff>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12004ad0 <_sk_callback_hsw+0x12000607>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a004ad8 <_sk_callback_hsw+0x1a00060f>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3004ae0 <_sk_callback_hsw+0x3000617>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a004b28 <_sk_callback_hsw+0xa00065f>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12004b30 <_sk_callback_hsw+0x12000667>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a004b38 <_sk_callback_hsw+0x1a00066f>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3004b40 <_sk_callback_hsw+0x3000677>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

BALIGN16
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
BALIGN32

HIDDEN _sk_start_pipeline_avx
.globl _sk_start_pipeline_avx
FUNCTION(_sk_start_pipeline_avx)
_sk_start_pipeline_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  73,137,205                          // mov           %rcx,%r13
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,199                          // mov           %rax,%r15
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  72,141,67,8                         // lea           0x8(%rbx),%rax
  .byte  76,57,232                           // cmp           %r13,%rax
  .byte  118,5                               // jbe           28 <_sk_start_pipeline_avx+0x28>
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  235,65                              // jmp           69 <_sk_start_pipeline_avx+0x69>
  .byte  185,0,0,0,0                         // mov           $0x0,%ecx
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,230                          // mov           %r12,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  65,255,215                          // callq         *%r15
  .byte  72,141,123,8                        // lea           0x8(%rbx),%rdi
  .byte  72,131,195,16                       // add           $0x10,%rbx
  .byte  76,57,235                           // cmp           %r13,%rbx
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  118,191                             // jbe           28 <_sk_start_pipeline_avx+0x28>
  .byte  76,137,233                          // mov           %r13,%rcx
  .byte  72,41,249                           // sub           %rdi,%rcx
  .byte  116,41                              // je            9a <_sk_start_pipeline_avx+0x9a>
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  76,137,230                          // mov           %r12,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  65,255,215                          // callq         *%r15
  .byte  76,137,232                          // mov           %r13,%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  197,248,119                         // vzeroupper
  .byte  195                                 // retq

HIDDEN _sk_just_return_avx
.globl _sk_just_return_avx
FUNCTION(_sk_just_return_avx)
_sk_just_return_avx:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_avx
.globl _sk_seed_shader_avx
FUNCTION(_sk_seed_shader_avx)
_sk_seed_shader_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,249,110,199                     // vmovd         %edi,%xmm0
  .byte  197,249,112,192,0                   // vpshufd       $0x0,%xmm0,%xmm0
  .byte  196,227,125,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,139,92,0,0        // vbroadcastss  0x5c8b(%rip),%ymm1        # 5d54 <_sk_callback_avx+0x128>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,88,2                        // vaddps        (%rdx),%ymm0,%ymm0
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,21,111,92,0,0        // vbroadcastss  0x5c6f(%rip),%ymm2        # 5d58 <_sk_callback_avx+0x12c>
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_avx
.globl _sk_dither_avx
FUNCTION(_sk_dither_avx)
_sk_dither_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,199                     // vmovd         %edi,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,60,88,2                         // vaddps        (%rdx),%ymm8,%ymm8
  .byte  196,65,126,91,192                   // vcvttps2dq    %ymm8,%ymm8
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  196,66,125,24,8                     // vbroadcastss  (%r8),%ymm9
  .byte  196,65,60,87,209                    // vxorps        %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,29,39,92,0,0          // vbroadcastss  0x5c27(%rip),%ymm11        # 5d5c <_sk_callback_avx+0x130>
  .byte  196,65,44,84,203                    // vandps        %ymm11,%ymm10,%ymm9
  .byte  196,193,25,114,241,5                // vpslld        $0x5,%xmm9,%xmm12
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,5                // vpslld        $0x5,%xmm9,%xmm9
  .byte  196,67,29,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm12,%ymm9
  .byte  196,65,60,84,219                    // vandps        %ymm11,%ymm8,%ymm11
  .byte  196,193,25,114,243,4                // vpslld        $0x4,%xmm11,%xmm12
  .byte  196,67,125,25,219,1                 // vextractf128  $0x1,%ymm11,%xmm11
  .byte  196,193,33,114,243,4                // vpslld        $0x4,%xmm11,%xmm11
  .byte  196,67,29,24,219,1                  // vinsertf128   $0x1,%xmm11,%ymm12,%ymm11
  .byte  196,98,125,24,37,232,91,0,0         // vbroadcastss  0x5be8(%rip),%ymm12        # 5d60 <_sk_callback_avx+0x134>
  .byte  196,98,125,24,45,227,91,0,0         // vbroadcastss  0x5be3(%rip),%ymm13        # 5d64 <_sk_callback_avx+0x138>
  .byte  196,65,44,84,245                    // vandps        %ymm13,%ymm10,%ymm14
  .byte  196,193,1,114,246,2                 // vpslld        $0x2,%xmm14,%xmm15
  .byte  196,67,125,25,246,1                 // vextractf128  $0x1,%ymm14,%xmm14
  .byte  196,193,9,114,246,2                 // vpslld        $0x2,%xmm14,%xmm14
  .byte  196,67,5,24,246,1                   // vinsertf128   $0x1,%xmm14,%ymm15,%ymm14
  .byte  196,65,60,84,237                    // vandps        %ymm13,%ymm8,%ymm13
  .byte  196,65,17,254,253                   // vpaddd        %xmm13,%xmm13,%xmm15
  .byte  196,67,125,25,237,1                 // vextractf128  $0x1,%ymm13,%xmm13
  .byte  196,65,17,254,237                   // vpaddd        %xmm13,%xmm13,%xmm13
  .byte  196,67,5,24,237,1                   // vinsertf128   $0x1,%xmm13,%ymm15,%ymm13
  .byte  196,65,44,84,212                    // vandps        %ymm12,%ymm10,%ymm10
  .byte  196,193,1,114,210,1                 // vpsrld        $0x1,%xmm10,%xmm15
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,210,1                // vpsrld        $0x1,%xmm10,%xmm10
  .byte  196,67,5,24,210,1                   // vinsertf128   $0x1,%xmm10,%ymm15,%ymm10
  .byte  196,65,60,84,196                    // vandps        %ymm12,%ymm8,%ymm8
  .byte  196,193,25,114,208,2                // vpsrld        $0x2,%xmm8,%xmm12
  .byte  196,67,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm8
  .byte  196,193,57,114,208,2                // vpsrld        $0x2,%xmm8,%xmm8
  .byte  196,67,29,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm12,%ymm8
  .byte  196,65,20,86,219                    // vorps         %ymm11,%ymm13,%ymm11
  .byte  196,65,36,86,192                    // vorps         %ymm8,%ymm11,%ymm8
  .byte  196,65,52,86,206                    // vorps         %ymm14,%ymm9,%ymm9
  .byte  196,65,60,86,193                    // vorps         %ymm9,%ymm8,%ymm8
  .byte  196,65,60,86,194                    // vorps         %ymm10,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,78,91,0,0          // vbroadcastss  0x5b4e(%rip),%ymm9        # 5d68 <_sk_callback_avx+0x13c>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,68,91,0,0          // vbroadcastss  0x5b44(%rip),%ymm9        # 5d6c <_sk_callback_avx+0x140>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,8                  // vbroadcastss  0x8(%rax),%ymm9
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_avx
.globl _sk_constant_color_avx
FUNCTION(_sk_constant_color_avx)
_sk_constant_color_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_avx
.globl _sk_clear_avx
FUNCTION(_sk_clear_avx)
_sk_clear_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_avx
.globl _sk_srcatop_avx
FUNCTION(_sk_srcatop_avx)
_sk_srcatop_avx:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,98,125,24,5,234,90,0,0          // vbroadcastss  0x5aea(%rip),%ymm8        # 5d70 <_sk_callback_avx+0x144>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,204                       // vmulps        %ymm4,%ymm8,%ymm9
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,60,89,205                       // vmulps        %ymm5,%ymm8,%ymm9
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,60,89,206                       // vmulps        %ymm6,%ymm8,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_avx
.globl _sk_dstatop_avx
FUNCTION(_sk_dstatop_avx)
_sk_dstatop_avx:
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  196,98,125,24,13,172,90,0,0         // vbroadcastss  0x5aac(%rip),%ymm9        # 5d74 <_sk_callback_avx+0x148>
  .byte  197,52,92,207                       // vsubps        %ymm7,%ymm9,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,100,89,197                      // vmulps        %ymm5,%ymm3,%ymm8
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,100,89,198                      // vmulps        %ymm6,%ymm3,%ymm8
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,100,89,199                      // vmulps        %ymm7,%ymm3,%ymm8
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_avx
.globl _sk_srcin_avx
FUNCTION(_sk_srcin_avx)
_sk_srcin_avx:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_avx
.globl _sk_dstin_avx
FUNCTION(_sk_dstin_avx)
_sk_dstin_avx:
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_avx
.globl _sk_srcout_avx
FUNCTION(_sk_srcout_avx)
_sk_srcout_avx:
  .byte  196,98,125,24,5,75,90,0,0           // vbroadcastss  0x5a4b(%rip),%ymm8        # 5d78 <_sk_callback_avx+0x14c>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_avx
.globl _sk_dstout_avx
FUNCTION(_sk_dstout_avx)
_sk_dstout_avx:
  .byte  196,226,125,24,5,46,90,0,0          // vbroadcastss  0x5a2e(%rip),%ymm0        # 5d7c <_sk_callback_avx+0x150>
  .byte  197,252,92,219                      // vsubps        %ymm3,%ymm0,%ymm3
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_avx
.globl _sk_srcover_avx
FUNCTION(_sk_srcover_avx)
_sk_srcover_avx:
  .byte  196,98,125,24,5,17,90,0,0           // vbroadcastss  0x5a11(%rip),%ymm8        # 5d80 <_sk_callback_avx+0x154>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,204                       // vmulps        %ymm4,%ymm8,%ymm9
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  197,60,89,205                       // vmulps        %ymm5,%ymm8,%ymm9
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  197,60,89,206                       // vmulps        %ymm6,%ymm8,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_avx
.globl _sk_dstover_avx
FUNCTION(_sk_dstover_avx)
_sk_dstover_avx:
  .byte  196,98,125,24,5,228,89,0,0          // vbroadcastss  0x59e4(%rip),%ymm8        # 5d84 <_sk_callback_avx+0x158>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_avx
.globl _sk_modulate_avx
FUNCTION(_sk_modulate_avx)
_sk_modulate_avx:
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_avx
.globl _sk_multiply_avx
FUNCTION(_sk_multiply_avx)
_sk_multiply_avx:
  .byte  196,98,125,24,5,163,89,0,0          // vbroadcastss  0x59a3(%rip),%ymm8        # 5d88 <_sk_callback_avx+0x15c>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,208                       // vmulps        %ymm0,%ymm9,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  197,52,89,209                       // vmulps        %ymm1,%ymm9,%ymm10
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,210                       // vmulps        %ymm2,%ymm9,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__avx
.globl _sk_plus__avx
FUNCTION(_sk_plus__avx)
_sk_plus__avx:
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_avx
.globl _sk_screen_avx
FUNCTION(_sk_screen_avx)
_sk_screen_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  197,100,88,199                      // vaddps        %ymm7,%ymm3,%ymm8
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  197,188,92,219                      // vsubps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__avx
.globl _sk_xor__avx
FUNCTION(_sk_xor__avx)
_sk_xor__avx:
  .byte  196,98,125,24,5,242,88,0,0          // vbroadcastss  0x58f2(%rip),%ymm8        # 5d8c <_sk_callback_avx+0x160>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,212                       // vmulps        %ymm4,%ymm8,%ymm10
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,89,213                       // vmulps        %ymm5,%ymm8,%ymm10
  .byte  197,172,88,201                      // vaddps        %ymm1,%ymm10,%ymm1
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  197,60,89,214                       // vmulps        %ymm6,%ymm8,%ymm10
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_avx
.globl _sk_darken_avx
FUNCTION(_sk_darken_avx)
_sk_darken_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,95,193                  // vmaxps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,95,201                  // vmaxps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,95,209                  // vmaxps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,114,88,0,0          // vbroadcastss  0x5872(%rip),%ymm8        # 5d90 <_sk_callback_avx+0x164>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_avx
.globl _sk_lighten_avx
FUNCTION(_sk_lighten_avx)
_sk_lighten_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,30,88,0,0           // vbroadcastss  0x581e(%rip),%ymm8        # 5d94 <_sk_callback_avx+0x168>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_avx
.globl _sk_difference_avx
FUNCTION(_sk_difference_avx)
_sk_difference_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,190,87,0,0          // vbroadcastss  0x57be(%rip),%ymm8        # 5d98 <_sk_callback_avx+0x16c>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_avx
.globl _sk_exclusion_avx
FUNCTION(_sk_exclusion_avx)
_sk_exclusion_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,121,87,0,0          // vbroadcastss  0x5779(%rip),%ymm8        # 5d9c <_sk_callback_avx+0x170>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_avx
.globl _sk_colorburn_avx
FUNCTION(_sk_colorburn_avx)
_sk_colorburn_avx:
  .byte  196,98,125,24,5,100,87,0,0          // vbroadcastss  0x5764(%rip),%ymm8        # 5da0 <_sk_callback_avx+0x174>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,216                       // vmulps        %ymm0,%ymm9,%ymm11
  .byte  196,65,44,87,210                    // vxorps        %ymm10,%ymm10,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,228                       // vmulps        %ymm4,%ymm8,%ymm12
  .byte  197,68,92,236                       // vsubps        %ymm4,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,232                       // vdivps        %ymm0,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,36,88,237                    // vaddps        %ymm13,%ymm11,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,224                       // vaddps        %ymm0,%ymm12,%ymm12
  .byte  196,193,124,194,194,0               // vcmpeqps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,196,0                 // vblendvps     %ymm0,%ymm12,%ymm13,%ymm0
  .byte  197,92,194,231,0                    // vcmpeqps      %ymm7,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,52,89,217                       // vmulps        %ymm1,%ymm9,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  197,68,92,237                       // vsubps        %ymm5,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,233                       // vdivps        %ymm1,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,36,88,237                    // vaddps        %ymm13,%ymm11,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,225                       // vaddps        %ymm1,%ymm12,%ymm12
  .byte  196,193,116,194,202,0               // vcmpeqps      %ymm10,%ymm1,%ymm1
  .byte  196,195,21,74,204,16                // vblendvps     %ymm1,%ymm12,%ymm13,%ymm1
  .byte  197,84,194,231,0                    // vcmpeqps      %ymm7,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,108,194,210,0                // vcmpeqps      %ymm10,%ymm2,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  197,68,92,230                       // vsubps        %ymm6,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  197,28,94,226                       // vdivps        %ymm2,%ymm12,%ymm12
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,65,68,92,228                    // vsubps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,52,88,228                    // vaddps        %ymm12,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,227,37,74,210,160               // vblendvps     %ymm10,%ymm2,%ymm11,%ymm2
  .byte  197,76,194,215,0                    // vcmpeqps      %ymm7,%ymm6,%ymm10
  .byte  197,52,88,206                       // vaddps        %ymm6,%ymm9,%ymm9
  .byte  196,195,109,74,209,160              // vblendvps     %ymm10,%ymm9,%ymm2,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_avx
.globl _sk_colordodge_avx
FUNCTION(_sk_colordodge_avx)
_sk_colordodge_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,13,96,86,0,0          // vbroadcastss  0x5660(%rip),%ymm9        # 5da4 <_sk_callback_avx+0x178>
  .byte  197,52,92,215                       // vsubps        %ymm7,%ymm9,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,52,92,203                       // vsubps        %ymm3,%ymm9,%ymm9
  .byte  197,100,89,228                      // vmulps        %ymm4,%ymm3,%ymm12
  .byte  197,100,92,232                      // vsubps        %ymm0,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,236                       // vmulps        %ymm4,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,36,88,228                    // vaddps        %ymm12,%ymm11,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,232                       // vaddps        %ymm0,%ymm13,%ymm13
  .byte  197,252,194,195,0                   // vcmpeqps      %ymm3,%ymm0,%ymm0
  .byte  196,195,29,74,197,0                 // vblendvps     %ymm0,%ymm13,%ymm12,%ymm0
  .byte  196,65,92,194,224,0                 // vcmpeqps      %ymm8,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,100,89,229                      // vmulps        %ymm5,%ymm3,%ymm12
  .byte  197,100,92,233                      // vsubps        %ymm1,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,237                       // vmulps        %ymm5,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,36,88,228                    // vaddps        %ymm12,%ymm11,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,233                       // vaddps        %ymm1,%ymm13,%ymm13
  .byte  197,244,194,203,0                   // vcmpeqps      %ymm3,%ymm1,%ymm1
  .byte  196,195,29,74,205,16                // vblendvps     %ymm1,%ymm13,%ymm12,%ymm1
  .byte  196,65,84,194,224,0                 // vcmpeqps      %ymm8,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,100,92,226                      // vsubps        %ymm2,%ymm3,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  197,52,89,230                       // vmulps        %ymm6,%ymm9,%ymm12
  .byte  196,65,68,93,219                    // vminps        %ymm11,%ymm7,%ymm11
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  197,236,194,211,0                   // vcmpeqps      %ymm3,%ymm2,%ymm2
  .byte  196,195,37,74,212,32                // vblendvps     %ymm2,%ymm12,%ymm11,%ymm2
  .byte  196,65,76,194,192,0                 // vcmpeqps      %ymm8,%ymm6,%ymm8
  .byte  197,44,88,214                       // vaddps        %ymm6,%ymm10,%ymm10
  .byte  196,195,109,74,210,128              // vblendvps     %ymm8,%ymm10,%ymm2,%ymm2
  .byte  197,52,89,199                       // vmulps        %ymm7,%ymm9,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_avx
.globl _sk_hardlight_avx
FUNCTION(_sk_hardlight_avx)
_sk_hardlight_avx:
  .byte  196,98,125,24,5,114,85,0,0          // vbroadcastss  0x5572(%rip),%ymm8        # 5da8 <_sk_callback_avx+0x17c>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,200                       // vmulps        %ymm0,%ymm10,%ymm9
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,217                    // vaddps        %ymm9,%ymm11,%ymm11
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  197,52,194,227,2                    // vcmpleps      %ymm3,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,116,88,225                      // vaddps        %ymm1,%ymm1,%ymm12
  .byte  197,28,194,227,2                    // vcmpleps      %ymm3,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,108,88,218                      // vaddps        %ymm2,%ymm2,%ymm11
  .byte  197,36,194,219,2                    // vcmpleps      %ymm3,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_avx
.globl _sk_overlay_avx
FUNCTION(_sk_overlay_avx)
_sk_overlay_avx:
  .byte  196,98,125,24,5,155,84,0,0          // vbroadcastss  0x549b(%rip),%ymm8        # 5dac <_sk_callback_avx+0x180>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,200                       // vmulps        %ymm0,%ymm10,%ymm9
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,217                    // vaddps        %ymm9,%ymm11,%ymm11
  .byte  197,92,88,204                       // vaddps        %ymm4,%ymm4,%ymm9
  .byte  197,52,194,231,2                    // vcmpleps      %ymm7,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_avx
.globl _sk_softlight_avx
FUNCTION(_sk_softlight_avx)
_sk_softlight_avx:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,252,40,209                      // vmovaps       %ymm1,%ymm2
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  197,52,194,215,1                    // vcmpltps      %ymm7,%ymm9,%ymm10
  .byte  197,92,94,199                       // vdivps        %ymm7,%ymm4,%ymm8
  .byte  196,67,53,74,224,160                // vblendvps     %ymm10,%ymm8,%ymm9,%ymm12
  .byte  196,65,28,88,196                    // vaddps        %ymm12,%ymm12,%ymm8
  .byte  196,65,60,88,192                    // vaddps        %ymm8,%ymm8,%ymm8
  .byte  196,65,60,89,216                    // vmulps        %ymm8,%ymm8,%ymm11
  .byte  196,65,60,88,195                    // vaddps        %ymm11,%ymm8,%ymm8
  .byte  196,98,125,24,29,146,83,0,0         // vbroadcastss  0x5392(%rip),%ymm11        # 5db4 <_sk_callback_avx+0x188>
  .byte  196,65,28,88,235                    // vaddps        %ymm11,%ymm12,%ymm13
  .byte  196,65,20,89,192                    // vmulps        %ymm8,%ymm13,%ymm8
  .byte  196,98,125,24,45,131,83,0,0         // vbroadcastss  0x5383(%rip),%ymm13        # 5db8 <_sk_callback_avx+0x18c>
  .byte  196,65,28,89,245                    // vmulps        %ymm13,%ymm12,%ymm14
  .byte  196,65,12,88,192                    // vaddps        %ymm8,%ymm14,%ymm8
  .byte  196,65,124,82,244                   // vrsqrtps      %ymm12,%ymm14
  .byte  196,65,124,83,246                   // vrcpps        %ymm14,%ymm14
  .byte  196,65,12,92,244                    // vsubps        %ymm12,%ymm14,%ymm14
  .byte  197,92,88,252                       // vaddps        %ymm4,%ymm4,%ymm15
  .byte  196,65,4,88,255                     // vaddps        %ymm15,%ymm15,%ymm15
  .byte  197,4,194,255,2                     // vcmpleps      %ymm7,%ymm15,%ymm15
  .byte  196,67,13,74,240,240                // vblendvps     %ymm15,%ymm8,%ymm14,%ymm14
  .byte  197,116,88,249                      // vaddps        %ymm1,%ymm1,%ymm15
  .byte  196,98,125,24,5,65,83,0,0           // vbroadcastss  0x5341(%rip),%ymm8        # 5db0 <_sk_callback_avx+0x184>
  .byte  196,65,60,92,228                    // vsubps        %ymm12,%ymm8,%ymm12
  .byte  197,132,92,195                      // vsubps        %ymm3,%ymm15,%ymm0
  .byte  196,65,124,89,228                   // vmulps        %ymm12,%ymm0,%ymm12
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,100,89,244                      // vmulps        %ymm4,%ymm3,%ymm14
  .byte  197,140,88,192                      // vaddps        %ymm0,%ymm14,%ymm0
  .byte  197,28,88,227                       // vaddps        %ymm3,%ymm12,%ymm12
  .byte  197,28,89,228                       // vmulps        %ymm4,%ymm12,%ymm12
  .byte  197,4,194,243,2                     // vcmpleps      %ymm3,%ymm15,%ymm14
  .byte  196,195,125,74,196,224              // vblendvps     %ymm14,%ymm12,%ymm0,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,212,94,199                      // vdivps        %ymm7,%ymm5,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,240                      // vaddps        %ymm0,%ymm0,%ymm14
  .byte  196,65,12,88,246                    // vaddps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,89,254                    // vmulps        %ymm14,%ymm14,%ymm15
  .byte  196,65,12,88,247                    // vaddps        %ymm15,%ymm14,%ymm14
  .byte  196,65,124,88,251                   // vaddps        %ymm11,%ymm0,%ymm15
  .byte  196,65,4,89,246                     // vmulps        %ymm14,%ymm15,%ymm14
  .byte  196,65,124,89,253                   // vmulps        %ymm13,%ymm0,%ymm15
  .byte  196,65,4,88,246                     // vaddps        %ymm14,%ymm15,%ymm14
  .byte  197,124,82,248                      // vrsqrtps      %ymm0,%ymm15
  .byte  196,65,124,83,255                   // vrcpps        %ymm15,%ymm15
  .byte  197,4,92,248                        // vsubps        %ymm0,%ymm15,%ymm15
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  196,67,5,74,230,192                 // vblendvps     %ymm12,%ymm14,%ymm15,%ymm12
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,108,88,242                      // vaddps        %ymm2,%ymm2,%ymm14
  .byte  197,12,92,251                       // vsubps        %ymm3,%ymm14,%ymm15
  .byte  197,132,89,192                      // vmulps        %ymm0,%ymm15,%ymm0
  .byte  197,4,89,255                        // vmulps        %ymm7,%ymm15,%ymm15
  .byte  196,65,4,89,228                     // vmulps        %ymm12,%ymm15,%ymm12
  .byte  197,100,89,253                      // vmulps        %ymm5,%ymm3,%ymm15
  .byte  196,65,4,88,228                     // vaddps        %ymm12,%ymm15,%ymm12
  .byte  197,252,88,195                      // vaddps        %ymm3,%ymm0,%ymm0
  .byte  197,252,89,197                      // vmulps        %ymm5,%ymm0,%ymm0
  .byte  197,12,194,243,2                    // vcmpleps      %ymm3,%ymm14,%ymm14
  .byte  196,99,29,74,240,224                // vblendvps     %ymm14,%ymm0,%ymm12,%ymm14
  .byte  197,204,94,199                      // vdivps        %ymm7,%ymm6,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,65,52,89,209                    // vmulps        %ymm9,%ymm9,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,124,88,211                   // vaddps        %ymm11,%ymm0,%ymm10
  .byte  196,65,44,89,201                    // vmulps        %ymm9,%ymm10,%ymm9
  .byte  196,65,124,89,213                   // vmulps        %ymm13,%ymm0,%ymm10
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  197,124,82,208                      // vrsqrtps      %ymm0,%ymm10
  .byte  196,65,124,83,210                   // vrcpps        %ymm10,%ymm10
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  196,65,36,88,219                    // vaddps        %ymm11,%ymm11,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  196,67,45,74,201,176                // vblendvps     %ymm11,%ymm9,%ymm10,%ymm9
  .byte  197,124,16,100,36,200               // vmovups       -0x38(%rsp),%ymm12
  .byte  196,65,28,88,212                    // vaddps        %ymm12,%ymm12,%ymm10
  .byte  197,44,92,219                       // vsubps        %ymm3,%ymm10,%ymm11
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  197,36,89,223                       // vmulps        %ymm7,%ymm11,%ymm11
  .byte  196,65,36,89,201                    // vmulps        %ymm9,%ymm11,%ymm9
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  196,65,36,88,201                    // vaddps        %ymm9,%ymm11,%ymm9
  .byte  197,252,88,195                      // vaddps        %ymm3,%ymm0,%ymm0
  .byte  197,252,89,198                      // vmulps        %ymm6,%ymm0,%ymm0
  .byte  197,44,194,211,2                    // vcmpleps      %ymm3,%ymm10,%ymm10
  .byte  196,99,53,74,200,160                // vblendvps     %ymm10,%ymm0,%ymm9,%ymm9
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,188,89,204                      // vmulps        %ymm4,%ymm8,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,252,88,68,36,168                // vaddps        -0x58(%rsp),%ymm0,%ymm0
  .byte  197,172,89,202                      // vmulps        %ymm2,%ymm10,%ymm1
  .byte  197,188,89,213                      // vmulps        %ymm5,%ymm8,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,206                  // vaddps        %ymm14,%ymm1,%ymm1
  .byte  196,193,44,89,212                   // vmulps        %ymm12,%ymm10,%ymm2
  .byte  197,60,89,214                       // vmulps        %ymm6,%ymm8,%ymm10
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_avx
.globl _sk_hue_avx
FUNCTION(_sk_hue_avx)
_sk_hue_avx:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,124,40,193                      // vmovaps       %ymm1,%ymm8
  .byte  197,124,17,68,36,168                // vmovups       %ymm8,-0x58(%rsp)
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,116,89,203                      // vmulps        %ymm3,%ymm1,%ymm9
  .byte  197,60,89,211                       // vmulps        %ymm3,%ymm8,%ymm10
  .byte  197,108,89,219                      // vmulps        %ymm3,%ymm2,%ymm11
  .byte  197,84,95,198                       // vmaxps        %ymm6,%ymm5,%ymm8
  .byte  196,65,92,95,192                    // vmaxps        %ymm8,%ymm4,%ymm8
  .byte  197,84,93,230                       // vminps        %ymm6,%ymm5,%ymm12
  .byte  196,65,92,93,228                    // vminps        %ymm12,%ymm4,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,227                       // vmulps        %ymm3,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,208,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm10
  .byte  196,65,36,92,221                    // vsubps        %ymm13,%ymm11,%ymm11
  .byte  196,65,28,89,219                    // vmulps        %ymm11,%ymm12,%ymm11
  .byte  196,65,36,94,222                    // vdivps        %ymm14,%ymm11,%ymm11
  .byte  196,67,37,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm11,%ymm12
  .byte  196,98,125,24,53,16,81,0,0          // vbroadcastss  0x5110(%rip),%ymm14        # 5dbc <_sk_callback_avx+0x190>
  .byte  196,65,92,89,222                    // vmulps        %ymm14,%ymm4,%ymm11
  .byte  196,98,125,24,61,6,81,0,0           // vbroadcastss  0x5106(%rip),%ymm15        # 5dc0 <_sk_callback_avx+0x194>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,226,125,24,5,247,80,0,0         // vbroadcastss  0x50f7(%rip),%ymm0        # 5dc4 <_sk_callback_avx+0x198>
  .byte  197,76,89,232                       // vmulps        %ymm0,%ymm6,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,65,52,89,238                    // vmulps        %ymm14,%ymm9,%ymm13
  .byte  196,193,44,89,215                   // vmulps        %ymm15,%ymm10,%ymm2
  .byte  197,148,88,210                      // vaddps        %ymm2,%ymm13,%ymm2
  .byte  197,28,89,232                       // vmulps        %ymm0,%ymm12,%ymm13
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,52,88,202                       // vaddps        %ymm2,%ymm9,%ymm9
  .byte  197,44,88,218                       // vaddps        %ymm2,%ymm10,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  196,193,36,93,212                   // vminps        %ymm12,%ymm11,%ymm2
  .byte  197,52,93,234                       // vminps        %ymm2,%ymm9,%ymm13
  .byte  196,193,52,89,214                   // vmulps        %ymm14,%ymm9,%ymm2
  .byte  196,65,36,89,215                    // vmulps        %ymm15,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,124,88,210                      // vaddps        %ymm2,%ymm0,%ymm10
  .byte  196,193,52,92,194                   // vsubps        %ymm10,%ymm9,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,44,92,213                   // vsubps        %ymm13,%ymm10,%ymm2
  .byte  197,252,94,194                      // vdivps        %ymm2,%ymm0,%ymm0
  .byte  196,65,36,92,242                    // vsubps        %ymm10,%ymm11,%ymm14
  .byte  196,65,44,89,246                    // vmulps        %ymm14,%ymm10,%ymm14
  .byte  197,12,94,242                       // vdivps        %ymm2,%ymm14,%ymm14
  .byte  196,65,28,92,250                    // vsubps        %ymm10,%ymm12,%ymm15
  .byte  196,65,44,89,255                    // vmulps        %ymm15,%ymm10,%ymm15
  .byte  197,132,94,210                      // vdivps        %ymm2,%ymm15,%ymm2
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,44,88,246                    // vaddps        %ymm14,%ymm10,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,195,109,74,212,208              // vblendvps     %ymm13,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  196,195,125,74,193,208              // vblendvps     %ymm13,%ymm9,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,203                    // vmaxps        %ymm11,%ymm9,%ymm9
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,65,28,92,234                    // vsubps        %ymm10,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,249,1                 // vcmpltps      %ymm9,%ymm12,%ymm15
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,218                    // vsubps        %ymm10,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,108,92,242                   // vsubps        %ymm10,%ymm2,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,208                    // vmaxps        %ymm8,%ymm11,%ymm10
  .byte  196,195,109,74,209,240              // vblendvps     %ymm15,%ymm9,%ymm2,%ymm2
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,208,79,0,0          // vbroadcastss  0x4fd0(%rip),%ymm8        # 5dc8 <_sk_callback_avx+0x19c>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,180,89,76,36,168                // vmulps        -0x58(%rsp),%ymm9,%ymm1
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,76,36,200                 // vmulps        -0x38(%rsp),%ymm9,%ymm9
  .byte  197,60,89,198                       // vmulps        %ymm6,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_avx
.globl _sk_saturation_avx
FUNCTION(_sk_saturation_avx)
_sk_saturation_avx:
  .byte  197,124,40,193                      // vmovaps       %ymm1,%ymm8
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,124,95,194                      // vmaxps        %ymm2,%ymm0,%ymm8
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  197,124,93,226                      // vminps        %ymm2,%ymm0,%ymm12
  .byte  196,65,116,93,228                   // vminps        %ymm12,%ymm1,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,231                       // vmulps        %ymm7,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,208,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm10
  .byte  196,65,36,92,221                    // vsubps        %ymm13,%ymm11,%ymm11
  .byte  196,65,28,89,219                    // vmulps        %ymm11,%ymm12,%ymm11
  .byte  196,65,36,94,222                    // vdivps        %ymm14,%ymm11,%ymm11
  .byte  196,67,37,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm11,%ymm12
  .byte  196,98,125,24,53,222,78,0,0         // vbroadcastss  0x4ede(%rip),%ymm14        # 5dcc <_sk_callback_avx+0x1a0>
  .byte  196,65,92,89,222                    // vmulps        %ymm14,%ymm4,%ymm11
  .byte  196,98,125,24,61,212,78,0,0         // vbroadcastss  0x4ed4(%rip),%ymm15        # 5dd0 <_sk_callback_avx+0x1a4>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,226,125,24,5,197,78,0,0         // vbroadcastss  0x4ec5(%rip),%ymm0        # 5dd4 <_sk_callback_avx+0x1a8>
  .byte  197,76,89,232                       // vmulps        %ymm0,%ymm6,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,65,52,89,238                    // vmulps        %ymm14,%ymm9,%ymm13
  .byte  196,193,44,89,215                   // vmulps        %ymm15,%ymm10,%ymm2
  .byte  197,148,88,210                      // vaddps        %ymm2,%ymm13,%ymm2
  .byte  197,28,89,232                       // vmulps        %ymm0,%ymm12,%ymm13
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,52,88,202                       // vaddps        %ymm2,%ymm9,%ymm9
  .byte  197,44,88,218                       // vaddps        %ymm2,%ymm10,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  196,193,36,93,212                   // vminps        %ymm12,%ymm11,%ymm2
  .byte  197,52,93,234                       // vminps        %ymm2,%ymm9,%ymm13
  .byte  196,193,52,89,214                   // vmulps        %ymm14,%ymm9,%ymm2
  .byte  196,65,36,89,215                    // vmulps        %ymm15,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,124,88,210                      // vaddps        %ymm2,%ymm0,%ymm10
  .byte  196,193,52,92,194                   // vsubps        %ymm10,%ymm9,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,44,92,213                   // vsubps        %ymm13,%ymm10,%ymm2
  .byte  197,252,94,194                      // vdivps        %ymm2,%ymm0,%ymm0
  .byte  196,65,36,92,242                    // vsubps        %ymm10,%ymm11,%ymm14
  .byte  196,65,44,89,246                    // vmulps        %ymm14,%ymm10,%ymm14
  .byte  197,12,94,242                       // vdivps        %ymm2,%ymm14,%ymm14
  .byte  196,65,28,92,250                    // vsubps        %ymm10,%ymm12,%ymm15
  .byte  196,65,44,89,255                    // vmulps        %ymm15,%ymm10,%ymm15
  .byte  197,132,94,210                      // vdivps        %ymm2,%ymm15,%ymm2
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,44,88,246                    // vaddps        %ymm14,%ymm10,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,195,109,74,212,208              // vblendvps     %ymm13,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  196,195,125,74,193,208              // vblendvps     %ymm13,%ymm9,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,203                    // vmaxps        %ymm11,%ymm9,%ymm9
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,65,28,92,234                    // vsubps        %ymm10,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,249,1                 // vcmpltps      %ymm9,%ymm12,%ymm15
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,218                    // vsubps        %ymm10,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,108,92,242                   // vsubps        %ymm10,%ymm2,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,208                    // vmaxps        %ymm8,%ymm11,%ymm10
  .byte  196,195,109,74,209,240              // vblendvps     %ymm15,%ymm9,%ymm2,%ymm2
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,158,77,0,0          // vbroadcastss  0x4d9e(%rip),%ymm8        # 5dd8 <_sk_callback_avx+0x1ac>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,180,89,76,36,168                // vmulps        -0x58(%rsp),%ymm9,%ymm1
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,76,36,200                 // vmulps        -0x38(%rsp),%ymm9,%ymm9
  .byte  197,60,89,198                       // vmulps        %ymm6,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_avx
.globl _sk_color_avx
FUNCTION(_sk_color_avx)
_sk_color_avx:
  .byte  197,252,17,84,36,136                // vmovups       %ymm2,-0x78(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,124,89,199                      // vmulps        %ymm7,%ymm0,%ymm8
  .byte  197,116,89,207                      // vmulps        %ymm7,%ymm1,%ymm9
  .byte  196,98,125,24,45,52,77,0,0          // vbroadcastss  0x4d34(%rip),%ymm13        # 5ddc <_sk_callback_avx+0x1b0>
  .byte  196,65,92,89,213                    // vmulps        %ymm13,%ymm4,%ymm10
  .byte  196,98,125,24,53,42,77,0,0          // vbroadcastss  0x4d2a(%rip),%ymm14        # 5de0 <_sk_callback_avx+0x1b4>
  .byte  196,65,84,89,222                    // vmulps        %ymm14,%ymm5,%ymm11
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,61,27,77,0,0          // vbroadcastss  0x4d1b(%rip),%ymm15        # 5de4 <_sk_callback_avx+0x1b8>
  .byte  196,65,76,89,223                    // vmulps        %ymm15,%ymm6,%ymm11
  .byte  196,193,44,88,195                   // vaddps        %ymm11,%ymm10,%ymm0
  .byte  196,65,60,89,221                    // vmulps        %ymm13,%ymm8,%ymm11
  .byte  196,65,52,89,230                    // vmulps        %ymm14,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,108,89,231                      // vmulps        %ymm7,%ymm2,%ymm12
  .byte  196,65,28,89,215                    // vmulps        %ymm15,%ymm12,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  197,60,88,192                       // vaddps        %ymm0,%ymm8,%ymm8
  .byte  197,52,88,208                       // vaddps        %ymm0,%ymm9,%ymm10
  .byte  197,28,88,216                       // vaddps        %ymm0,%ymm12,%ymm11
  .byte  196,193,44,93,195                   // vminps        %ymm11,%ymm10,%ymm0
  .byte  197,60,93,224                       // vminps        %ymm0,%ymm8,%ymm12
  .byte  196,193,60,89,197                   // vmulps        %ymm13,%ymm8,%ymm0
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,193,124,88,193                  // vaddps        %ymm9,%ymm0,%ymm0
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  197,52,88,200                       // vaddps        %ymm0,%ymm9,%ymm9
  .byte  196,193,60,92,193                   // vsubps        %ymm9,%ymm8,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,65,52,92,236                    // vsubps        %ymm12,%ymm9,%ymm13
  .byte  196,193,124,94,197                  // vdivps        %ymm13,%ymm0,%ymm0
  .byte  196,65,44,92,241                    // vsubps        %ymm9,%ymm10,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  196,65,12,94,245                    // vdivps        %ymm13,%ymm14,%ymm14
  .byte  196,65,36,92,249                    // vsubps        %ymm9,%ymm11,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  196,65,4,94,237                     // vdivps        %ymm13,%ymm15,%ymm13
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,65,4,194,228,2                  // vcmpleps      %ymm12,%ymm15,%ymm12
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,242,192                // vblendvps     %ymm12,%ymm10,%ymm14,%ymm14
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,88,237                    // vaddps        %ymm13,%ymm9,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,200,192              // vblendvps     %ymm12,%ymm8,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,60,95,194                    // vmaxps        %ymm10,%ymm8,%ymm8
  .byte  196,65,116,92,209                   // vsubps        %ymm9,%ymm1,%ymm10
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,192,1                // vcmpltps      %ymm8,%ymm12,%ymm0
  .byte  196,65,60,92,193                    // vsubps        %ymm9,%ymm8,%ymm8
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,12,92,209                    // vsubps        %ymm9,%ymm14,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,67,13,74,210,0                  // vblendvps     %ymm0,%ymm10,%ymm14,%ymm10
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,192                    // vdivps        %ymm8,%ymm13,%ymm8
  .byte  196,65,52,88,192                    // vaddps        %ymm8,%ymm9,%ymm8
  .byte  196,193,116,95,207                  // vmaxps        %ymm15,%ymm1,%ymm1
  .byte  196,65,44,95,207                    // vmaxps        %ymm15,%ymm10,%ymm9
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,65,124,95,199                   // vmaxps        %ymm15,%ymm0,%ymm8
  .byte  196,226,125,24,5,226,75,0,0         // vbroadcastss  0x4be2(%rip),%ymm0        # 5de8 <_sk_callback_avx+0x1bc>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  197,164,89,196                      // vmulps        %ymm4,%ymm11,%ymm0
  .byte  197,252,88,194                      // vaddps        %ymm2,%ymm0,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  197,164,89,213                      // vmulps        %ymm5,%ymm11,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,136                // vmulps        -0x78(%rsp),%ymm10,%ymm2
  .byte  197,36,89,206                       // vmulps        %ymm6,%ymm11,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  196,193,108,88,208                  // vaddps        %ymm8,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_avx
.globl _sk_luminosity_avx
FUNCTION(_sk_luminosity_avx)
_sk_luminosity_avx:
  .byte  197,124,40,226                      // vmovaps       %ymm2,%ymm12
  .byte  197,124,17,100,36,168               // vmovups       %ymm12,-0x58(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,98,125,24,45,116,75,0,0         // vbroadcastss  0x4b74(%rip),%ymm13        # 5dec <_sk_callback_avx+0x1c0>
  .byte  196,65,108,89,213                   // vmulps        %ymm13,%ymm2,%ymm10
  .byte  196,98,125,24,53,106,75,0,0         // vbroadcastss  0x4b6a(%rip),%ymm14        # 5df0 <_sk_callback_avx+0x1c4>
  .byte  196,65,116,89,222                   // vmulps        %ymm14,%ymm1,%ymm11
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,61,91,75,0,0          // vbroadcastss  0x4b5b(%rip),%ymm15        # 5df4 <_sk_callback_avx+0x1c8>
  .byte  196,65,28,89,223                    // vmulps        %ymm15,%ymm12,%ymm11
  .byte  196,193,44,88,195                   // vaddps        %ymm11,%ymm10,%ymm0
  .byte  196,65,60,89,221                    // vmulps        %ymm13,%ymm8,%ymm11
  .byte  196,65,52,89,230                    // vmulps        %ymm14,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,100,89,230                      // vmulps        %ymm6,%ymm3,%ymm12
  .byte  196,65,28,89,215                    // vmulps        %ymm15,%ymm12,%ymm10
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  197,60,88,192                       // vaddps        %ymm0,%ymm8,%ymm8
  .byte  197,52,88,208                       // vaddps        %ymm0,%ymm9,%ymm10
  .byte  197,28,88,216                       // vaddps        %ymm0,%ymm12,%ymm11
  .byte  196,193,44,93,195                   // vminps        %ymm11,%ymm10,%ymm0
  .byte  197,60,93,224                       // vminps        %ymm0,%ymm8,%ymm12
  .byte  196,193,60,89,197                   // vmulps        %ymm13,%ymm8,%ymm0
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,193,124,88,193                  // vaddps        %ymm9,%ymm0,%ymm0
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  197,52,88,200                       // vaddps        %ymm0,%ymm9,%ymm9
  .byte  196,193,60,92,193                   // vsubps        %ymm9,%ymm8,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,65,52,92,236                    // vsubps        %ymm12,%ymm9,%ymm13
  .byte  196,193,124,94,197                  // vdivps        %ymm13,%ymm0,%ymm0
  .byte  196,65,44,92,241                    // vsubps        %ymm9,%ymm10,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  196,65,12,94,245                    // vdivps        %ymm13,%ymm14,%ymm14
  .byte  196,65,36,92,249                    // vsubps        %ymm9,%ymm11,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  196,65,4,94,237                     // vdivps        %ymm13,%ymm15,%ymm13
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,65,4,194,228,2                  // vcmpleps      %ymm12,%ymm15,%ymm12
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,242,192                // vblendvps     %ymm12,%ymm10,%ymm14,%ymm14
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,88,237                    // vaddps        %ymm13,%ymm9,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,200,192              // vblendvps     %ymm12,%ymm8,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,60,95,194                    // vmaxps        %ymm10,%ymm8,%ymm8
  .byte  196,65,116,92,209                   // vsubps        %ymm9,%ymm1,%ymm10
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,192,1                // vcmpltps      %ymm8,%ymm12,%ymm0
  .byte  196,65,60,92,193                    // vsubps        %ymm9,%ymm8,%ymm8
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,12,92,209                    // vsubps        %ymm9,%ymm14,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,67,13,74,210,0                  // vblendvps     %ymm0,%ymm10,%ymm14,%ymm10
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,192                    // vdivps        %ymm8,%ymm13,%ymm8
  .byte  196,65,52,88,192                    // vaddps        %ymm8,%ymm9,%ymm8
  .byte  196,193,116,95,207                  // vmaxps        %ymm15,%ymm1,%ymm1
  .byte  196,65,44,95,207                    // vmaxps        %ymm15,%ymm10,%ymm9
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,65,124,95,199                   // vmaxps        %ymm15,%ymm0,%ymm8
  .byte  196,226,125,24,5,34,74,0,0          // vbroadcastss  0x4a22(%rip),%ymm0        # 5df8 <_sk_callback_avx+0x1cc>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  197,164,89,196                      // vmulps        %ymm4,%ymm11,%ymm0
  .byte  197,252,88,194                      // vaddps        %ymm2,%ymm0,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  197,164,89,213                      // vmulps        %ymm5,%ymm11,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  197,36,89,206                       // vmulps        %ymm6,%ymm11,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  196,193,108,88,208                  // vaddps        %ymm8,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_0_avx
.globl _sk_clamp_0_avx
FUNCTION(_sk_clamp_0_avx)
_sk_clamp_0_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_avx
.globl _sk_clamp_1_avx
FUNCTION(_sk_clamp_1_avx)
_sk_clamp_1_avx:
  .byte  196,98,125,24,5,181,73,0,0          // vbroadcastss  0x49b5(%rip),%ymm8        # 5dfc <_sk_callback_avx+0x1d0>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_avx
.globl _sk_clamp_a_avx
FUNCTION(_sk_clamp_a_avx)
_sk_clamp_a_avx:
  .byte  196,98,125,24,5,152,73,0,0          // vbroadcastss  0x4998(%rip),%ymm8        # 5e00 <_sk_callback_avx+0x1d4>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_avx
.globl _sk_set_rgb_avx
FUNCTION(_sk_set_rgb_avx)
_sk_set_rgb_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_avx
.globl _sk_swap_rb_avx
FUNCTION(_sk_swap_rb_avx)
_sk_swap_rb_avx:
  .byte  197,124,40,192                      // vmovaps       %ymm0,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,194                      // vmovaps       %ymm2,%ymm0
  .byte  197,124,41,194                      // vmovaps       %ymm8,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_avx
.globl _sk_swap_avx
FUNCTION(_sk_swap_avx)
_sk_swap_avx:
  .byte  197,124,40,195                      // vmovaps       %ymm3,%ymm8
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,40,209                      // vmovaps       %ymm1,%ymm10
  .byte  197,124,40,216                      // vmovaps       %ymm0,%ymm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  197,124,41,220                      // vmovaps       %ymm11,%ymm4
  .byte  197,124,41,213                      // vmovaps       %ymm10,%ymm5
  .byte  197,124,41,206                      // vmovaps       %ymm9,%ymm6
  .byte  197,124,41,199                      // vmovaps       %ymm8,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_avx
.globl _sk_move_src_dst_avx
FUNCTION(_sk_move_src_dst_avx)
_sk_move_src_dst_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,242                      // vmovaps       %ymm2,%ymm6
  .byte  197,252,40,251                      // vmovaps       %ymm3,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_avx
.globl _sk_move_dst_src_avx
FUNCTION(_sk_move_dst_src_avx)
_sk_move_dst_src_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_avx
.globl _sk_premul_avx
FUNCTION(_sk_premul_avx)
_sk_premul_avx:
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_avx
.globl _sk_unpremul_avx
FUNCTION(_sk_unpremul_avx)
_sk_unpremul_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,100,194,200,0                // vcmpeqps      %ymm8,%ymm3,%ymm9
  .byte  196,98,125,24,21,224,72,0,0         // vbroadcastss  0x48e0(%rip),%ymm10        # 5e04 <_sk_callback_avx+0x1d8>
  .byte  197,44,94,211                       // vdivps        %ymm3,%ymm10,%ymm10
  .byte  196,67,45,74,192,144                // vblendvps     %ymm9,%ymm8,%ymm10,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_avx
.globl _sk_from_srgb_avx
FUNCTION(_sk_from_srgb_avx)
_sk_from_srgb_avx:
  .byte  196,98,125,24,5,193,72,0,0          // vbroadcastss  0x48c1(%rip),%ymm8        # 5e08 <_sk_callback_avx+0x1dc>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  197,124,89,208                      // vmulps        %ymm0,%ymm0,%ymm10
  .byte  196,98,125,24,29,179,72,0,0         // vbroadcastss  0x48b3(%rip),%ymm11        # 5e0c <_sk_callback_avx+0x1e0>
  .byte  196,65,124,89,227                   // vmulps        %ymm11,%ymm0,%ymm12
  .byte  196,98,125,24,45,169,72,0,0         // vbroadcastss  0x48a9(%rip),%ymm13        # 5e10 <_sk_callback_avx+0x1e4>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,44,89,212                    // vmulps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,154,72,0,0         // vbroadcastss  0x489a(%rip),%ymm12        # 5e14 <_sk_callback_avx+0x1e8>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,53,144,72,0,0         // vbroadcastss  0x4890(%rip),%ymm14        # 5e18 <_sk_callback_avx+0x1ec>
  .byte  196,193,124,194,198,1               // vcmpltps      %ymm14,%ymm0,%ymm0
  .byte  196,195,45,74,193,0                 // vblendvps     %ymm0,%ymm9,%ymm10,%ymm0
  .byte  196,65,116,89,200                   // vmulps        %ymm8,%ymm1,%ymm9
  .byte  197,116,89,209                      // vmulps        %ymm1,%ymm1,%ymm10
  .byte  196,65,116,89,251                   // vmulps        %ymm11,%ymm1,%ymm15
  .byte  196,65,4,88,253                     // vaddps        %ymm13,%ymm15,%ymm15
  .byte  196,65,44,89,215                    // vmulps        %ymm15,%ymm10,%ymm10
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,193,116,194,206,1               // vcmpltps      %ymm14,%ymm1,%ymm1
  .byte  196,195,45,74,201,16                // vblendvps     %ymm1,%ymm9,%ymm10,%ymm1
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  197,108,89,202                      // vmulps        %ymm2,%ymm2,%ymm9
  .byte  196,65,108,89,211                   // vmulps        %ymm11,%ymm2,%ymm10
  .byte  196,65,44,88,213                    // vaddps        %ymm13,%ymm10,%ymm10
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,65,52,88,204                    // vaddps        %ymm12,%ymm9,%ymm9
  .byte  196,193,108,194,214,1               // vcmpltps      %ymm14,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_avx
.globl _sk_to_srgb_avx
FUNCTION(_sk_to_srgb_avx)
_sk_to_srgb_avx:
  .byte  197,124,82,192                      // vrsqrtps      %ymm0,%ymm8
  .byte  196,65,124,83,200                   // vrcpps        %ymm8,%ymm9
  .byte  196,65,124,82,208                   // vrsqrtps      %ymm8,%ymm10
  .byte  196,98,125,24,5,27,72,0,0           // vbroadcastss  0x481b(%rip),%ymm8        # 5e1c <_sk_callback_avx+0x1f0>
  .byte  196,65,124,89,216                   // vmulps        %ymm8,%ymm0,%ymm11
  .byte  196,98,125,24,37,17,72,0,0          // vbroadcastss  0x4811(%rip),%ymm12        # 5e20 <_sk_callback_avx+0x1f4>
  .byte  196,65,52,89,204                    // vmulps        %ymm12,%ymm9,%ymm9
  .byte  196,98,125,24,45,7,72,0,0           // vbroadcastss  0x4807(%rip),%ymm13        # 5e24 <_sk_callback_avx+0x1f8>
  .byte  196,65,52,88,205                    // vaddps        %ymm13,%ymm9,%ymm9
  .byte  196,98,125,24,53,253,71,0,0         // vbroadcastss  0x47fd(%rip),%ymm14        # 5e28 <_sk_callback_avx+0x1fc>
  .byte  196,65,44,89,214                    // vmulps        %ymm14,%ymm10,%ymm10
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  196,98,125,24,21,238,71,0,0         // vbroadcastss  0x47ee(%rip),%ymm10        # 5e2c <_sk_callback_avx+0x200>
  .byte  196,65,44,93,201                    // vminps        %ymm9,%ymm10,%ymm9
  .byte  196,98,125,24,61,228,71,0,0         // vbroadcastss  0x47e4(%rip),%ymm15        # 5e30 <_sk_callback_avx+0x204>
  .byte  196,193,124,194,199,1               // vcmpltps      %ymm15,%ymm0,%ymm0
  .byte  196,195,53,74,195,0                 // vblendvps     %ymm0,%ymm11,%ymm9,%ymm0
  .byte  197,124,82,201                      // vrsqrtps      %ymm1,%ymm9
  .byte  196,65,124,83,217                   // vrcpps        %ymm9,%ymm11
  .byte  196,65,124,82,201                   // vrsqrtps      %ymm9,%ymm9
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,65,52,89,206                    // vmulps        %ymm14,%ymm9,%ymm9
  .byte  196,65,52,88,203                    // vaddps        %ymm11,%ymm9,%ymm9
  .byte  196,65,116,89,216                   // vmulps        %ymm8,%ymm1,%ymm11
  .byte  196,65,44,93,201                    // vminps        %ymm9,%ymm10,%ymm9
  .byte  196,193,116,194,207,1               // vcmpltps      %ymm15,%ymm1,%ymm1
  .byte  196,195,53,74,203,16                // vblendvps     %ymm1,%ymm11,%ymm9,%ymm1
  .byte  197,124,82,202                      // vrsqrtps      %ymm2,%ymm9
  .byte  196,65,124,83,217                   // vrcpps        %ymm9,%ymm11
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,65,124,82,201                   // vrsqrtps      %ymm9,%ymm9
  .byte  196,65,52,89,206                    // vmulps        %ymm14,%ymm9,%ymm9
  .byte  196,65,52,88,203                    // vaddps        %ymm11,%ymm9,%ymm9
  .byte  196,65,44,93,201                    // vminps        %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,193,108,194,215,1               // vcmpltps      %ymm15,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_avx
.globl _sk_rgb_to_hsl_avx
FUNCTION(_sk_rgb_to_hsl_avx)
_sk_rgb_to_hsl_avx:
  .byte  197,124,95,193                      // vmaxps        %ymm1,%ymm0,%ymm8
  .byte  197,60,95,194                       // vmaxps        %ymm2,%ymm8,%ymm8
  .byte  197,124,93,201                      // vminps        %ymm1,%ymm0,%ymm9
  .byte  197,52,93,202                       // vminps        %ymm2,%ymm9,%ymm9
  .byte  196,65,60,92,209                    // vsubps        %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,29,74,71,0,0          // vbroadcastss  0x474a(%rip),%ymm11        # 5e34 <_sk_callback_avx+0x208>
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  197,116,92,226                      // vsubps        %ymm2,%ymm1,%ymm12
  .byte  196,65,28,89,227                    // vmulps        %ymm11,%ymm12,%ymm12
  .byte  197,116,194,234,1                   // vcmpltps      %ymm2,%ymm1,%ymm13
  .byte  197,60,194,241,0                    // vcmpeqps      %ymm1,%ymm8,%ymm14
  .byte  197,236,92,208                      // vsubps        %ymm0,%ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  197,252,92,201                      // vsubps        %ymm1,%ymm0,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,35,71,0,0          // vbroadcastss  0x4723(%rip),%ymm11        # 5e40 <_sk_callback_avx+0x214>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,17,71,0,0          // vbroadcastss  0x4711(%rip),%ymm11        # 5e3c <_sk_callback_avx+0x210>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,227,117,74,202,224              // vblendvps     %ymm14,%ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,249,70,0,0        // vbroadcastss  0x46f9(%rip),%ymm2        # 5e38 <_sk_callback_avx+0x20c>
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,227,13,74,210,208               // vblendvps     %ymm13,%ymm2,%ymm14,%ymm2
  .byte  197,188,194,192,0                   // vcmpeqps      %ymm0,%ymm8,%ymm0
  .byte  196,193,108,88,212                  // vaddps        %ymm12,%ymm2,%ymm2
  .byte  196,227,117,74,194,0                // vblendvps     %ymm0,%ymm2,%ymm1,%ymm0
  .byte  196,193,60,88,201                   // vaddps        %ymm9,%ymm8,%ymm1
  .byte  196,98,125,24,37,224,70,0,0         // vbroadcastss  0x46e0(%rip),%ymm12        # 5e48 <_sk_callback_avx+0x21c>
  .byte  196,193,116,89,212                  // vmulps        %ymm12,%ymm1,%ymm2
  .byte  197,28,194,226,1                    // vcmpltps      %ymm2,%ymm12,%ymm12
  .byte  196,65,36,92,216                    // vsubps        %ymm8,%ymm11,%ymm11
  .byte  196,65,36,92,217                    // vsubps        %ymm9,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  196,65,60,194,193,0                 // vcmpeqps      %ymm9,%ymm8,%ymm8
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  196,195,125,74,198,128              // vblendvps     %ymm8,%ymm14,%ymm0,%ymm0
  .byte  196,195,117,74,206,128              // vblendvps     %ymm8,%ymm14,%ymm1,%ymm1
  .byte  196,98,125,24,5,163,70,0,0          // vbroadcastss  0x46a3(%rip),%ymm8        # 5e44 <_sk_callback_avx+0x218>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_avx
.globl _sk_hsl_to_rgb_avx
FUNCTION(_sk_hsl_to_rgb_avx)
_sk_hsl_to_rgb_avx:
  .byte  72,131,236,56                       // sub           $0x38,%rsp
  .byte  197,252,17,60,36                    // vmovups       %ymm7,(%rsp)
  .byte  197,252,17,116,36,224               // vmovups       %ymm6,-0x20(%rsp)
  .byte  197,252,17,108,36,192               // vmovups       %ymm5,-0x40(%rsp)
  .byte  197,252,17,100,36,160               // vmovups       %ymm4,-0x60(%rsp)
  .byte  197,252,17,92,36,128                // vmovups       %ymm3,-0x80(%rsp)
  .byte  197,252,40,225                      // vmovaps       %ymm1,%ymm4
  .byte  197,252,40,216                      // vmovaps       %ymm0,%ymm3
  .byte  196,98,125,24,5,112,70,0,0          // vbroadcastss  0x4670(%rip),%ymm8        # 5e4c <_sk_callback_avx+0x220>
  .byte  197,60,194,202,2                    // vcmpleps      %ymm2,%ymm8,%ymm9
  .byte  197,92,89,210                       // vmulps        %ymm2,%ymm4,%ymm10
  .byte  196,65,92,92,218                    // vsubps        %ymm10,%ymm4,%ymm11
  .byte  196,67,45,74,203,144                // vblendvps     %ymm9,%ymm11,%ymm10,%ymm9
  .byte  197,52,88,210                       // vaddps        %ymm2,%ymm9,%ymm10
  .byte  197,108,88,202                      // vaddps        %ymm2,%ymm2,%ymm9
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,29,74,70,0,0          // vbroadcastss  0x464a(%rip),%ymm11        # 5e50 <_sk_callback_avx+0x224>
  .byte  196,65,100,88,219                   // vaddps        %ymm11,%ymm3,%ymm11
  .byte  196,67,125,8,227,1                  // vroundps      $0x1,%ymm11,%ymm12
  .byte  196,65,36,92,252                    // vsubps        %ymm12,%ymm11,%ymm15
  .byte  196,65,44,92,217                    // vsubps        %ymm9,%ymm10,%ymm11
  .byte  196,98,125,24,37,52,70,0,0          // vbroadcastss  0x4634(%rip),%ymm12        # 5e58 <_sk_callback_avx+0x22c>
  .byte  196,193,4,89,196                    // vmulps        %ymm12,%ymm15,%ymm0
  .byte  196,98,125,24,45,42,70,0,0          // vbroadcastss  0x462a(%rip),%ymm13        # 5e5c <_sk_callback_avx+0x230>
  .byte  197,20,92,240                       // vsubps        %ymm0,%ymm13,%ymm14
  .byte  196,65,36,89,246                    // vmulps        %ymm14,%ymm11,%ymm14
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,226,125,24,13,11,70,0,0         // vbroadcastss  0x460b(%rip),%ymm1        # 5e54 <_sk_callback_avx+0x228>
  .byte  196,193,116,194,255,2               // vcmpleps      %ymm15,%ymm1,%ymm7
  .byte  196,195,13,74,249,112               // vblendvps     %ymm7,%ymm9,%ymm14,%ymm7
  .byte  196,65,60,194,247,2                 // vcmpleps      %ymm15,%ymm8,%ymm14
  .byte  196,227,45,74,255,224               // vblendvps     %ymm14,%ymm7,%ymm10,%ymm7
  .byte  196,98,125,24,53,246,69,0,0         // vbroadcastss  0x45f6(%rip),%ymm14        # 5e60 <_sk_callback_avx+0x234>
  .byte  196,65,12,194,255,2                 // vcmpleps      %ymm15,%ymm14,%ymm15
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,99,125,74,255,240               // vblendvps     %ymm15,%ymm7,%ymm0,%ymm15
  .byte  196,227,125,8,195,1                 // vroundps      $0x1,%ymm3,%ymm0
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,252                  // vmulps        %ymm12,%ymm0,%ymm7
  .byte  197,148,92,247                      // vsubps        %ymm7,%ymm13,%ymm6
  .byte  197,164,89,246                      // vmulps        %ymm6,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  197,244,194,232,2                   // vcmpleps      %ymm0,%ymm1,%ymm5
  .byte  196,195,77,74,233,80                // vblendvps     %ymm5,%ymm9,%ymm6,%ymm5
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,237,96                // vblendvps     %ymm6,%ymm5,%ymm10,%ymm5
  .byte  197,140,194,192,2                   // vcmpleps      %ymm0,%ymm14,%ymm0
  .byte  197,164,89,247                      // vmulps        %ymm7,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  196,227,77,74,237,0                 // vblendvps     %ymm0,%ymm5,%ymm6,%ymm5
  .byte  196,226,125,24,5,152,69,0,0         // vbroadcastss  0x4598(%rip),%ymm0        # 5e64 <_sk_callback_avx+0x238>
  .byte  197,228,88,192                      // vaddps        %ymm0,%ymm3,%ymm0
  .byte  196,227,125,8,216,1                 // vroundps      $0x1,%ymm0,%ymm3
  .byte  197,252,92,195                      // vsubps        %ymm3,%ymm0,%ymm0
  .byte  197,244,194,200,2                   // vcmpleps      %ymm0,%ymm1,%ymm1
  .byte  196,193,124,89,220                  // vmulps        %ymm12,%ymm0,%ymm3
  .byte  197,148,92,243                      // vsubps        %ymm3,%ymm13,%ymm6
  .byte  197,164,89,246                      // vmulps        %ymm6,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  196,195,77,74,201,16                // vblendvps     %ymm1,%ymm9,%ymm6,%ymm1
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,201,96                // vblendvps     %ymm6,%ymm1,%ymm10,%ymm1
  .byte  197,140,194,192,2                   // vcmpleps      %ymm0,%ymm14,%ymm0
  .byte  197,164,89,219                      // vmulps        %ymm3,%ymm11,%ymm3
  .byte  197,180,88,219                      // vaddps        %ymm3,%ymm9,%ymm3
  .byte  196,227,101,74,217,0                // vblendvps     %ymm0,%ymm1,%ymm3,%ymm3
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,220,194,224,0                   // vcmpeqps      %ymm0,%ymm4,%ymm4
  .byte  196,227,5,74,194,64                 // vblendvps     %ymm4,%ymm2,%ymm15,%ymm0
  .byte  196,227,85,74,202,64                // vblendvps     %ymm4,%ymm2,%ymm5,%ymm1
  .byte  196,227,101,74,210,64               // vblendvps     %ymm4,%ymm2,%ymm3,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,92,36,128                // vmovups       -0x80(%rsp),%ymm3
  .byte  197,252,16,100,36,160               // vmovups       -0x60(%rsp),%ymm4
  .byte  197,252,16,108,36,192               // vmovups       -0x40(%rsp),%ymm5
  .byte  197,252,16,116,36,224               // vmovups       -0x20(%rsp),%ymm6
  .byte  197,252,16,60,36                    // vmovups       (%rsp),%ymm7
  .byte  72,131,196,56                       // add           $0x38,%rsp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_avx
.globl _sk_scale_1_float_avx
FUNCTION(_sk_scale_1_float_avx)
_sk_scale_1_float_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_avx
.globl _sk_scale_u8_avx
FUNCTION(_sk_scale_u8_avx)
_sk_scale_u8_avx:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,1,248                            // add           %rdi,%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,68                              // jne           19c3 <_sk_scale_u8_avx+0x54>
  .byte  197,122,126,0                       // vmovq         (%rax),%xmm8
  .byte  196,66,121,49,200                   // vpmovzxbd     %xmm8,%xmm9
  .byte  196,67,121,4,192,229                // vpermilps     $0xe5,%xmm8,%xmm8
  .byte  196,66,121,49,192                   // vpmovzxbd     %xmm8,%xmm8
  .byte  196,67,53,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm9,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,193,68,0,0         // vbroadcastss  0x44c1(%rip),%ymm9        # 5e68 <_sk_callback_avx+0x23c>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  49,201                              // xor           %ecx,%ecx
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  69,49,201                           // xor           %r9d,%r9d
  .byte  68,15,182,24                        // movzbl        (%rax),%r11d
  .byte  72,255,192                          // inc           %rax
  .byte  73,211,227                          // shl           %cl,%r11
  .byte  77,9,217                            // or            %r11,%r9
  .byte  72,131,193,8                        // add           $0x8,%rcx
  .byte  73,255,202                          // dec           %r10
  .byte  117,234                             // jne           19cb <_sk_scale_u8_avx+0x5c>
  .byte  196,65,249,110,193                  // vmovq         %r9,%xmm8
  .byte  235,155                             // jmp           1983 <_sk_scale_u8_avx+0x14>

HIDDEN _sk_lerp_1_float_avx
.globl _sk_lerp_1_float_avx
FUNCTION(_sk_lerp_1_float_avx)
_sk_lerp_1_float_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_avx
.globl _sk_lerp_u8_avx
FUNCTION(_sk_lerp_u8_avx)
_sk_lerp_u8_avx:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,1,248                            // add           %rdi,%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,104                             // jne           1a9f <_sk_lerp_u8_avx+0x78>
  .byte  197,122,126,0                       // vmovq         (%rax),%xmm8
  .byte  196,66,121,49,200                   // vpmovzxbd     %xmm8,%xmm9
  .byte  196,67,121,4,192,229                // vpermilps     $0xe5,%xmm8,%xmm8
  .byte  196,66,121,49,192                   // vpmovzxbd     %xmm8,%xmm8
  .byte  196,67,53,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm9,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,13,68,0,0          // vbroadcastss  0x440d(%rip),%ymm9        # 5e6c <_sk_callback_avx+0x240>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  49,201                              // xor           %ecx,%ecx
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  69,49,201                           // xor           %r9d,%r9d
  .byte  68,15,182,24                        // movzbl        (%rax),%r11d
  .byte  72,255,192                          // inc           %rax
  .byte  73,211,227                          // shl           %cl,%r11
  .byte  77,9,217                            // or            %r11,%r9
  .byte  72,131,193,8                        // add           $0x8,%rcx
  .byte  73,255,202                          // dec           %r10
  .byte  117,234                             // jne           1aa7 <_sk_lerp_u8_avx+0x80>
  .byte  196,65,249,110,193                  // vmovq         %r9,%xmm8
  .byte  233,116,255,255,255                 // jmpq          1a3b <_sk_lerp_u8_avx+0x14>

HIDDEN _sk_lerp_565_avx
.globl _sk_lerp_565_avx
FUNCTION(_sk_lerp_565_avx)
_sk_lerp_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,208,0,0,0                    // jne           1ba5 <_sk_lerp_565_avx+0xde>
  .byte  196,65,122,111,4,122                // vmovdqu       (%r10,%rdi,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,65,57,105,201                   // vpunpckhwd    %xmm9,%xmm8,%xmm9
  .byte  196,66,121,51,192                   // vpmovzxwd     %xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,119,67,0,0         // vbroadcastss  0x4377(%rip),%ymm9        # 5e70 <_sk_callback_avx+0x244>
  .byte  196,65,60,84,201                    // vandps        %ymm9,%ymm8,%ymm9
  .byte  196,65,124,91,201                   // vcvtdq2ps     %ymm9,%ymm9
  .byte  196,98,125,24,21,104,67,0,0         // vbroadcastss  0x4368(%rip),%ymm10        # 5e74 <_sk_callback_avx+0x248>
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,94,67,0,0          // vbroadcastss  0x435e(%rip),%ymm10        # 5e78 <_sk_callback_avx+0x24c>
  .byte  196,65,60,84,210                    // vandps        %ymm10,%ymm8,%ymm10
  .byte  196,65,124,91,210                   // vcvtdq2ps     %ymm10,%ymm10
  .byte  196,98,125,24,29,79,67,0,0          // vbroadcastss  0x434f(%rip),%ymm11        # 5e7c <_sk_callback_avx+0x250>
  .byte  196,65,44,89,211                    // vmulps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,29,69,67,0,0          // vbroadcastss  0x4345(%rip),%ymm11        # 5e80 <_sk_callback_avx+0x254>
  .byte  196,65,60,84,195                    // vandps        %ymm11,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,29,54,67,0,0          // vbroadcastss  0x4336(%rip),%ymm11        # 5e84 <_sk_callback_avx+0x258>
  .byte  196,65,60,89,195                    // vmulps        %ymm11,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,65,100,89,201                   // vmulps        %ymm9,%ymm3,%ymm9
  .byte  197,52,88,207                       // vaddps        %ymm7,%ymm9,%ymm9
  .byte  196,65,100,89,210                   // vmulps        %ymm10,%ymm3,%ymm10
  .byte  197,44,88,215                       // vaddps        %ymm7,%ymm10,%ymm10
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  197,172,95,219                      // vmaxps        %ymm3,%ymm10,%ymm3
  .byte  197,180,95,219                      // vmaxps        %ymm3,%ymm9,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  15,135,29,255,255,255               // ja            1adb <_sk_lerp_565_avx+0x14>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,75,0,0,0                  // lea           0x4b(%rip),%r9        # 1c14 <_sk_lerp_565_avx+0x14d>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,65,57,196,68,122,12,6           // vpinsrw       $0x6,0xc(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,10,5           // vpinsrw       $0x5,0xa(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,8,4            // vpinsrw       $0x4,0x8(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,6,3            // vpinsrw       $0x3,0x6(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,4,2            // vpinsrw       $0x2,0x4(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,122,2,1            // vpinsrw       $0x1,0x2(%r10,%rdi,2),%xmm8,%xmm8
  .byte  196,65,57,196,4,122,0               // vpinsrw       $0x0,(%r10,%rdi,2),%xmm8,%xmm8
  .byte  233,200,254,255,255                 // jmpq          1adb <_sk_lerp_565_avx+0x14>
  .byte  144                                 // nop
  .byte  243,255                             // repz          (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  235,255                             // jmp           1c19 <_sk_lerp_565_avx+0x152>
  .byte  255                                 // (bad)
  .byte  255,227                             // jmpq          *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  219,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,203                             // dec           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190                                 // .byte         0xbe
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_tables_avx
.globl _sk_load_tables_avx
FUNCTION(_sk_load_tables_avx)
_sk_load_tables_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,26,2,0,0                     // jne           1e58 <_sk_load_tables_avx+0x228>
  .byte  196,65,124,16,4,184                 // vmovups       (%r8,%rdi,4),%ymm8
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  197,124,40,13,10,69,0,0             // vmovaps       0x450a(%rip),%ymm9        # 6160 <_sk_callback_avx+0x534>
  .byte  196,193,60,84,193                   // vandps        %ymm9,%ymm8,%ymm0
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  69,137,203                          // mov           %r9d,%r11d
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  69,137,214                          // mov           %r10d,%r14d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,227,125,25,192,1                // vextractf128  $0x1,%ymm0,%xmm0
  .byte  196,193,249,126,196                 // vmovq         %xmm0,%r12
  .byte  69,137,231                          // mov           %r12d,%r15d
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  72,139,104,8                        // mov           0x8(%rax),%rbp
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  196,161,122,16,68,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm0
  .byte  196,163,121,33,68,165,0,16          // vinsertps     $0x10,0x0(%rbp,%r12,4),%xmm0,%xmm0
  .byte  196,163,121,33,68,173,0,32          // vinsertps     $0x20,0x0(%rbp,%r13,4),%xmm0,%xmm0
  .byte  196,227,121,33,68,157,0,48          // vinsertps     $0x30,0x0(%rbp,%rbx,4),%xmm0,%xmm0
  .byte  196,161,122,16,76,157,0             // vmovss        0x0(%rbp,%r11,4),%xmm1
  .byte  196,163,113,33,76,141,0,16          // vinsertps     $0x10,0x0(%rbp,%r9,4),%xmm1,%xmm1
  .byte  196,163,113,33,76,181,0,32          // vinsertps     $0x20,0x0(%rbp,%r14,4),%xmm1,%xmm1
  .byte  196,163,113,33,76,149,0,48          // vinsertps     $0x30,0x0(%rbp,%r10,4),%xmm1,%xmm1
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  196,193,113,114,208,8               // vpsrld        $0x8,%xmm8,%xmm1
  .byte  196,67,125,25,194,1                 // vextractf128  $0x1,%ymm8,%xmm10
  .byte  196,193,105,114,210,8               // vpsrld        $0x8,%xmm10,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,201                  // vandps        %ymm9,%ymm1,%ymm1
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  69,137,203                          // mov           %r9d,%r11d
  .byte  196,195,249,22,202,1                // vpextrq       $0x1,%xmm1,%r10
  .byte  69,137,214                          // mov           %r10d,%r14d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,225,249,126,205                 // vmovq         %xmm1,%rbp
  .byte  65,137,239                          // mov           %ebp,%r15d
  .byte  196,227,249,22,203,1                // vpextrq       $0x1,%xmm1,%rbx
  .byte  65,137,220                          // mov           %ebx,%r12d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,129,122,16,12,184               // vmovss        (%r8,%r15,4),%xmm1
  .byte  196,195,113,33,12,168,16            // vinsertps     $0x10,(%r8,%rbp,4),%xmm1,%xmm1
  .byte  196,129,122,16,20,160               // vmovss        (%r8,%r12,4),%xmm2
  .byte  196,227,113,33,202,32               // vinsertps     $0x20,%xmm2,%xmm1,%xmm1
  .byte  196,193,122,16,20,152               // vmovss        (%r8,%rbx,4),%xmm2
  .byte  196,227,113,33,202,48               // vinsertps     $0x30,%xmm2,%xmm1,%xmm1
  .byte  196,129,122,16,20,152               // vmovss        (%r8,%r11,4),%xmm2
  .byte  196,131,105,33,20,136,16            // vinsertps     $0x10,(%r8,%r9,4),%xmm2,%xmm2
  .byte  196,129,122,16,28,176               // vmovss        (%r8,%r14,4),%xmm3
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,129,122,16,28,144               // vmovss        (%r8,%r10,4),%xmm3
  .byte  196,227,105,33,211,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm2,%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,105,114,208,16              // vpsrld        $0x10,%xmm8,%xmm2
  .byte  196,193,97,114,210,16               // vpsrld        $0x10,%xmm10,%xmm3
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  196,193,108,84,209                  // vandps        %ymm9,%ymm2,%ymm2
  .byte  196,193,249,126,208                 // vmovq         %xmm2,%r8
  .byte  69,137,194                          // mov           %r8d,%r10d
  .byte  196,195,249,22,209,1                // vpextrq       $0x1,%xmm2,%r9
  .byte  69,137,203                          // mov           %r9d,%r11d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  73,193,232,32                       // shr           $0x20,%r8
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,225,249,126,213                 // vmovq         %xmm2,%rbp
  .byte  65,137,238                          // mov           %ebp,%r14d
  .byte  196,227,249,22,211,1                // vpextrq       $0x1,%xmm2,%rbx
  .byte  65,137,223                          // mov           %ebx,%r15d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,161,122,16,20,176               // vmovss        (%rax,%r14,4),%xmm2
  .byte  196,227,105,33,20,168,16            // vinsertps     $0x10,(%rax,%rbp,4),%xmm2,%xmm2
  .byte  196,161,122,16,28,184               // vmovss        (%rax,%r15,4),%xmm3
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  197,250,16,28,152                   // vmovss        (%rax,%rbx,4),%xmm3
  .byte  196,99,105,33,203,48                // vinsertps     $0x30,%xmm3,%xmm2,%xmm9
  .byte  196,161,122,16,28,144               // vmovss        (%rax,%r10,4),%xmm3
  .byte  196,163,97,33,28,128,16             // vinsertps     $0x10,(%rax,%r8,4),%xmm3,%xmm3
  .byte  196,161,122,16,20,152               // vmovss        (%rax,%r11,4),%xmm2
  .byte  196,227,97,33,210,32                // vinsertps     $0x20,%xmm2,%xmm3,%xmm2
  .byte  196,161,122,16,28,136               // vmovss        (%rax,%r9,4),%xmm3
  .byte  196,227,105,33,211,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm2
  .byte  196,195,109,24,209,1                // vinsertf128   $0x1,%xmm9,%ymm2,%ymm2
  .byte  196,193,57,114,208,24               // vpsrld        $0x18,%xmm8,%xmm8
  .byte  196,193,97,114,210,24               // vpsrld        $0x18,%xmm10,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,67,64,0,0           // vbroadcastss  0x4043(%rip),%ymm8        # 5e88 <_sk_callback_avx+0x25c>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,201                          // mov           %ecx,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,211,253,255,255              // ja            1c44 <_sk_load_tables_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,140,0,0,0                 // lea           0x8c(%rip),%r10        # 1f08 <_sk_load_tables_avx+0x2d8>
  .byte  79,99,12,138                        // movslq        (%r10,%r9,4),%r9
  .byte  77,1,209                            // add           %r10,%r9
  .byte  65,255,225                          // jmpq          *%r9
  .byte  196,193,121,110,68,184,24           // vmovd         0x18(%r8,%rdi,4),%xmm0
  .byte  197,249,112,192,68                  // vpshufd       $0x44,%xmm0,%xmm0
  .byte  196,227,125,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  196,99,117,12,192,64                // vblendps      $0x40,%ymm0,%ymm1,%ymm8
  .byte  196,99,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm0
  .byte  196,195,121,34,68,184,20,1          // vpinsrd       $0x1,0x14(%r8,%rdi,4),%xmm0,%xmm0
  .byte  196,99,61,24,192,1                  // vinsertf128   $0x1,%xmm0,%ymm8,%ymm8
  .byte  196,99,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm0
  .byte  196,195,121,34,68,184,16,0          // vpinsrd       $0x0,0x10(%r8,%rdi,4),%xmm0,%xmm0
  .byte  196,99,61,24,192,1                  // vinsertf128   $0x1,%xmm0,%ymm8,%ymm8
  .byte  196,195,57,34,68,184,12,3           // vpinsrd       $0x3,0xc(%r8,%rdi,4),%xmm8,%xmm0
  .byte  196,99,61,12,192,15                 // vblendps      $0xf,%ymm0,%ymm8,%ymm8
  .byte  196,195,57,34,68,184,8,2            // vpinsrd       $0x2,0x8(%r8,%rdi,4),%xmm8,%xmm0
  .byte  196,99,61,12,192,15                 // vblendps      $0xf,%ymm0,%ymm8,%ymm8
  .byte  196,195,57,34,68,184,4,1            // vpinsrd       $0x1,0x4(%r8,%rdi,4),%xmm8,%xmm0
  .byte  196,99,61,12,192,15                 // vblendps      $0xf,%ymm0,%ymm8,%ymm8
  .byte  196,195,57,34,4,184,0               // vpinsrd       $0x0,(%r8,%rdi,4),%xmm8,%xmm0
  .byte  196,99,61,12,192,15                 // vblendps      $0xf,%ymm0,%ymm8,%ymm8
  .byte  233,62,253,255,255                  // jmpq          1c44 <_sk_load_tables_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,174,255,255,255,154             // ljmp          *-0x65000001(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  126,255                             // jle           1f21 <_sk_load_tables_avx+0x2f1>
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_tables_u16_be_avx
.globl _sk_load_tables_u16_be_avx
FUNCTION(_sk_load_tables_u16_be_avx)
_sk_load_tables_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  76,141,12,189,0,0,0,0               // lea           0x0(,%rdi,4),%r9
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,113,2,0,0                    // jne           21ab <_sk_load_tables_u16_be_avx+0x287>
  .byte  196,1,121,16,4,72                   // vmovupd       (%r8,%r9,2),%xmm8
  .byte  196,129,121,16,84,72,16             // vmovupd       0x10(%r8,%r9,2),%xmm2
  .byte  196,129,121,16,92,72,32             // vmovupd       0x20(%r8,%r9,2),%xmm3
  .byte  196,1,122,111,76,72,48              // vmovdqu       0x30(%r8,%r9,2),%xmm9
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,202                      // vpunpcklwd    %xmm2,%xmm0,%xmm9
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,241,97,195                      // vpunpcklwd    %xmm3,%xmm1,%xmm0
  .byte  197,113,105,227                     // vpunpckhwd    %xmm3,%xmm1,%xmm12
  .byte  197,177,108,208                     // vpunpcklqdq   %xmm0,%xmm9,%xmm2
  .byte  197,177,109,200                     // vpunpckhqdq   %xmm0,%xmm9,%xmm1
  .byte  196,65,57,108,212                   // vpunpcklqdq   %xmm12,%xmm8,%xmm10
  .byte  197,121,111,29,74,66,0,0            // vmovdqa       0x424a(%rip),%xmm11        # 61e0 <_sk_callback_avx+0x5b4>
  .byte  196,193,105,219,195                 // vpand         %xmm11,%xmm2,%xmm0
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,193,121,105,209                 // vpunpckhwd    %xmm9,%xmm0,%xmm2
  .byte  196,195,249,22,208,1                // vpextrq       $0x1,%xmm2,%r8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,208                 // vmovq         %xmm2,%r8
  .byte  69,137,195                          // mov           %r8d,%r11d
  .byte  77,137,198                          // mov           %r8,%r14
  .byte  73,193,238,32                       // shr           $0x20,%r14
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,223                          // mov           %ebx,%r15d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  196,195,249,22,196,1                // vpextrq       $0x1,%xmm0,%r12
  .byte  69,137,229                          // mov           %r12d,%r13d
  .byte  73,193,236,30                       // shr           $0x1e,%r12
  .byte  72,139,104,8                        // mov           0x8(%rax),%rbp
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  196,161,122,16,68,157,0             // vmovss        0x0(%rbp,%r11,4),%xmm0
  .byte  196,163,121,33,68,181,0,16          // vinsertps     $0x10,0x0(%rbp,%r14,4),%xmm0,%xmm0
  .byte  196,161,122,16,84,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm2
  .byte  196,227,121,33,194,32               // vinsertps     $0x20,%xmm2,%xmm0,%xmm0
  .byte  196,161,122,16,84,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm2
  .byte  196,227,121,33,194,48               // vinsertps     $0x30,%xmm2,%xmm0,%xmm0
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,227,105,33,84,29,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,1),%xmm2,%xmm2
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,161,122,16,92,37,0              // vmovss        0x0(%rbp,%r12,1),%xmm3
  .byte  196,227,105,33,211,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm2,%ymm0
  .byte  196,193,113,219,203                 // vpand         %xmm11,%xmm1,%xmm1
  .byte  196,193,113,105,209                 // vpunpckhwd    %xmm9,%xmm1,%xmm2
  .byte  196,227,249,22,213,1                // vpextrq       $0x1,%xmm2,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,211                 // vmovq         %xmm2,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,193,249,126,203                 // vmovq         %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,195,249,22,207,1                // vpextrq       $0x1,%xmm1,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,30                       // shr           $0x1e,%r15
  .byte  196,129,122,16,12,144               // vmovss        (%r8,%r10,4),%xmm1
  .byte  196,195,113,33,12,152,16            // vinsertps     $0x10,(%r8,%rbx,4),%xmm1,%xmm1
  .byte  196,129,122,16,20,136               // vmovss        (%r8,%r9,4),%xmm2
  .byte  196,227,113,33,202,32               // vinsertps     $0x20,%xmm2,%xmm1,%xmm1
  .byte  196,193,122,16,20,168               // vmovss        (%r8,%rbp,4),%xmm2
  .byte  196,227,113,33,202,48               // vinsertps     $0x30,%xmm2,%xmm1,%xmm1
  .byte  196,129,122,16,20,176               // vmovss        (%r8,%r14,4),%xmm2
  .byte  196,131,105,33,20,24,16             // vinsertps     $0x10,(%r8,%r11,1),%xmm2,%xmm2
  .byte  196,129,122,16,28,160               // vmovss        (%r8,%r12,4),%xmm3
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,129,122,16,28,56                // vmovss        (%r8,%r15,1),%xmm3
  .byte  196,227,105,33,211,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm2,%ymm1
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,193,41,219,211                  // vpand         %xmm11,%xmm10,%xmm2
  .byte  196,193,105,105,217                 // vpunpckhwd    %xmm9,%xmm2,%xmm3
  .byte  196,227,249,22,221,1                // vpextrq       $0x1,%xmm3,%rbp
  .byte  65,137,232                          // mov           %ebp,%r8d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,219                 // vmovq         %xmm3,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,225,249,126,208                 // vmovq         %xmm2,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  196,195,249,22,214,1                // vpextrq       $0x1,%xmm2,%r14
  .byte  69,137,247                          // mov           %r14d,%r15d
  .byte  73,193,238,30                       // shr           $0x1e,%r14
  .byte  196,129,122,16,20,138               // vmovss        (%r10,%r9,4),%xmm2
  .byte  196,195,105,33,20,154,16            // vinsertps     $0x10,(%r10,%rbx,4),%xmm2,%xmm2
  .byte  196,129,122,16,28,130               // vmovss        (%r10,%r8,4),%xmm3
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,193,122,16,28,170               // vmovss        (%r10,%rbp,4),%xmm3
  .byte  196,99,105,33,211,48                // vinsertps     $0x30,%xmm3,%xmm2,%xmm10
  .byte  196,129,122,16,28,154               // vmovss        (%r10,%r11,4),%xmm3
  .byte  196,195,97,33,28,2,16               // vinsertps     $0x10,(%r10,%rax,1),%xmm3,%xmm3
  .byte  196,129,122,16,20,186               // vmovss        (%r10,%r15,4),%xmm2
  .byte  196,227,97,33,210,32                // vinsertps     $0x20,%xmm2,%xmm3,%xmm2
  .byte  196,129,122,16,28,50                // vmovss        (%r10,%r14,1),%xmm3
  .byte  196,227,105,33,211,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm2
  .byte  196,195,109,24,210,1                // vinsertf128   $0x1,%xmm10,%ymm2,%ymm2
  .byte  196,193,57,109,220                  // vpunpckhqdq   %xmm12,%xmm8,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,65,97,105,193                   // vpunpckhwd    %xmm9,%xmm3,%xmm8
  .byte  196,226,121,51,219                  // vpmovzxwd     %xmm3,%xmm3
  .byte  196,195,101,24,216,1                // vinsertf128   $0x1,%xmm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,244,60,0,0          // vbroadcastss  0x3cf4(%rip),%ymm8        # 5e8c <_sk_callback_avx+0x260>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax
  .byte  196,1,123,16,4,72                   // vmovsd        (%r8,%r9,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,85                              // je            2211 <_sk_load_tables_u16_be_avx+0x2ed>
  .byte  196,1,57,22,68,72,8                 // vmovhpd       0x8(%r8,%r9,2),%xmm8,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,72                              // jb            2211 <_sk_load_tables_u16_be_avx+0x2ed>
  .byte  196,129,123,16,84,72,16             // vmovsd        0x10(%r8,%r9,2),%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  116,72                              // je            221e <_sk_load_tables_u16_be_avx+0x2fa>
  .byte  196,129,105,22,84,72,24             // vmovhpd       0x18(%r8,%r9,2),%xmm2,%xmm2
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,59                              // jb            221e <_sk_load_tables_u16_be_avx+0x2fa>
  .byte  196,129,123,16,92,72,32             // vmovsd        0x20(%r8,%r9,2),%xmm3
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  15,132,97,253,255,255               // je            1f55 <_sk_load_tables_u16_be_avx+0x31>
  .byte  196,129,97,22,92,72,40              // vmovhpd       0x28(%r8,%r9,2),%xmm3,%xmm3
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  15,130,80,253,255,255               // jb            1f55 <_sk_load_tables_u16_be_avx+0x31>
  .byte  196,1,122,126,76,72,48              // vmovq         0x30(%r8,%r9,2),%xmm9
  .byte  233,68,253,255,255                  // jmpq          1f55 <_sk_load_tables_u16_be_avx+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,55,253,255,255                  // jmpq          1f55 <_sk_load_tables_u16_be_avx+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,46,253,255,255                  // jmpq          1f55 <_sk_load_tables_u16_be_avx+0x31>

HIDDEN _sk_load_tables_rgb_u16_be_avx
.globl _sk_load_tables_rgb_u16_be_avx
FUNCTION(_sk_load_tables_rgb_u16_be_avx)
_sk_load_tables_rgb_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  76,141,12,127                       // lea           (%rdi,%rdi,2),%r9
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,93,2,0,0                     // jne           2496 <_sk_load_tables_rgb_u16_be_avx+0x26f>
  .byte  196,129,122,111,4,72                // vmovdqu       (%r8,%r9,2),%xmm0
  .byte  196,129,122,111,84,72,12            // vmovdqu       0xc(%r8,%r9,2),%xmm2
  .byte  196,129,122,111,76,72,24            // vmovdqu       0x18(%r8,%r9,2),%xmm1
  .byte  196,129,122,111,92,72,32            // vmovdqu       0x20(%r8,%r9,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,249,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm0
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,202                     // vpunpcklqdq   %xmm2,%xmm8,%xmm1
  .byte  197,185,109,210                     // vpunpckhqdq   %xmm2,%xmm8,%xmm2
  .byte  197,121,108,195                     // vpunpcklqdq   %xmm3,%xmm0,%xmm8
  .byte  197,121,111,13,67,63,0,0            // vmovdqa       0x3f43(%rip),%xmm9        # 61f0 <_sk_callback_avx+0x5c4>
  .byte  196,193,113,219,193                 // vpand         %xmm9,%xmm1,%xmm0
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,193,121,105,202                 // vpunpckhwd    %xmm10,%xmm0,%xmm1
  .byte  196,195,249,22,200,1                // vpextrq       $0x1,%xmm1,%r8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,200                 // vmovq         %xmm1,%r8
  .byte  69,137,195                          // mov           %r8d,%r11d
  .byte  77,137,198                          // mov           %r8,%r14
  .byte  73,193,238,32                       // shr           $0x20,%r14
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,223                          // mov           %ebx,%r15d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  196,195,249,22,196,1                // vpextrq       $0x1,%xmm0,%r12
  .byte  69,137,229                          // mov           %r12d,%r13d
  .byte  73,193,236,30                       // shr           $0x1e,%r12
  .byte  72,139,104,8                        // mov           0x8(%rax),%rbp
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  196,161,122,16,68,157,0             // vmovss        0x0(%rbp,%r11,4),%xmm0
  .byte  196,163,121,33,68,181,0,16          // vinsertps     $0x10,0x0(%rbp,%r14,4),%xmm0,%xmm0
  .byte  196,161,122,16,76,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm1
  .byte  196,227,121,33,193,32               // vinsertps     $0x20,%xmm1,%xmm0,%xmm0
  .byte  196,161,122,16,76,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm1
  .byte  196,227,121,33,193,48               // vinsertps     $0x30,%xmm1,%xmm0,%xmm0
  .byte  196,161,122,16,76,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm1
  .byte  196,227,113,33,76,29,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,1),%xmm1,%xmm1
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,227,113,33,203,32               // vinsertps     $0x20,%xmm3,%xmm1,%xmm1
  .byte  196,161,122,16,92,37,0              // vmovss        0x0(%rbp,%r12,1),%xmm3
  .byte  196,227,113,33,203,48               // vinsertps     $0x30,%xmm3,%xmm1,%xmm1
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  196,193,105,219,201                 // vpand         %xmm9,%xmm2,%xmm1
  .byte  196,193,113,105,210                 // vpunpckhwd    %xmm10,%xmm1,%xmm2
  .byte  196,227,249,22,213,1                // vpextrq       $0x1,%xmm2,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,211                 // vmovq         %xmm2,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,193,249,126,203                 // vmovq         %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,195,249,22,207,1                // vpextrq       $0x1,%xmm1,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,30                       // shr           $0x1e,%r15
  .byte  196,129,122,16,12,144               // vmovss        (%r8,%r10,4),%xmm1
  .byte  196,195,113,33,12,152,16            // vinsertps     $0x10,(%r8,%rbx,4),%xmm1,%xmm1
  .byte  196,129,122,16,20,136               // vmovss        (%r8,%r9,4),%xmm2
  .byte  196,227,113,33,202,32               // vinsertps     $0x20,%xmm2,%xmm1,%xmm1
  .byte  196,193,122,16,20,168               // vmovss        (%r8,%rbp,4),%xmm2
  .byte  196,227,113,33,202,48               // vinsertps     $0x30,%xmm2,%xmm1,%xmm1
  .byte  196,129,122,16,20,176               // vmovss        (%r8,%r14,4),%xmm2
  .byte  196,131,105,33,20,24,16             // vinsertps     $0x10,(%r8,%r11,1),%xmm2,%xmm2
  .byte  196,129,122,16,28,160               // vmovss        (%r8,%r12,4),%xmm3
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,129,122,16,28,56                // vmovss        (%r8,%r15,1),%xmm3
  .byte  196,227,105,33,211,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm2,%ymm1
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,193,57,219,209                  // vpand         %xmm9,%xmm8,%xmm2
  .byte  196,193,105,105,218                 // vpunpckhwd    %xmm10,%xmm2,%xmm3
  .byte  196,227,249,22,221,1                // vpextrq       $0x1,%xmm3,%rbp
  .byte  65,137,232                          // mov           %ebp,%r8d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,219                 // vmovq         %xmm3,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,225,249,126,208                 // vmovq         %xmm2,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  196,195,249,22,214,1                // vpextrq       $0x1,%xmm2,%r14
  .byte  69,137,247                          // mov           %r14d,%r15d
  .byte  73,193,238,30                       // shr           $0x1e,%r14
  .byte  196,129,122,16,20,138               // vmovss        (%r10,%r9,4),%xmm2
  .byte  196,195,105,33,20,154,16            // vinsertps     $0x10,(%r10,%rbx,4),%xmm2,%xmm2
  .byte  196,129,122,16,28,130               // vmovss        (%r10,%r8,4),%xmm3
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,193,122,16,28,170               // vmovss        (%r10,%rbp,4),%xmm3
  .byte  196,99,105,33,195,48                // vinsertps     $0x30,%xmm3,%xmm2,%xmm8
  .byte  196,129,122,16,28,154               // vmovss        (%r10,%r11,4),%xmm3
  .byte  196,195,97,33,28,2,16               // vinsertps     $0x10,(%r10,%rax,1),%xmm3,%xmm3
  .byte  196,129,122,16,20,186               // vmovss        (%r10,%r15,4),%xmm2
  .byte  196,227,97,33,210,32                // vinsertps     $0x20,%xmm2,%xmm3,%xmm2
  .byte  196,129,122,16,28,50                // vmovss        (%r10,%r14,1),%xmm3
  .byte  196,227,105,33,211,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm2
  .byte  196,195,109,24,208,1                // vinsertf128   $0x1,%xmm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,6,58,0,0          // vbroadcastss  0x3a06(%rip),%ymm3        # 5e90 <_sk_callback_avx+0x264>
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax
  .byte  196,129,121,110,4,72                // vmovd         (%r8,%r9,2),%xmm0
  .byte  196,129,121,196,68,72,4,2           // vpinsrw       $0x2,0x4(%r8,%r9,2),%xmm0,%xmm0
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  117,5                               // jne           24af <_sk_load_tables_rgb_u16_be_avx+0x288>
  .byte  233,190,253,255,255                 // jmpq          226d <_sk_load_tables_rgb_u16_be_avx+0x46>
  .byte  196,129,121,110,76,72,6             // vmovd         0x6(%r8,%r9,2),%xmm1
  .byte  196,1,113,196,68,72,10,2            // vpinsrw       $0x2,0xa(%r8,%r9,2),%xmm1,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,26                              // jb            24de <_sk_load_tables_rgb_u16_be_avx+0x2b7>
  .byte  196,129,121,110,76,72,12            // vmovd         0xc(%r8,%r9,2),%xmm1
  .byte  196,129,113,196,84,72,16,2          // vpinsrw       $0x2,0x10(%r8,%r9,2),%xmm1,%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  117,10                              // jne           24e3 <_sk_load_tables_rgb_u16_be_avx+0x2bc>
  .byte  233,143,253,255,255                 // jmpq          226d <_sk_load_tables_rgb_u16_be_avx+0x46>
  .byte  233,138,253,255,255                 // jmpq          226d <_sk_load_tables_rgb_u16_be_avx+0x46>
  .byte  196,129,121,110,76,72,18            // vmovd         0x12(%r8,%r9,2),%xmm1
  .byte  196,1,113,196,76,72,22,2            // vpinsrw       $0x2,0x16(%r8,%r9,2),%xmm1,%xmm9
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,26                              // jb            2512 <_sk_load_tables_rgb_u16_be_avx+0x2eb>
  .byte  196,129,121,110,76,72,24            // vmovd         0x18(%r8,%r9,2),%xmm1
  .byte  196,129,113,196,76,72,28,2          // vpinsrw       $0x2,0x1c(%r8,%r9,2),%xmm1,%xmm1
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  117,10                              // jne           2517 <_sk_load_tables_rgb_u16_be_avx+0x2f0>
  .byte  233,91,253,255,255                  // jmpq          226d <_sk_load_tables_rgb_u16_be_avx+0x46>
  .byte  233,86,253,255,255                  // jmpq          226d <_sk_load_tables_rgb_u16_be_avx+0x46>
  .byte  196,129,121,110,92,72,30            // vmovd         0x1e(%r8,%r9,2),%xmm3
  .byte  196,1,97,196,92,72,34,2             // vpinsrw       $0x2,0x22(%r8,%r9,2),%xmm3,%xmm11
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,20                              // jb            2540 <_sk_load_tables_rgb_u16_be_avx+0x319>
  .byte  196,129,121,110,92,72,36            // vmovd         0x24(%r8,%r9,2),%xmm3
  .byte  196,129,97,196,92,72,40,2           // vpinsrw       $0x2,0x28(%r8,%r9,2),%xmm3,%xmm3
  .byte  233,45,253,255,255                  // jmpq          226d <_sk_load_tables_rgb_u16_be_avx+0x46>
  .byte  233,40,253,255,255                  // jmpq          226d <_sk_load_tables_rgb_u16_be_avx+0x46>

HIDDEN _sk_byte_tables_avx
.globl _sk_byte_tables_avx
FUNCTION(_sk_byte_tables_avx)
_sk_byte_tables_avx:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,58,57,0,0           // vbroadcastss  0x393a(%rip),%ymm8        # 5e94 <_sk_callback_avx+0x268>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,195,249,22,192,1                // vpextrq       $0x1,%xmm0,%r8
  .byte  68,137,197                          // mov           %r8d,%ebp
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,192                 // vmovq         %xmm0,%r8
  .byte  69,137,195                          // mov           %r8d,%r11d
  .byte  77,137,199                          // mov           %r8,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,227,125,25,192,1                // vextractf128  $0x1,%ymm0,%xmm0
  .byte  196,195,249,22,192,1                // vpextrq       $0x1,%xmm0,%r8
  .byte  69,137,198                          // mov           %r8d,%r14d
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,57,1               // vpinsrb       $0x1,(%r9,%r15,1),%xmm0,%xmm0
  .byte  65,15,182,44,41                     // movzbl        (%r9,%rbp,1),%ebp
  .byte  196,227,121,32,197,2                // vpinsrb       $0x2,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,17                     // movzbl        (%r9,%r10,1),%ebp
  .byte  196,227,121,32,197,3                // vpinsrb       $0x3,%ebp,%xmm0,%xmm0
  .byte  196,98,121,49,200                   // vpmovzxbd     %xmm0,%xmm9
  .byte  196,131,121,32,4,41,0               // vpinsrb       $0x0,(%r9,%r13,1),%xmm0,%xmm0
  .byte  196,195,121,32,4,25,1               // vpinsrb       $0x1,(%r9,%rbx,1),%xmm0,%xmm0
  .byte  67,15,182,44,49                     // movzbl        (%r9,%r14,1),%ebp
  .byte  196,227,121,32,197,2                // vpinsrb       $0x2,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,33                     // movzbl        (%r9,%r12,1),%ebp
  .byte  196,227,121,32,197,3                // vpinsrb       $0x3,%ebp,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,227,53,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm9,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,136,56,0,0         // vbroadcastss  0x3888(%rip),%ymm9        # 5e98 <_sk_callback_avx+0x26c>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,227,249,22,205,1                // vpextrq       $0x1,%xmm1,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,203                 // vmovq         %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,193,249,126,207                 // vmovq         %xmm1,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,131,121,32,12,16,0              // vpinsrb       $0x0,(%r8,%r10,1),%xmm0,%xmm1
  .byte  196,195,113,32,12,24,1              // vpinsrb       $0x1,(%r8,%rbx,1),%xmm1,%xmm1
  .byte  67,15,182,28,8                      // movzbl        (%r8,%r9,1),%ebx
  .byte  196,227,113,32,203,2                // vpinsrb       $0x2,%ebx,%xmm1,%xmm1
  .byte  65,15,182,44,40                     // movzbl        (%r8,%rbp,1),%ebp
  .byte  196,227,113,32,205,3                // vpinsrb       $0x3,%ebp,%xmm1,%xmm1
  .byte  196,98,121,49,209                   // vpmovzxbd     %xmm1,%xmm10
  .byte  196,131,121,32,12,32,0              // vpinsrb       $0x0,(%r8,%r12,1),%xmm0,%xmm1
  .byte  196,131,113,32,12,56,1              // vpinsrb       $0x1,(%r8,%r15,1),%xmm1,%xmm1
  .byte  67,15,182,44,48                     // movzbl        (%r8,%r14,1),%ebp
  .byte  196,227,113,32,205,2                // vpinsrb       $0x2,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,24                     // movzbl        (%r8,%r11,1),%ebp
  .byte  196,227,113,32,205,3                // vpinsrb       $0x3,%ebp,%xmm1,%xmm1
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,227,45,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm10,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,227,249,22,213,1                // vpextrq       $0x1,%xmm2,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,211                 // vmovq         %xmm2,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,195,249,22,211,1                // vpextrq       $0x1,%xmm2,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,193,249,126,215                 // vmovq         %xmm2,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,131,121,32,20,16,0              // vpinsrb       $0x0,(%r8,%r10,1),%xmm0,%xmm2
  .byte  196,195,105,32,20,24,1              // vpinsrb       $0x1,(%r8,%rbx,1),%xmm2,%xmm2
  .byte  67,15,182,28,8                      // movzbl        (%r8,%r9,1),%ebx
  .byte  196,227,105,32,211,2                // vpinsrb       $0x2,%ebx,%xmm2,%xmm2
  .byte  65,15,182,44,40                     // movzbl        (%r8,%rbp,1),%ebp
  .byte  196,227,105,32,213,3                // vpinsrb       $0x3,%ebp,%xmm2,%xmm2
  .byte  196,98,121,49,210                   // vpmovzxbd     %xmm2,%xmm10
  .byte  196,131,121,32,20,32,0              // vpinsrb       $0x0,(%r8,%r12,1),%xmm0,%xmm2
  .byte  196,131,105,32,20,56,1              // vpinsrb       $0x1,(%r8,%r15,1),%xmm2,%xmm2
  .byte  67,15,182,44,48                     // movzbl        (%r8,%r14,1),%ebp
  .byte  196,227,105,32,213,2                // vpinsrb       $0x2,%ebp,%xmm2,%xmm2
  .byte  67,15,182,44,24                     // movzbl        (%r8,%r11,1),%ebp
  .byte  196,227,105,32,213,3                // vpinsrb       $0x3,%ebp,%xmm2,%xmm2
  .byte  196,226,121,49,210                  // vpmovzxbd     %xmm2,%xmm2
  .byte  196,227,45,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm10,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,227,249,22,221,1                // vpextrq       $0x1,%xmm3,%rbp
  .byte  65,137,232                          // mov           %ebp,%r8d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,219                 // vmovq         %xmm3,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,25,219,1                // vextractf128  $0x1,%ymm3,%xmm3
  .byte  196,195,249,22,218,1                // vpextrq       $0x1,%xmm3,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,222                 // vmovq         %xmm3,%r14
  .byte  69,137,247                          // mov           %r14d,%r15d
  .byte  73,193,238,32                       // shr           $0x20,%r14
  .byte  196,163,121,32,28,8,0               // vpinsrb       $0x0,(%rax,%r9,1),%xmm0,%xmm3
  .byte  196,227,97,32,28,24,1               // vpinsrb       $0x1,(%rax,%rbx,1),%xmm3,%xmm3
  .byte  66,15,182,28,0                      // movzbl        (%rax,%r8,1),%ebx
  .byte  196,227,97,32,219,2                 // vpinsrb       $0x2,%ebx,%xmm3,%xmm3
  .byte  15,182,44,40                        // movzbl        (%rax,%rbp,1),%ebp
  .byte  196,227,97,32,221,3                 // vpinsrb       $0x3,%ebp,%xmm3,%xmm3
  .byte  196,98,121,49,195                   // vpmovzxbd     %xmm3,%xmm8
  .byte  196,163,121,32,28,56,0              // vpinsrb       $0x0,(%rax,%r15,1),%xmm0,%xmm3
  .byte  196,163,97,32,28,48,1               // vpinsrb       $0x1,(%rax,%r14,1),%xmm3,%xmm3
  .byte  66,15,182,44,24                     // movzbl        (%rax,%r11,1),%ebp
  .byte  196,227,97,32,221,2                 // vpinsrb       $0x2,%ebp,%xmm3,%xmm3
  .byte  66,15,182,4,16                      // movzbl        (%rax,%r10,1),%eax
  .byte  196,227,97,32,216,3                 // vpinsrb       $0x3,%eax,%xmm3,%xmm3
  .byte  196,226,121,49,219                  // vpmovzxbd     %xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_avx
.globl _sk_byte_tables_rgb_avx
FUNCTION(_sk_byte_tables_rgb_avx)
_sk_byte_tables_rgb_avx:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,64,24                        // mov           0x18(%rax),%r8d
  .byte  65,255,200                          // dec           %r8d
  .byte  196,65,121,110,192                  // vmovd         %r8d,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,195,249,22,192,1                // vpextrq       $0x1,%xmm0,%r8
  .byte  68,137,197                          // mov           %r8d,%ebp
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,192                 // vmovq         %xmm0,%r8
  .byte  69,137,195                          // mov           %r8d,%r11d
  .byte  77,137,199                          // mov           %r8,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,227,125,25,192,1                // vextractf128  $0x1,%ymm0,%xmm0
  .byte  196,195,249,22,192,1                // vpextrq       $0x1,%xmm0,%r8
  .byte  69,137,198                          // mov           %r8d,%r14d
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,57,1               // vpinsrb       $0x1,(%r9,%r15,1),%xmm0,%xmm0
  .byte  65,15,182,44,41                     // movzbl        (%r9,%rbp,1),%ebp
  .byte  196,227,121,32,197,2                // vpinsrb       $0x2,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,17                     // movzbl        (%r9,%r10,1),%ebp
  .byte  196,227,121,32,197,3                // vpinsrb       $0x3,%ebp,%xmm0,%xmm0
  .byte  196,98,121,49,200                   // vpmovzxbd     %xmm0,%xmm9
  .byte  196,131,121,32,4,41,0               // vpinsrb       $0x0,(%r9,%r13,1),%xmm0,%xmm0
  .byte  196,195,121,32,4,25,1               // vpinsrb       $0x1,(%r9,%rbx,1),%xmm0,%xmm0
  .byte  67,15,182,44,49                     // movzbl        (%r9,%r14,1),%ebp
  .byte  196,227,121,32,197,2                // vpinsrb       $0x2,%ebp,%xmm0,%xmm0
  .byte  67,15,182,44,33                     // movzbl        (%r9,%r12,1),%ebp
  .byte  196,227,121,32,197,3                // vpinsrb       $0x3,%ebp,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,227,53,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm9,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,174,53,0,0         // vbroadcastss  0x35ae(%rip),%ymm9        # 5e9c <_sk_callback_avx+0x270>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,227,249,22,205,1                // vpextrq       $0x1,%xmm1,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,203                 // vmovq         %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,193,249,126,207                 // vmovq         %xmm1,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,131,121,32,12,16,0              // vpinsrb       $0x0,(%r8,%r10,1),%xmm0,%xmm1
  .byte  196,195,113,32,12,24,1              // vpinsrb       $0x1,(%r8,%rbx,1),%xmm1,%xmm1
  .byte  67,15,182,28,8                      // movzbl        (%r8,%r9,1),%ebx
  .byte  196,227,113,32,203,2                // vpinsrb       $0x2,%ebx,%xmm1,%xmm1
  .byte  65,15,182,44,40                     // movzbl        (%r8,%rbp,1),%ebp
  .byte  196,227,113,32,205,3                // vpinsrb       $0x3,%ebp,%xmm1,%xmm1
  .byte  196,98,121,49,209                   // vpmovzxbd     %xmm1,%xmm10
  .byte  196,131,121,32,12,32,0              // vpinsrb       $0x0,(%r8,%r12,1),%xmm0,%xmm1
  .byte  196,131,113,32,12,56,1              // vpinsrb       $0x1,(%r8,%r15,1),%xmm1,%xmm1
  .byte  67,15,182,44,48                     // movzbl        (%r8,%r14,1),%ebp
  .byte  196,227,113,32,205,2                // vpinsrb       $0x2,%ebp,%xmm1,%xmm1
  .byte  67,15,182,44,24                     // movzbl        (%r8,%r11,1),%ebp
  .byte  196,227,113,32,205,3                // vpinsrb       $0x3,%ebp,%xmm1,%xmm1
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,227,45,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm10,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  72,139,64,16                        // mov           0x10(%rax),%rax
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,227,249,22,213,1                // vpextrq       $0x1,%xmm2,%rbp
  .byte  65,137,232                          // mov           %ebp,%r8d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  196,225,249,126,211                 // vmovq         %xmm2,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,195,249,22,210,1                // vpextrq       $0x1,%xmm2,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,193,249,126,214                 // vmovq         %xmm2,%r14
  .byte  69,137,247                          // mov           %r14d,%r15d
  .byte  73,193,238,32                       // shr           $0x20,%r14
  .byte  196,163,121,32,20,8,0               // vpinsrb       $0x0,(%rax,%r9,1),%xmm0,%xmm2
  .byte  196,227,105,32,20,24,1              // vpinsrb       $0x1,(%rax,%rbx,1),%xmm2,%xmm2
  .byte  66,15,182,28,0                      // movzbl        (%rax,%r8,1),%ebx
  .byte  196,227,105,32,211,2                // vpinsrb       $0x2,%ebx,%xmm2,%xmm2
  .byte  15,182,44,40                        // movzbl        (%rax,%rbp,1),%ebp
  .byte  196,227,105,32,213,3                // vpinsrb       $0x3,%ebp,%xmm2,%xmm2
  .byte  196,98,121,49,194                   // vpmovzxbd     %xmm2,%xmm8
  .byte  196,163,121,32,20,56,0              // vpinsrb       $0x0,(%rax,%r15,1),%xmm0,%xmm2
  .byte  196,163,105,32,20,48,1              // vpinsrb       $0x1,(%rax,%r14,1),%xmm2,%xmm2
  .byte  66,15,182,44,24                     // movzbl        (%rax,%r11,1),%ebp
  .byte  196,227,105,32,213,2                // vpinsrb       $0x2,%ebp,%xmm2,%xmm2
  .byte  66,15,182,4,16                      // movzbl        (%rax,%r10,1),%eax
  .byte  196,227,105,32,208,3                // vpinsrb       $0x3,%eax,%xmm2,%xmm2
  .byte  196,226,121,49,210                  // vpmovzxbd     %xmm2,%xmm2
  .byte  196,227,61,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm8,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_avx
.globl _sk_table_r_avx
FUNCTION(_sk_table_r_avx)
_sk_table_r_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,227,125,25,192,1                // vextractf128  $0x1,%ymm0,%xmm0
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,199                 // vmovq         %xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,129,122,16,4,160                // vmovss        (%r8,%r12,4),%xmm0
  .byte  196,3,121,33,4,184,16               // vinsertps     $0x10,(%r8,%r15,4),%xmm0,%xmm8
  .byte  196,129,122,16,4,176                // vmovss        (%r8,%r14,4),%xmm0
  .byte  196,99,57,33,192,32                 // vinsertps     $0x20,%xmm0,%xmm8,%xmm8
  .byte  196,193,122,16,4,152                // vmovss        (%r8,%rbx,4),%xmm0
  .byte  196,99,57,33,192,48                 // vinsertps     $0x30,%xmm0,%xmm8,%xmm8
  .byte  196,129,122,16,4,152                // vmovss        (%r8,%r11,4),%xmm0
  .byte  196,3,121,33,12,144,16              // vinsertps     $0x10,(%r8,%r10,4),%xmm0,%xmm9
  .byte  196,129,122,16,4,136                // vmovss        (%r8,%r9,4),%xmm0
  .byte  196,99,49,33,200,32                 // vinsertps     $0x20,%xmm0,%xmm9,%xmm9
  .byte  196,193,122,16,4,128                // vmovss        (%r8,%rax,4),%xmm0
  .byte  196,227,49,33,192,48                // vinsertps     $0x30,%xmm0,%xmm9,%xmm0
  .byte  196,195,125,24,192,1                // vinsertf128   $0x1,%xmm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_avx
.globl _sk_table_g_avx
FUNCTION(_sk_table_g_avx)
_sk_table_g_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,227,249,22,200,1                // vpextrq       $0x1,%xmm1,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,227,249,22,203,1                // vpextrq       $0x1,%xmm1,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,207                 // vmovq         %xmm1,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,129,122,16,12,160               // vmovss        (%r8,%r12,4),%xmm1
  .byte  196,3,113,33,4,184,16               // vinsertps     $0x10,(%r8,%r15,4),%xmm1,%xmm8
  .byte  196,129,122,16,12,176               // vmovss        (%r8,%r14,4),%xmm1
  .byte  196,99,57,33,193,32                 // vinsertps     $0x20,%xmm1,%xmm8,%xmm8
  .byte  196,193,122,16,12,152               // vmovss        (%r8,%rbx,4),%xmm1
  .byte  196,99,57,33,193,48                 // vinsertps     $0x30,%xmm1,%xmm8,%xmm8
  .byte  196,129,122,16,12,152               // vmovss        (%r8,%r11,4),%xmm1
  .byte  196,3,113,33,12,144,16              // vinsertps     $0x10,(%r8,%r10,4),%xmm1,%xmm9
  .byte  196,129,122,16,12,136               // vmovss        (%r8,%r9,4),%xmm1
  .byte  196,99,49,33,201,32                 // vinsertps     $0x20,%xmm1,%xmm9,%xmm9
  .byte  196,193,122,16,12,128               // vmovss        (%r8,%rax,4),%xmm1
  .byte  196,227,49,33,201,48                // vinsertps     $0x30,%xmm1,%xmm9,%xmm1
  .byte  196,195,117,24,200,1                // vinsertf128   $0x1,%xmm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_avx
.globl _sk_table_b_avx
FUNCTION(_sk_table_b_avx)
_sk_table_b_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,210                 // vmovq         %xmm2,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,227,249,22,211,1                // vpextrq       $0x1,%xmm2,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,215                 // vmovq         %xmm2,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,129,122,16,20,160               // vmovss        (%r8,%r12,4),%xmm2
  .byte  196,3,105,33,4,184,16               // vinsertps     $0x10,(%r8,%r15,4),%xmm2,%xmm8
  .byte  196,129,122,16,20,176               // vmovss        (%r8,%r14,4),%xmm2
  .byte  196,99,57,33,194,32                 // vinsertps     $0x20,%xmm2,%xmm8,%xmm8
  .byte  196,193,122,16,20,152               // vmovss        (%r8,%rbx,4),%xmm2
  .byte  196,99,57,33,194,48                 // vinsertps     $0x30,%xmm2,%xmm8,%xmm8
  .byte  196,129,122,16,20,152               // vmovss        (%r8,%r11,4),%xmm2
  .byte  196,3,105,33,12,144,16              // vinsertps     $0x10,(%r8,%r10,4),%xmm2,%xmm9
  .byte  196,129,122,16,20,136               // vmovss        (%r8,%r9,4),%xmm2
  .byte  196,99,49,33,202,32                 // vinsertps     $0x20,%xmm2,%xmm9,%xmm9
  .byte  196,193,122,16,20,128               // vmovss        (%r8,%rax,4),%xmm2
  .byte  196,227,49,33,210,48                // vinsertps     $0x30,%xmm2,%xmm9,%xmm2
  .byte  196,195,109,24,208,1                // vinsertf128   $0x1,%xmm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_avx
.globl _sk_table_a_avx
FUNCTION(_sk_table_a_avx)
_sk_table_a_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,227,249,22,216,1                // vpextrq       $0x1,%xmm3,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,218                 // vmovq         %xmm3,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,227,125,25,219,1                // vextractf128  $0x1,%ymm3,%xmm3
  .byte  196,227,249,22,219,1                // vpextrq       $0x1,%xmm3,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,249,126,223                 // vmovq         %xmm3,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,129,122,16,28,160               // vmovss        (%r8,%r12,4),%xmm3
  .byte  196,3,97,33,4,184,16                // vinsertps     $0x10,(%r8,%r15,4),%xmm3,%xmm8
  .byte  196,129,122,16,28,176               // vmovss        (%r8,%r14,4),%xmm3
  .byte  196,99,57,33,195,32                 // vinsertps     $0x20,%xmm3,%xmm8,%xmm8
  .byte  196,193,122,16,28,152               // vmovss        (%r8,%rbx,4),%xmm3
  .byte  196,99,57,33,195,48                 // vinsertps     $0x30,%xmm3,%xmm8,%xmm8
  .byte  196,129,122,16,28,152               // vmovss        (%r8,%r11,4),%xmm3
  .byte  196,3,97,33,12,144,16               // vinsertps     $0x10,(%r8,%r10,4),%xmm3,%xmm9
  .byte  196,129,122,16,28,136               // vmovss        (%r8,%r9,4),%xmm3
  .byte  196,99,49,33,203,32                 // vinsertps     $0x20,%xmm3,%xmm9,%xmm9
  .byte  196,193,122,16,28,128               // vmovss        (%r8,%rax,4),%xmm3
  .byte  196,227,49,33,219,48                // vinsertps     $0x30,%xmm3,%xmm9,%xmm3
  .byte  196,195,101,24,216,1                // vinsertf128   $0x1,%xmm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_avx
.globl _sk_parametric_r_avx
FUNCTION(_sk_parametric_r_avx)
_sk_parametric_r_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,124,194,192,2                // vcmpleps      %ymm8,%ymm0,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,216                      // vcvtdq2ps     %ymm0,%ymm11
  .byte  196,98,125,24,37,12,49,0,0          // vbroadcastss  0x310c(%rip),%ymm12        # 5ea0 <_sk_callback_avx+0x274>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,2,49,0,0           // vbroadcastss  0x3102(%rip),%ymm12        # 5ea4 <_sk_callback_avx+0x278>
  .byte  196,193,124,84,196                  // vandps        %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,248,48,0,0         // vbroadcastss  0x30f8(%rip),%ymm12        # 5ea8 <_sk_callback_avx+0x27c>
  .byte  196,193,124,86,196                  // vorps         %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,238,48,0,0         // vbroadcastss  0x30ee(%rip),%ymm12        # 5eac <_sk_callback_avx+0x280>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,228,48,0,0         // vbroadcastss  0x30e4(%rip),%ymm12        # 5eb0 <_sk_callback_avx+0x284>
  .byte  196,65,124,89,228                   // vmulps        %ymm12,%ymm0,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,213,48,0,0         // vbroadcastss  0x30d5(%rip),%ymm12        # 5eb4 <_sk_callback_avx+0x288>
  .byte  196,193,124,88,196                  // vaddps        %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,203,48,0,0         // vbroadcastss  0x30cb(%rip),%ymm12        # 5eb8 <_sk_callback_avx+0x28c>
  .byte  197,156,94,192                      // vdivps        %ymm0,%ymm12,%ymm0
  .byte  197,164,92,192                      // vsubps        %ymm0,%ymm11,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,99,125,8,208,1                  // vroundps      $0x1,%ymm0,%ymm10
  .byte  196,65,124,92,210                   // vsubps        %ymm10,%ymm0,%ymm10
  .byte  196,98,125,24,29,175,48,0,0         // vbroadcastss  0x30af(%rip),%ymm11        # 5ebc <_sk_callback_avx+0x290>
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,165,48,0,0         // vbroadcastss  0x30a5(%rip),%ymm11        # 5ec0 <_sk_callback_avx+0x294>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,124,92,195                  // vsubps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,150,48,0,0         // vbroadcastss  0x3096(%rip),%ymm11        # 5ec4 <_sk_callback_avx+0x298>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,140,48,0,0         // vbroadcastss  0x308c(%rip),%ymm11        # 5ec8 <_sk_callback_avx+0x29c>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,98,125,24,21,125,48,0,0         // vbroadcastss  0x307d(%rip),%ymm10        # 5ecc <_sk_callback_avx+0x2a0>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,195,125,74,193,128              // vblendvps     %ymm8,%ymm9,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,84,48,0,0           // vbroadcastss  0x3054(%rip),%ymm8        # 5ed0 <_sk_callback_avx+0x2a4>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_avx
.globl _sk_parametric_g_avx
FUNCTION(_sk_parametric_g_avx)
_sk_parametric_g_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,116,194,192,2                // vcmpleps      %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,217                      // vcvtdq2ps     %ymm1,%ymm11
  .byte  196,98,125,24,37,5,48,0,0           // vbroadcastss  0x3005(%rip),%ymm12        # 5ed4 <_sk_callback_avx+0x2a8>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,251,47,0,0         // vbroadcastss  0x2ffb(%rip),%ymm12        # 5ed8 <_sk_callback_avx+0x2ac>
  .byte  196,193,116,84,204                  // vandps        %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,241,47,0,0         // vbroadcastss  0x2ff1(%rip),%ymm12        # 5edc <_sk_callback_avx+0x2b0>
  .byte  196,193,116,86,204                  // vorps         %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,231,47,0,0         // vbroadcastss  0x2fe7(%rip),%ymm12        # 5ee0 <_sk_callback_avx+0x2b4>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,221,47,0,0         // vbroadcastss  0x2fdd(%rip),%ymm12        # 5ee4 <_sk_callback_avx+0x2b8>
  .byte  196,65,116,89,228                   // vmulps        %ymm12,%ymm1,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,206,47,0,0         // vbroadcastss  0x2fce(%rip),%ymm12        # 5ee8 <_sk_callback_avx+0x2bc>
  .byte  196,193,116,88,204                  // vaddps        %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,196,47,0,0         // vbroadcastss  0x2fc4(%rip),%ymm12        # 5eec <_sk_callback_avx+0x2c0>
  .byte  197,156,94,201                      // vdivps        %ymm1,%ymm12,%ymm1
  .byte  197,164,92,201                      // vsubps        %ymm1,%ymm11,%ymm1
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,99,125,8,209,1                  // vroundps      $0x1,%ymm1,%ymm10
  .byte  196,65,116,92,210                   // vsubps        %ymm10,%ymm1,%ymm10
  .byte  196,98,125,24,29,168,47,0,0         // vbroadcastss  0x2fa8(%rip),%ymm11        # 5ef0 <_sk_callback_avx+0x2c4>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,158,47,0,0         // vbroadcastss  0x2f9e(%rip),%ymm11        # 5ef4 <_sk_callback_avx+0x2c8>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,116,92,203                  // vsubps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,143,47,0,0         // vbroadcastss  0x2f8f(%rip),%ymm11        # 5ef8 <_sk_callback_avx+0x2cc>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,133,47,0,0         // vbroadcastss  0x2f85(%rip),%ymm11        # 5efc <_sk_callback_avx+0x2d0>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,98,125,24,21,118,47,0,0         // vbroadcastss  0x2f76(%rip),%ymm10        # 5f00 <_sk_callback_avx+0x2d4>
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,195,117,74,201,128              // vblendvps     %ymm8,%ymm9,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,5,77,47,0,0           // vbroadcastss  0x2f4d(%rip),%ymm8        # 5f04 <_sk_callback_avx+0x2d8>
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_avx
.globl _sk_parametric_b_avx
FUNCTION(_sk_parametric_b_avx)
_sk_parametric_b_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,108,194,192,2                // vcmpleps      %ymm8,%ymm2,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,218                      // vcvtdq2ps     %ymm2,%ymm11
  .byte  196,98,125,24,37,254,46,0,0         // vbroadcastss  0x2efe(%rip),%ymm12        # 5f08 <_sk_callback_avx+0x2dc>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,244,46,0,0         // vbroadcastss  0x2ef4(%rip),%ymm12        # 5f0c <_sk_callback_avx+0x2e0>
  .byte  196,193,108,84,212                  // vandps        %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,234,46,0,0         // vbroadcastss  0x2eea(%rip),%ymm12        # 5f10 <_sk_callback_avx+0x2e4>
  .byte  196,193,108,86,212                  // vorps         %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,224,46,0,0         // vbroadcastss  0x2ee0(%rip),%ymm12        # 5f14 <_sk_callback_avx+0x2e8>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,214,46,0,0         // vbroadcastss  0x2ed6(%rip),%ymm12        # 5f18 <_sk_callback_avx+0x2ec>
  .byte  196,65,108,89,228                   // vmulps        %ymm12,%ymm2,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,199,46,0,0         // vbroadcastss  0x2ec7(%rip),%ymm12        # 5f1c <_sk_callback_avx+0x2f0>
  .byte  196,193,108,88,212                  // vaddps        %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,189,46,0,0         // vbroadcastss  0x2ebd(%rip),%ymm12        # 5f20 <_sk_callback_avx+0x2f4>
  .byte  197,156,94,210                      // vdivps        %ymm2,%ymm12,%ymm2
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  196,99,125,8,210,1                  // vroundps      $0x1,%ymm2,%ymm10
  .byte  196,65,108,92,210                   // vsubps        %ymm10,%ymm2,%ymm10
  .byte  196,98,125,24,29,161,46,0,0         // vbroadcastss  0x2ea1(%rip),%ymm11        # 5f24 <_sk_callback_avx+0x2f8>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,151,46,0,0         // vbroadcastss  0x2e97(%rip),%ymm11        # 5f28 <_sk_callback_avx+0x2fc>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,108,92,211                  // vsubps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,136,46,0,0         // vbroadcastss  0x2e88(%rip),%ymm11        # 5f2c <_sk_callback_avx+0x300>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,126,46,0,0         // vbroadcastss  0x2e7e(%rip),%ymm11        # 5f30 <_sk_callback_avx+0x304>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,98,125,24,21,111,46,0,0         // vbroadcastss  0x2e6f(%rip),%ymm10        # 5f34 <_sk_callback_avx+0x308>
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,195,109,74,209,128              // vblendvps     %ymm8,%ymm9,%ymm2,%ymm2
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,70,46,0,0           // vbroadcastss  0x2e46(%rip),%ymm8        # 5f38 <_sk_callback_avx+0x30c>
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_avx
.globl _sk_parametric_a_avx
FUNCTION(_sk_parametric_a_avx)
_sk_parametric_a_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,100,194,192,2                // vcmpleps      %ymm8,%ymm3,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,219                      // vmulps        %ymm3,%ymm10,%ymm3
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,219                      // vcvtdq2ps     %ymm3,%ymm11
  .byte  196,98,125,24,37,247,45,0,0         // vbroadcastss  0x2df7(%rip),%ymm12        # 5f3c <_sk_callback_avx+0x310>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,237,45,0,0         // vbroadcastss  0x2ded(%rip),%ymm12        # 5f40 <_sk_callback_avx+0x314>
  .byte  196,193,100,84,220                  // vandps        %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,227,45,0,0         // vbroadcastss  0x2de3(%rip),%ymm12        # 5f44 <_sk_callback_avx+0x318>
  .byte  196,193,100,86,220                  // vorps         %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,217,45,0,0         // vbroadcastss  0x2dd9(%rip),%ymm12        # 5f48 <_sk_callback_avx+0x31c>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,207,45,0,0         // vbroadcastss  0x2dcf(%rip),%ymm12        # 5f4c <_sk_callback_avx+0x320>
  .byte  196,65,100,89,228                   // vmulps        %ymm12,%ymm3,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,192,45,0,0         // vbroadcastss  0x2dc0(%rip),%ymm12        # 5f50 <_sk_callback_avx+0x324>
  .byte  196,193,100,88,220                  // vaddps        %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,182,45,0,0         // vbroadcastss  0x2db6(%rip),%ymm12        # 5f54 <_sk_callback_avx+0x328>
  .byte  197,156,94,219                      // vdivps        %ymm3,%ymm12,%ymm3
  .byte  197,164,92,219                      // vsubps        %ymm3,%ymm11,%ymm3
  .byte  197,172,89,219                      // vmulps        %ymm3,%ymm10,%ymm3
  .byte  196,99,125,8,211,1                  // vroundps      $0x1,%ymm3,%ymm10
  .byte  196,65,100,92,210                   // vsubps        %ymm10,%ymm3,%ymm10
  .byte  196,98,125,24,29,154,45,0,0         // vbroadcastss  0x2d9a(%rip),%ymm11        # 5f58 <_sk_callback_avx+0x32c>
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,144,45,0,0         // vbroadcastss  0x2d90(%rip),%ymm11        # 5f5c <_sk_callback_avx+0x330>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,100,92,219                  // vsubps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,129,45,0,0         // vbroadcastss  0x2d81(%rip),%ymm11        # 5f60 <_sk_callback_avx+0x334>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,119,45,0,0         // vbroadcastss  0x2d77(%rip),%ymm11        # 5f64 <_sk_callback_avx+0x338>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,98,125,24,21,104,45,0,0         // vbroadcastss  0x2d68(%rip),%ymm10        # 5f68 <_sk_callback_avx+0x33c>
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,195,101,74,217,128              // vblendvps     %ymm8,%ymm9,%ymm3,%ymm3
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  196,98,125,24,5,63,45,0,0           // vbroadcastss  0x2d3f(%rip),%ymm8        # 5f6c <_sk_callback_avx+0x340>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_avx
.globl _sk_lab_to_xyz_avx
FUNCTION(_sk_lab_to_xyz_avx)
_sk_lab_to_xyz_avx:
  .byte  196,98,125,24,5,49,45,0,0           // vbroadcastss  0x2d31(%rip),%ymm8        # 5f70 <_sk_callback_avx+0x344>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,39,45,0,0           // vbroadcastss  0x2d27(%rip),%ymm8        # 5f74 <_sk_callback_avx+0x348>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,13,29,45,0,0          // vbroadcastss  0x2d1d(%rip),%ymm9        # 5f78 <_sk_callback_avx+0x34c>
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  196,98,125,24,5,9,45,0,0            // vbroadcastss  0x2d09(%rip),%ymm8        # 5f7c <_sk_callback_avx+0x350>
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,255,44,0,0          // vbroadcastss  0x2cff(%rip),%ymm8        # 5f80 <_sk_callback_avx+0x354>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,245,44,0,0          // vbroadcastss  0x2cf5(%rip),%ymm8        # 5f84 <_sk_callback_avx+0x358>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,252,88,201                      // vaddps        %ymm1,%ymm0,%ymm1
  .byte  196,98,125,24,5,231,44,0,0          // vbroadcastss  0x2ce7(%rip),%ymm8        # 5f88 <_sk_callback_avx+0x35c>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,252,92,210                      // vsubps        %ymm2,%ymm0,%ymm2
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,65,116,89,192                   // vmulps        %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,13,208,44,0,0         // vbroadcastss  0x2cd0(%rip),%ymm9        # 5f8c <_sk_callback_avx+0x360>
  .byte  196,65,52,194,208,1                 // vcmpltps      %ymm8,%ymm9,%ymm10
  .byte  196,98,125,24,29,197,44,0,0         // vbroadcastss  0x2cc5(%rip),%ymm11        # 5f90 <_sk_callback_avx+0x364>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,37,187,44,0,0         // vbroadcastss  0x2cbb(%rip),%ymm12        # 5f94 <_sk_callback_avx+0x368>
  .byte  196,193,116,89,204                  // vmulps        %ymm12,%ymm1,%ymm1
  .byte  196,67,117,74,192,160               // vblendvps     %ymm10,%ymm8,%ymm1,%ymm8
  .byte  197,252,89,200                      // vmulps        %ymm0,%ymm0,%ymm1
  .byte  197,252,89,201                      // vmulps        %ymm1,%ymm0,%ymm1
  .byte  197,52,194,209,1                    // vcmpltps      %ymm1,%ymm9,%ymm10
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,193,124,89,196                  // vmulps        %ymm12,%ymm0,%ymm0
  .byte  196,227,125,74,201,160              // vblendvps     %ymm10,%ymm1,%ymm0,%ymm1
  .byte  197,236,89,194                      // vmulps        %ymm2,%ymm2,%ymm0
  .byte  197,236,89,192                      // vmulps        %ymm0,%ymm2,%ymm0
  .byte  197,52,194,200,1                    // vcmpltps      %ymm0,%ymm9,%ymm9
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,193,108,89,212                  // vmulps        %ymm12,%ymm2,%ymm2
  .byte  196,227,109,74,208,144              // vblendvps     %ymm9,%ymm0,%ymm2,%ymm2
  .byte  196,226,125,24,5,113,44,0,0         // vbroadcastss  0x2c71(%rip),%ymm0        # 5f98 <_sk_callback_avx+0x36c>
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,104,44,0,0          // vbroadcastss  0x2c68(%rip),%ymm8        # 5f9c <_sk_callback_avx+0x370>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_avx
.globl _sk_load_a8_avx
FUNCTION(_sk_load_a8_avx)
_sk_load_a8_avx:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,1,248                            // add           %rdi,%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,62                              // jne           338b <_sk_load_a8_avx+0x4e>
  .byte  197,250,126,0                       // vmovq         (%rax),%xmm0
  .byte  196,226,121,49,200                  // vpmovzxbd     %xmm0,%xmm1
  .byte  196,227,121,4,192,229               // vpermilps     $0xe5,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,44,44,0,0         // vbroadcastss  0x2c2c(%rip),%ymm1        # 5fa0 <_sk_callback_avx+0x374>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  49,201                              // xor           %ecx,%ecx
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  69,49,201                           // xor           %r9d,%r9d
  .byte  68,15,182,24                        // movzbl        (%rax),%r11d
  .byte  72,255,192                          // inc           %rax
  .byte  73,211,227                          // shl           %cl,%r11
  .byte  77,9,217                            // or            %r11,%r9
  .byte  72,131,193,8                        // add           $0x8,%rcx
  .byte  73,255,202                          // dec           %r10
  .byte  117,234                             // jne           3393 <_sk_load_a8_avx+0x56>
  .byte  196,193,249,110,193                 // vmovq         %r9,%xmm0
  .byte  235,161                             // jmp           3351 <_sk_load_a8_avx+0x14>

HIDDEN _sk_gather_a8_avx
.globl _sk_gather_a8_avx
FUNCTION(_sk_gather_a8_avx)
_sk_gather_a8_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,209                      // vcvttps2dq    %ymm1,%ymm2
  .byte  197,249,110,72,16                   // vmovd         0x10(%rax),%xmm1
  .byte  197,249,112,217,0                   // vpshufd       $0x0,%xmm1,%xmm3
  .byte  196,226,97,64,202                   // vpmulld       %xmm2,%xmm3,%xmm1
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,226,97,64,210                   // vpmulld       %xmm2,%xmm3,%xmm2
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,195,1                // vextractf128  $0x1,%ymm0,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,210                 // vmovq         %xmm2,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  196,195,249,22,199,1                // vpextrq       $0x1,%xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,131,121,32,4,48,0               // vpinsrb       $0x0,(%r8,%r14,1),%xmm0,%xmm0
  .byte  196,195,121,32,4,24,1               // vpinsrb       $0x1,(%r8,%rbx,1),%xmm0,%xmm0
  .byte  67,15,182,28,32                     // movzbl        (%r8,%r12,1),%ebx
  .byte  196,227,121,32,195,2                // vpinsrb       $0x2,%ebx,%xmm0,%xmm0
  .byte  67,15,182,28,56                     // movzbl        (%r8,%r15,1),%ebx
  .byte  196,227,121,32,195,3                // vpinsrb       $0x3,%ebx,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,131,121,32,12,24,0              // vpinsrb       $0x0,(%r8,%r11,1),%xmm0,%xmm1
  .byte  196,131,113,32,12,16,1              // vpinsrb       $0x1,(%r8,%r10,1),%xmm1,%xmm1
  .byte  67,15,182,28,8                      // movzbl        (%r8,%r9,1),%ebx
  .byte  196,227,113,32,203,2                // vpinsrb       $0x2,%ebx,%xmm1,%xmm1
  .byte  65,15,182,4,0                       // movzbl        (%r8,%rax,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,33,43,0,0         // vbroadcastss  0x2b21(%rip),%ymm1        # 5fa4 <_sk_callback_avx+0x378>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_avx
.globl _sk_store_a8_avx
FUNCTION(_sk_store_a8_avx)
_sk_store_a8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  196,98,125,24,5,252,42,0,0          // vbroadcastss  0x2afc(%rip),%ymm8        # 5fa8 <_sk_callback_avx+0x37c>
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  196,65,57,103,192                   // vpackuswb     %xmm8,%xmm8,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,10                              // jne           34d5 <_sk_store_a8_avx+0x37>
  .byte  196,65,123,17,4,58                  // vmovsd        %xmm8,(%r10,%rdi,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  119,236                             // ja            34d1 <_sk_store_a8_avx+0x33>
  .byte  196,66,121,48,192                   // vpmovzxbw     %xmm8,%xmm8
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,67,0,0,0                  // lea           0x43(%rip),%r9        # 3538 <_sk_store_a8_avx+0x9a>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,20,68,58,6,12            // vpextrb       $0xc,%xmm8,0x6(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,5,10            // vpextrb       $0xa,%xmm8,0x5(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,4,8             // vpextrb       $0x8,%xmm8,0x4(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,3,6             // vpextrb       $0x6,%xmm8,0x3(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,2,4             // vpextrb       $0x4,%xmm8,0x2(%r10,%rdi,1)
  .byte  196,67,121,20,68,58,1,2             // vpextrb       $0x2,%xmm8,0x1(%r10,%rdi,1)
  .byte  196,67,121,20,4,58,0                // vpextrb       $0x0,%xmm8,(%r10,%rdi,1)
  .byte  235,154                             // jmp           34d1 <_sk_store_a8_avx+0x33>
  .byte  144                                 // nop
  .byte  246,255                             // idiv          %bh
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,206                             // dec           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,198                             // inc           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_avx
.globl _sk_load_g8_avx
FUNCTION(_sk_load_g8_avx)
_sk_load_g8_avx:
  .byte  73,137,200                          // mov           %rcx,%r8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,1,248                            // add           %rdi,%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,67                              // jne           35a7 <_sk_load_g8_avx+0x53>
  .byte  197,250,126,0                       // vmovq         (%rax),%xmm0
  .byte  196,226,121,49,200                  // vpmovzxbd     %xmm0,%xmm1
  .byte  196,227,121,4,192,229               // vpermilps     $0xe5,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,33,42,0,0         // vbroadcastss  0x2a21(%rip),%ymm1        # 5fac <_sk_callback_avx+0x380>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,22,42,0,0         // vbroadcastss  0x2a16(%rip),%ymm3        # 5fb0 <_sk_callback_avx+0x384>
  .byte  76,137,193                          // mov           %r8,%rcx
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  49,201                              // xor           %ecx,%ecx
  .byte  77,137,194                          // mov           %r8,%r10
  .byte  69,49,201                           // xor           %r9d,%r9d
  .byte  68,15,182,24                        // movzbl        (%rax),%r11d
  .byte  72,255,192                          // inc           %rax
  .byte  73,211,227                          // shl           %cl,%r11
  .byte  77,9,217                            // or            %r11,%r9
  .byte  72,131,193,8                        // add           $0x8,%rcx
  .byte  73,255,202                          // dec           %r10
  .byte  117,234                             // jne           35af <_sk_load_g8_avx+0x5b>
  .byte  196,193,249,110,193                 // vmovq         %r9,%xmm0
  .byte  235,156                             // jmp           3568 <_sk_load_g8_avx+0x14>

HIDDEN _sk_gather_g8_avx
.globl _sk_gather_g8_avx
FUNCTION(_sk_gather_g8_avx)
_sk_gather_g8_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,209                      // vcvttps2dq    %ymm1,%ymm2
  .byte  197,249,110,72,16                   // vmovd         0x10(%rax),%xmm1
  .byte  197,249,112,217,0                   // vpshufd       $0x0,%xmm1,%xmm3
  .byte  196,226,97,64,202                   // vpmulld       %xmm2,%xmm3,%xmm1
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,226,97,64,210                   // vpmulld       %xmm2,%xmm3,%xmm2
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,195,1                // vextractf128  $0x1,%ymm0,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,210                 // vmovq         %xmm2,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  196,195,249,22,199,1                // vpextrq       $0x1,%xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,131,121,32,4,48,0               // vpinsrb       $0x0,(%r8,%r14,1),%xmm0,%xmm0
  .byte  196,195,121,32,4,24,1               // vpinsrb       $0x1,(%r8,%rbx,1),%xmm0,%xmm0
  .byte  67,15,182,28,32                     // movzbl        (%r8,%r12,1),%ebx
  .byte  196,227,121,32,195,2                // vpinsrb       $0x2,%ebx,%xmm0,%xmm0
  .byte  67,15,182,28,56                     // movzbl        (%r8,%r15,1),%ebx
  .byte  196,227,121,32,195,3                // vpinsrb       $0x3,%ebx,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,131,121,32,12,24,0              // vpinsrb       $0x0,(%r8,%r11,1),%xmm0,%xmm1
  .byte  196,131,113,32,12,16,1              // vpinsrb       $0x1,(%r8,%r10,1),%xmm1,%xmm1
  .byte  67,15,182,28,8                      // movzbl        (%r8,%r9,1),%ebx
  .byte  196,227,113,32,203,2                // vpinsrb       $0x2,%ebx,%xmm1,%xmm1
  .byte  65,15,182,4,0                       // movzbl        (%r8,%rax,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,21,41,0,0         // vbroadcastss  0x2915(%rip),%ymm1        # 5fb4 <_sk_callback_avx+0x388>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,10,41,0,0         // vbroadcastss  0x290a(%rip),%ymm3        # 5fb8 <_sk_callback_avx+0x38c>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_avx
.globl _sk_gather_i8_avx
FUNCTION(_sk_gather_i8_avx)
_sk_gather_i8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,192                          // mov           %rax,%r8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  116,5                               // je            36ce <_sk_gather_i8_avx+0xf>
  .byte  76,137,192                          // mov           %r8,%rax
  .byte  235,2                               // jmp           36d0 <_sk_gather_i8_avx+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,209                      // vcvttps2dq    %ymm1,%ymm2
  .byte  197,249,110,72,16                   // vmovd         0x10(%rax),%xmm1
  .byte  197,249,112,217,0                   // vpshufd       $0x0,%xmm1,%xmm3
  .byte  196,226,97,64,202                   // vpmulld       %xmm2,%xmm3,%xmm1
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,226,97,64,210                   // vpmulld       %xmm2,%xmm3,%xmm2
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,195,1                // vextractf128  $0x1,%ymm0,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,211                 // vmovq         %xmm2,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,223                          // mov           %ebx,%r15d
  .byte  196,195,249,22,196,1                // vpextrq       $0x1,%xmm0,%r12
  .byte  69,137,229                          // mov           %r12d,%r13d
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,131,121,32,4,49,0               // vpinsrb       $0x0,(%r9,%r14,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,25,1               // vpinsrb       $0x1,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,17,2               // vpinsrb       $0x2,(%r9,%r10,1),%xmm0,%xmm0
  .byte  196,195,121,32,4,1,3                // vpinsrb       $0x3,(%r9,%rax,1),%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  196,131,121,32,4,57,0               // vpinsrb       $0x0,(%r9,%r15,1),%xmm0,%xmm0
  .byte  196,195,121,32,4,25,1               // vpinsrb       $0x1,(%r9,%rbx,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,41,2               // vpinsrb       $0x2,(%r9,%r13,1),%xmm0,%xmm0
  .byte  196,131,121,32,4,33,3               // vpinsrb       $0x3,(%r9,%r12,1),%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  73,139,88,8                         // mov           0x8(%r8),%rbx
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  69,137,200                          // mov           %r9d,%r8d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  65,137,198                          // mov           %eax,%r14d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  69,137,223                          // mov           %r11d,%r15d
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  69,137,212                          // mov           %r10d,%r12d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,161,121,110,4,131               // vmovd         (%rbx,%r8,4),%xmm0
  .byte  196,163,121,34,4,11,1               // vpinsrd       $0x1,(%rbx,%r9,1),%xmm0,%xmm0
  .byte  196,163,121,34,4,179,2              // vpinsrd       $0x2,(%rbx,%r14,4),%xmm0,%xmm0
  .byte  196,99,121,34,4,3,3                 // vpinsrd       $0x3,(%rbx,%rax,1),%xmm0,%xmm8
  .byte  196,161,121,110,4,187               // vmovd         (%rbx,%r15,4),%xmm0
  .byte  196,163,121,34,4,27,1               // vpinsrd       $0x1,(%rbx,%r11,1),%xmm0,%xmm0
  .byte  196,163,121,34,4,163,2              // vpinsrd       $0x2,(%rbx,%r12,4),%xmm0,%xmm0
  .byte  196,163,121,34,28,19,3              // vpinsrd       $0x3,(%rbx,%r10,1),%xmm0,%xmm3
  .byte  196,227,61,24,195,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm0
  .byte  197,124,40,21,134,41,0,0            // vmovaps       0x2986(%rip),%ymm10        # 6180 <_sk_callback_avx+0x554>
  .byte  196,193,124,84,194                  // vandps        %ymm10,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,176,39,0,0         // vbroadcastss  0x27b0(%rip),%ymm9        # 5fbc <_sk_callback_avx+0x390>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,193,113,114,208,8               // vpsrld        $0x8,%xmm8,%xmm1
  .byte  197,233,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,193,33,114,208,16               // vpsrld        $0x10,%xmm8,%xmm11
  .byte  197,233,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,193,57,114,208,24               // vpsrld        $0x18,%xmm8,%xmm8
  .byte  197,225,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_avx
.globl _sk_load_565_avx
FUNCTION(_sk_load_565_avx)
_sk_load_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,128,0,0,0                    // jne           3904 <_sk_load_565_avx+0x8e>
  .byte  196,193,122,111,4,122               // vmovdqu       (%r10,%rdi,2),%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm2
  .byte  196,226,125,24,5,26,39,0,0          // vbroadcastss  0x271a(%rip),%ymm0        # 5fc0 <_sk_callback_avx+0x394>
  .byte  197,236,84,192                      // vandps        %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,13,39,0,0         // vbroadcastss  0x270d(%rip),%ymm1        # 5fc4 <_sk_callback_avx+0x398>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,4,39,0,0          // vbroadcastss  0x2704(%rip),%ymm1        # 5fc8 <_sk_callback_avx+0x39c>
  .byte  197,236,84,201                      // vandps        %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,247,38,0,0        // vbroadcastss  0x26f7(%rip),%ymm3        # 5fcc <_sk_callback_avx+0x3a0>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,24,29,238,38,0,0        // vbroadcastss  0x26ee(%rip),%ymm3        # 5fd0 <_sk_callback_avx+0x3a4>
  .byte  197,236,84,211                      // vandps        %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,225,38,0,0        // vbroadcastss  0x26e1(%rip),%ymm3        # 5fd4 <_sk_callback_avx+0x3a8>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,214,38,0,0        // vbroadcastss  0x26d6(%rip),%ymm3        # 5fd8 <_sk_callback_avx+0x3ac>
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  15,135,110,255,255,255              // ja            388a <_sk_load_565_avx+0x14>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,73,0,0,0                  // lea           0x49(%rip),%r9        # 3970 <_sk_load_565_avx+0xfa>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,122,12,6         // vpinsrw       $0x6,0xc(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,10,5         // vpinsrw       $0x5,0xa(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,8,4          // vpinsrw       $0x4,0x8(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,6,3          // vpinsrw       $0x3,0x6(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,4,2          // vpinsrw       $0x2,0x4(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,2,1          // vpinsrw       $0x1,0x2(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,4,122,0             // vpinsrw       $0x0,(%r10,%rdi,2),%xmm0,%xmm0
  .byte  233,26,255,255,255                  // jmpq          388a <_sk_load_565_avx+0x14>
  .byte  244                                 // hlt
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_565_avx
.globl _sk_gather_565_avx
FUNCTION(_sk_gather_565_avx)
_sk_gather_565_avx:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,209                      // vcvttps2dq    %ymm1,%ymm2
  .byte  197,249,110,72,16                   // vmovd         0x10(%rax),%xmm1
  .byte  197,249,112,217,0                   // vpshufd       $0x0,%xmm1,%xmm3
  .byte  196,226,97,64,202                   // vpmulld       %xmm2,%xmm3,%xmm1
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,226,97,64,210                   // vpmulld       %xmm2,%xmm3,%xmm2
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,195,1                // vextractf128  $0x1,%ymm0,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,210                 // vmovq         %xmm2,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  196,195,249,22,199,1                // vpextrq       $0x1,%xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  65,15,183,28,88                     // movzwl        (%r8,%rbx,2),%ebx
  .byte  67,15,183,44,112                    // movzwl        (%r8,%r14,2),%ebp
  .byte  197,249,110,197                     // vmovd         %ebp,%xmm0
  .byte  197,249,196,195,1                   // vpinsrw       $0x1,%ebx,%xmm0,%xmm0
  .byte  67,15,183,28,96                     // movzwl        (%r8,%r12,2),%ebx
  .byte  197,249,196,195,2                   // vpinsrw       $0x2,%ebx,%xmm0,%xmm0
  .byte  67,15,183,28,120                    // movzwl        (%r8,%r15,2),%ebx
  .byte  197,249,196,195,3                   // vpinsrw       $0x3,%ebx,%xmm0,%xmm0
  .byte  67,15,183,44,88                     // movzwl        (%r8,%r11,2),%ebp
  .byte  197,249,196,197,4                   // vpinsrw       $0x4,%ebp,%xmm0,%xmm0
  .byte  67,15,183,44,80                     // movzwl        (%r8,%r10,2),%ebp
  .byte  197,249,196,197,5                   // vpinsrw       $0x5,%ebp,%xmm0,%xmm0
  .byte  67,15,183,44,72                     // movzwl        (%r8,%r9,2),%ebp
  .byte  197,249,196,197,6                   // vpinsrw       $0x6,%ebp,%xmm0,%xmm0
  .byte  65,15,183,4,64                      // movzwl        (%r8,%rax,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm2
  .byte  196,226,125,24,5,118,37,0,0         // vbroadcastss  0x2576(%rip),%ymm0        # 5fdc <_sk_callback_avx+0x3b0>
  .byte  197,236,84,192                      // vandps        %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,105,37,0,0        // vbroadcastss  0x2569(%rip),%ymm1        # 5fe0 <_sk_callback_avx+0x3b4>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,96,37,0,0         // vbroadcastss  0x2560(%rip),%ymm1        # 5fe4 <_sk_callback_avx+0x3b8>
  .byte  197,236,84,201                      // vandps        %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,83,37,0,0         // vbroadcastss  0x2553(%rip),%ymm3        # 5fe8 <_sk_callback_avx+0x3bc>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,24,29,74,37,0,0         // vbroadcastss  0x254a(%rip),%ymm3        # 5fec <_sk_callback_avx+0x3c0>
  .byte  197,236,84,211                      // vandps        %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,61,37,0,0         // vbroadcastss  0x253d(%rip),%ymm3        # 5ff0 <_sk_callback_avx+0x3c4>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,50,37,0,0         // vbroadcastss  0x2532(%rip),%ymm3        # 5ff4 <_sk_callback_avx+0x3c8>
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_avx
.globl _sk_store_565_avx
FUNCTION(_sk_store_565_avx)
_sk_store_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  196,98,125,24,5,30,37,0,0           // vbroadcastss  0x251e(%rip),%ymm8        # 5ff8 <_sk_callback_avx+0x3cc>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,41,114,241,11               // vpslld        $0xb,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,11               // vpslld        $0xb,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,98,125,24,21,247,36,0,0         // vbroadcastss  0x24f7(%rip),%ymm10        # 5ffc <_sk_callback_avx+0x3d0>
  .byte  196,65,116,89,210                   // vmulps        %ymm10,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,5                // vpslld        $0x5,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,5                // vpslld        $0x5,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,10                              // jne           3b55 <_sk_store_565_avx+0x89>
  .byte  196,65,122,127,4,122                // vmovdqu       %xmm8,(%r10,%rdi,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  119,236                             // ja            3b51 <_sk_store_565_avx+0x85>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,68,0,0,0                  // lea           0x44(%rip),%r9        # 3bb4 <_sk_store_565_avx+0xe8>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,68,122,12,6           // vpextrw       $0x6,%xmm8,0xc(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,10,5           // vpextrw       $0x5,%xmm8,0xa(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,8,4            // vpextrw       $0x4,%xmm8,0x8(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,6,3            // vpextrw       $0x3,%xmm8,0x6(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,4,2            // vpextrw       $0x2,%xmm8,0x4(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,2,1            // vpextrw       $0x1,%xmm8,0x2(%r10,%rdi,2)
  .byte  196,67,121,21,4,122,0               // vpextrw       $0x0,%xmm8,(%r10,%rdi,2)
  .byte  235,159                             // jmp           3b51 <_sk_store_565_avx+0x85>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  245                                 // cmc
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_4444_avx
.globl _sk_load_4444_avx
FUNCTION(_sk_load_4444_avx)
_sk_load_4444_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,152,0,0,0                    // jne           3c76 <_sk_load_4444_avx+0xa6>
  .byte  196,193,122,111,4,122               // vmovdqu       (%r10,%rdi,2),%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm3
  .byte  196,226,125,24,5,0,36,0,0           // vbroadcastss  0x2400(%rip),%ymm0        # 6000 <_sk_callback_avx+0x3d4>
  .byte  197,228,84,192                      // vandps        %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,243,35,0,0        // vbroadcastss  0x23f3(%rip),%ymm1        # 6004 <_sk_callback_avx+0x3d8>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,234,35,0,0        // vbroadcastss  0x23ea(%rip),%ymm1        # 6008 <_sk_callback_avx+0x3dc>
  .byte  197,228,84,201                      // vandps        %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,221,35,0,0        // vbroadcastss  0x23dd(%rip),%ymm2        # 600c <_sk_callback_avx+0x3e0>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,212,35,0,0        // vbroadcastss  0x23d4(%rip),%ymm2        # 6010 <_sk_callback_avx+0x3e4>
  .byte  197,228,84,210                      // vandps        %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,199,35,0,0          // vbroadcastss  0x23c7(%rip),%ymm8        # 6014 <_sk_callback_avx+0x3e8>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,189,35,0,0          // vbroadcastss  0x23bd(%rip),%ymm8        # 6018 <_sk_callback_avx+0x3ec>
  .byte  196,193,100,84,216                  // vandps        %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,175,35,0,0          // vbroadcastss  0x23af(%rip),%ymm8        # 601c <_sk_callback_avx+0x3f0>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  15,135,86,255,255,255               // ja            3be4 <_sk_load_4444_avx+0x14>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,75,0,0,0                  // lea           0x4b(%rip),%r9        # 3ce4 <_sk_load_4444_avx+0x114>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,122,12,6         // vpinsrw       $0x6,0xc(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,10,5         // vpinsrw       $0x5,0xa(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,8,4          // vpinsrw       $0x4,0x8(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,6,3          // vpinsrw       $0x3,0x6(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,4,2          // vpinsrw       $0x2,0x4(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,122,2,1          // vpinsrw       $0x1,0x2(%r10,%rdi,2),%xmm0,%xmm0
  .byte  196,193,121,196,4,122,0             // vpinsrw       $0x0,(%r10,%rdi,2),%xmm0,%xmm0
  .byte  233,2,255,255,255                   // jmpq          3be4 <_sk_load_4444_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  242,255                             // repnz         (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,226                             // jmpq          *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  218,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,210                             // callq         *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190                                 // .byte         0xbe
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_4444_avx
.globl _sk_gather_4444_avx
FUNCTION(_sk_gather_4444_avx)
_sk_gather_4444_avx:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,209                      // vcvttps2dq    %ymm1,%ymm2
  .byte  197,249,110,72,16                   // vmovd         0x10(%rax),%xmm1
  .byte  197,249,112,217,0                   // vpshufd       $0x0,%xmm1,%xmm3
  .byte  196,226,97,64,202                   // vpmulld       %xmm2,%xmm3,%xmm1
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,226,97,64,210                   // vpmulld       %xmm2,%xmm3,%xmm2
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,195,1                // vextractf128  $0x1,%ymm0,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,210                 // vmovq         %xmm2,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  196,195,249,22,199,1                // vpextrq       $0x1,%xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  65,15,183,28,88                     // movzwl        (%r8,%rbx,2),%ebx
  .byte  67,15,183,44,112                    // movzwl        (%r8,%r14,2),%ebp
  .byte  197,249,110,197                     // vmovd         %ebp,%xmm0
  .byte  197,249,196,195,1                   // vpinsrw       $0x1,%ebx,%xmm0,%xmm0
  .byte  67,15,183,28,96                     // movzwl        (%r8,%r12,2),%ebx
  .byte  197,249,196,195,2                   // vpinsrw       $0x2,%ebx,%xmm0,%xmm0
  .byte  67,15,183,28,120                    // movzwl        (%r8,%r15,2),%ebx
  .byte  197,249,196,195,3                   // vpinsrw       $0x3,%ebx,%xmm0,%xmm0
  .byte  67,15,183,44,88                     // movzwl        (%r8,%r11,2),%ebp
  .byte  197,249,196,197,4                   // vpinsrw       $0x4,%ebp,%xmm0,%xmm0
  .byte  67,15,183,44,80                     // movzwl        (%r8,%r10,2),%ebp
  .byte  197,249,196,197,5                   // vpinsrw       $0x5,%ebp,%xmm0,%xmm0
  .byte  67,15,183,44,72                     // movzwl        (%r8,%r9,2),%ebp
  .byte  197,249,196,197,6                   // vpinsrw       $0x6,%ebp,%xmm0,%xmm0
  .byte  65,15,183,4,64                      // movzwl        (%r8,%rax,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm3
  .byte  196,226,125,24,5,70,34,0,0          // vbroadcastss  0x2246(%rip),%ymm0        # 6020 <_sk_callback_avx+0x3f4>
  .byte  197,228,84,192                      // vandps        %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,57,34,0,0         // vbroadcastss  0x2239(%rip),%ymm1        # 6024 <_sk_callback_avx+0x3f8>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,48,34,0,0         // vbroadcastss  0x2230(%rip),%ymm1        # 6028 <_sk_callback_avx+0x3fc>
  .byte  197,228,84,201                      // vandps        %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,35,34,0,0         // vbroadcastss  0x2223(%rip),%ymm2        # 602c <_sk_callback_avx+0x400>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,26,34,0,0         // vbroadcastss  0x221a(%rip),%ymm2        # 6030 <_sk_callback_avx+0x404>
  .byte  197,228,84,210                      // vandps        %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,13,34,0,0           // vbroadcastss  0x220d(%rip),%ymm8        # 6034 <_sk_callback_avx+0x408>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,3,34,0,0            // vbroadcastss  0x2203(%rip),%ymm8        # 6038 <_sk_callback_avx+0x40c>
  .byte  196,193,100,84,216                  // vandps        %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,245,33,0,0          // vbroadcastss  0x21f5(%rip),%ymm8        # 603c <_sk_callback_avx+0x410>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_avx
.globl _sk_store_4444_avx
FUNCTION(_sk_store_4444_avx)
_sk_store_4444_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  196,98,125,24,5,218,33,0,0          // vbroadcastss  0x21da(%rip),%ymm8        # 6040 <_sk_callback_avx+0x414>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,41,114,241,12               // vpslld        $0xc,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,12               // vpslld        $0xc,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,8                // vpslld        $0x8,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,8                // vpslld        $0x8,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,4                // vpslld        $0x4,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,4                // vpslld        $0x4,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,45,86,192                    // vorpd         %ymm8,%ymm10,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,10                              // jne           3eff <_sk_store_4444_avx+0xa7>
  .byte  196,65,122,127,4,122                // vmovdqu       %xmm8,(%r10,%rdi,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  119,236                             // ja            3efb <_sk_store_4444_avx+0xa3>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,66,0,0,0                  // lea           0x42(%rip),%r9        # 3f5c <_sk_store_4444_avx+0x104>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,68,122,12,6           // vpextrw       $0x6,%xmm8,0xc(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,10,5           // vpextrw       $0x5,%xmm8,0xa(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,8,4            // vpextrw       $0x4,%xmm8,0x8(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,6,3            // vpextrw       $0x3,%xmm8,0x6(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,4,2            // vpextrw       $0x2,%xmm8,0x4(%r10,%rdi,2)
  .byte  196,67,121,21,68,122,2,1            // vpextrw       $0x1,%xmm8,0x2(%r10,%rdi,2)
  .byte  196,67,121,21,4,122,0               // vpextrw       $0x0,%xmm8,(%r10,%rdi,2)
  .byte  235,159                             // jmp           3efb <_sk_store_4444_avx+0xa3>
  .byte  247,255                             // idiv          %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  239                                 // out           %eax,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,215                             // callq         *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,207                             // dec           %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,199                             // inc           %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_8888_avx
.globl _sk_load_8888_avx
FUNCTION(_sk_load_8888_avx)
_sk_load_8888_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,135,0,0,0                    // jne           400d <_sk_load_8888_avx+0x95>
  .byte  196,65,124,16,12,186                // vmovups       (%r10,%rdi,4),%ymm9
  .byte  197,124,40,21,12,34,0,0             // vmovaps       0x220c(%rip),%ymm10        # 61a0 <_sk_callback_avx+0x574>
  .byte  196,193,52,84,194                   // vandps        %ymm10,%ymm9,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,158,32,0,0          // vbroadcastss  0x209e(%rip),%ymm8        # 6044 <_sk_callback_avx+0x418>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,193,113,114,209,8               // vpsrld        $0x8,%xmm9,%xmm1
  .byte  196,99,125,25,203,1                 // vextractf128  $0x1,%ymm9,%xmm3
  .byte  197,233,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,193,33,114,209,16               // vpsrld        $0x10,%xmm9,%xmm11
  .byte  197,233,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,193,49,114,209,24               // vpsrld        $0x18,%xmm9,%xmm9
  .byte  197,225,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm3
  .byte  196,227,53,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm9,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  15,135,102,255,255,255              // ja            3f8c <_sk_load_8888_avx+0x14>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,139,0,0,0                 // lea           0x8b(%rip),%r9        # 40bc <_sk_load_8888_avx+0x144>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,193,121,110,68,186,24           // vmovd         0x18(%r10,%rdi,4),%xmm0
  .byte  197,249,112,192,68                  // vpshufd       $0x44,%xmm0,%xmm0
  .byte  196,227,125,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  196,99,117,12,200,64                // vblendps      $0x40,%ymm0,%ymm1,%ymm9
  .byte  196,99,125,25,200,1                 // vextractf128  $0x1,%ymm9,%xmm0
  .byte  196,195,121,34,68,186,20,1          // vpinsrd       $0x1,0x14(%r10,%rdi,4),%xmm0,%xmm0
  .byte  196,99,53,24,200,1                  // vinsertf128   $0x1,%xmm0,%ymm9,%ymm9
  .byte  196,99,125,25,200,1                 // vextractf128  $0x1,%ymm9,%xmm0
  .byte  196,195,121,34,68,186,16,0          // vpinsrd       $0x0,0x10(%r10,%rdi,4),%xmm0,%xmm0
  .byte  196,99,53,24,200,1                  // vinsertf128   $0x1,%xmm0,%ymm9,%ymm9
  .byte  196,195,49,34,68,186,12,3           // vpinsrd       $0x3,0xc(%r10,%rdi,4),%xmm9,%xmm0
  .byte  196,99,53,12,200,15                 // vblendps      $0xf,%ymm0,%ymm9,%ymm9
  .byte  196,195,49,34,68,186,8,2            // vpinsrd       $0x2,0x8(%r10,%rdi,4),%xmm9,%xmm0
  .byte  196,99,53,12,200,15                 // vblendps      $0xf,%ymm0,%ymm9,%ymm9
  .byte  196,195,49,34,68,186,4,1            // vpinsrd       $0x1,0x4(%r10,%rdi,4),%xmm9,%xmm0
  .byte  196,99,53,12,200,15                 // vblendps      $0xf,%ymm0,%ymm9,%ymm9
  .byte  196,195,49,34,4,186,0               // vpinsrd       $0x0,(%r10,%rdi,4),%xmm9,%xmm0
  .byte  196,99,53,12,200,15                 // vblendps      $0xf,%ymm0,%ymm9,%ymm9
  .byte  233,210,254,255,255                 // jmpq          3f8c <_sk_load_8888_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,174,255,255,255,154             // ljmp          *-0x65000001(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  126,255                             // jle           40d5 <_sk_load_8888_avx+0x15d>
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_8888_avx
.globl _sk_gather_8888_avx
FUNCTION(_sk_gather_8888_avx)
_sk_gather_8888_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,194,1                // vextractf128  $0x1,%ymm0,%xmm2
  .byte  197,241,254,202                     // vpaddd        %xmm2,%xmm1,%xmm1
  .byte  196,225,249,126,200                 // vmovq         %xmm1,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,195,249,22,202,1                // vpextrq       $0x1,%xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  197,225,254,192                     // vpaddd        %xmm0,%xmm3,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  196,195,249,22,199,1                // vpextrq       $0x1,%xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  196,129,121,110,4,176               // vmovd         (%r8,%r14,4),%xmm0
  .byte  196,195,121,34,4,152,1              // vpinsrd       $0x1,(%r8,%rbx,4),%xmm0,%xmm0
  .byte  196,131,121,34,4,160,2              // vpinsrd       $0x2,(%r8,%r12,4),%xmm0,%xmm0
  .byte  196,3,121,34,4,184,3                // vpinsrd       $0x3,(%r8,%r15,4),%xmm0,%xmm8
  .byte  196,129,121,110,4,136               // vmovd         (%r8,%r9,4),%xmm0
  .byte  196,195,121,34,4,128,1              // vpinsrd       $0x1,(%r8,%rax,4),%xmm0,%xmm0
  .byte  196,131,121,34,4,152,2              // vpinsrd       $0x2,(%r8,%r11,4),%xmm0,%xmm0
  .byte  196,131,121,34,28,144,3             // vpinsrd       $0x3,(%r8,%r10,4),%xmm0,%xmm3
  .byte  196,227,61,24,195,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm0
  .byte  197,124,40,21,54,32,0,0             // vmovaps       0x2036(%rip),%ymm10        # 61c0 <_sk_callback_avx+0x594>
  .byte  196,193,124,84,194                  // vandps        %ymm10,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,172,30,0,0         // vbroadcastss  0x1eac(%rip),%ymm9        # 6048 <_sk_callback_avx+0x41c>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,193,113,114,208,8               // vpsrld        $0x8,%xmm8,%xmm1
  .byte  197,233,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,193,33,114,208,16               // vpsrld        $0x10,%xmm8,%xmm11
  .byte  197,233,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,193,57,114,208,24               // vpsrld        $0x18,%xmm8,%xmm8
  .byte  197,225,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_avx
.globl _sk_store_8888_avx
FUNCTION(_sk_store_8888_avx)
_sk_store_8888_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  196,98,125,24,5,58,30,0,0           // vbroadcastss  0x1e3a(%rip),%ymm8        # 604c <_sk_callback_avx+0x420>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,8                // vpslld        $0x8,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,8                // vpslld        $0x8,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,16               // vpslld        $0x10,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,16               // vpslld        $0x10,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,193,33,114,240,24               // vpslld        $0x18,%xmm8,%xmm11
  .byte  196,67,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm8
  .byte  196,193,57,114,240,24               // vpslld        $0x18,%xmm8,%xmm8
  .byte  196,67,37,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm11,%ymm8
  .byte  196,65,45,86,192                    // vorpd         %ymm8,%ymm10,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,10                              // jne           42a0 <_sk_store_8888_avx+0x9c>
  .byte  196,65,124,17,4,186                 // vmovups       %ymm8,(%r10,%rdi,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  65,128,224,7                        // and           $0x7,%r8b
  .byte  65,254,200                          // dec           %r8b
  .byte  65,128,248,6                        // cmp           $0x6,%r8b
  .byte  119,236                             // ja            429c <_sk_store_8888_avx+0x98>
  .byte  69,15,182,192                       // movzbl        %r8b,%r8d
  .byte  76,141,13,85,0,0,0                  // lea           0x55(%rip),%r9        # 4310 <_sk_store_8888_avx+0x10c>
  .byte  75,99,4,129                         // movslq        (%r9,%r8,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,67,121,22,76,186,24,2           // vpextrd       $0x2,%xmm9,0x18(%r10,%rdi,4)
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,67,121,22,76,186,20,1           // vpextrd       $0x1,%xmm9,0x14(%r10,%rdi,4)
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,65,122,17,76,186,16             // vmovss        %xmm9,0x10(%r10,%rdi,4)
  .byte  196,67,121,22,68,186,12,3           // vpextrd       $0x3,%xmm8,0xc(%r10,%rdi,4)
  .byte  196,67,121,22,68,186,8,2            // vpextrd       $0x2,%xmm8,0x8(%r10,%rdi,4)
  .byte  196,67,121,22,68,186,4,1            // vpextrd       $0x1,%xmm8,0x4(%r10,%rdi,4)
  .byte  196,65,121,126,4,186                // vmovd         %xmm8,(%r10,%rdi,4)
  .byte  235,143                             // jmp           429c <_sk_store_8888_avx+0x98>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  245                                 // cmc
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff
  .byte  180,255                             // mov           $0xff,%ah
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_f16_avx
.globl _sk_load_f16_avx
FUNCTION(_sk_load_f16_avx)
_sk_load_f16_avx:
  .byte  72,131,236,24                       // sub           $0x18,%rsp
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  197,252,17,124,36,224               // vmovups       %ymm7,-0x20(%rsp)
  .byte  197,252,17,116,36,192               // vmovups       %ymm6,-0x40(%rsp)
  .byte  197,252,17,108,36,160               // vmovups       %ymm5,-0x60(%rsp)
  .byte  197,254,127,100,36,128              // vmovdqu       %ymm4,-0x80(%rsp)
  .byte  15,133,141,2,0,0                    // jne           45e3 <_sk_load_f16_avx+0x2b7>
  .byte  197,121,16,4,248                    // vmovupd       (%rax,%rdi,8),%xmm8
  .byte  197,249,16,84,248,16                // vmovupd       0x10(%rax,%rdi,8),%xmm2
  .byte  197,249,16,76,248,32                // vmovupd       0x20(%rax,%rdi,8),%xmm1
  .byte  197,122,111,76,248,48               // vmovdqu       0x30(%rax,%rdi,8),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,113,97,217                  // vpunpcklwd    %xmm9,%xmm1,%xmm3
  .byte  196,193,113,105,201                 // vpunpckhwd    %xmm9,%xmm1,%xmm1
  .byte  197,121,97,250                      // vpunpcklwd    %xmm2,%xmm0,%xmm15
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,225,97,209                      // vpunpcklwd    %xmm1,%xmm3,%xmm2
  .byte  197,97,105,201                      // vpunpckhwd    %xmm1,%xmm3,%xmm9
  .byte  197,129,108,194                     // vpunpcklqdq   %xmm2,%xmm15,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,98,125,24,37,161,28,0,0         // vbroadcastss  0x1ca1(%rip),%ymm12        # 6050 <_sk_callback_avx+0x424>
  .byte  196,193,124,84,204                  // vandps        %ymm12,%ymm0,%ymm1
  .byte  197,252,87,193                      // vxorps        %ymm1,%ymm0,%ymm0
  .byte  196,195,125,25,198,1                // vextractf128  $0x1,%ymm0,%xmm14
  .byte  196,98,121,24,29,141,28,0,0         // vbroadcastss  0x1c8d(%rip),%xmm11        # 6054 <_sk_callback_avx+0x428>
  .byte  196,193,8,87,219                    // vxorps        %xmm11,%xmm14,%xmm3
  .byte  196,98,121,24,45,131,28,0,0         // vbroadcastss  0x1c83(%rip),%xmm13        # 6058 <_sk_callback_avx+0x42c>
  .byte  197,145,102,219                     // vpcmpgtd      %xmm3,%xmm13,%xmm3
  .byte  196,65,120,87,211                   // vxorps        %xmm11,%xmm0,%xmm10
  .byte  196,65,17,102,210                   // vpcmpgtd      %xmm10,%xmm13,%xmm10
  .byte  196,99,45,24,211,1                  // vinsertf128   $0x1,%xmm3,%ymm10,%ymm10
  .byte  197,225,114,241,16                  // vpslld        $0x10,%xmm1,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  197,241,114,241,16                  // vpslld        $0x10,%xmm1,%xmm1
  .byte  196,227,101,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm1
  .byte  197,249,114,240,13                  // vpslld        $0xd,%xmm0,%xmm0
  .byte  196,193,97,114,246,13               // vpslld        $0xd,%xmm14,%xmm3
  .byte  196,227,125,24,195,1                // vinsertf128   $0x1,%xmm3,%ymm0,%ymm0
  .byte  197,252,86,193                      // vorps         %ymm1,%ymm0,%ymm0
  .byte  196,227,125,25,193,1                // vextractf128  $0x1,%ymm0,%xmm1
  .byte  196,226,121,24,29,57,28,0,0         // vbroadcastss  0x1c39(%rip),%xmm3        # 605c <_sk_callback_avx+0x430>
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  197,249,254,195                     // vpaddd        %xmm3,%xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,195,125,74,198,160              // vblendvps     %ymm10,%ymm14,%ymm0,%ymm0
  .byte  197,129,109,202                     // vpunpckhqdq   %xmm2,%xmm15,%xmm1
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,241,105,212                     // vpunpckhwd    %xmm4,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,212                  // vandps        %ymm12,%ymm1,%ymm2
  .byte  197,244,87,202                      // vxorps        %ymm2,%ymm1,%ymm1
  .byte  196,195,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm10
  .byte  196,193,40,87,251                   // vxorps        %xmm11,%xmm10,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,193,112,87,243                  // vxorps        %xmm11,%xmm1,%xmm6
  .byte  197,145,102,246                     // vpcmpgtd      %xmm6,%xmm13,%xmm6
  .byte  196,227,77,24,247,1                 // vinsertf128   $0x1,%xmm7,%ymm6,%ymm6
  .byte  197,193,114,242,16                  // vpslld        $0x10,%xmm2,%xmm7
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  197,233,114,242,16                  // vpslld        $0x10,%xmm2,%xmm2
  .byte  196,227,69,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm7,%ymm2
  .byte  197,241,114,241,13                  // vpslld        $0xd,%xmm1,%xmm1
  .byte  196,193,65,114,242,13               // vpslld        $0xd,%xmm10,%xmm7
  .byte  196,227,117,24,207,1                // vinsertf128   $0x1,%xmm7,%ymm1,%ymm1
  .byte  197,244,86,202                      // vorps         %ymm2,%ymm1,%ymm1
  .byte  196,227,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm2
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,195,117,74,206,96               // vblendvps     %ymm6,%ymm14,%ymm1,%ymm1
  .byte  196,193,57,108,209                  // vpunpcklqdq   %xmm9,%xmm8,%xmm2
  .byte  197,233,105,244                     // vpunpckhwd    %xmm4,%xmm2,%xmm6
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  196,193,108,84,244                  // vandps        %ymm12,%ymm2,%ymm6
  .byte  197,236,87,214                      // vxorps        %ymm6,%ymm2,%ymm2
  .byte  196,227,125,25,215,1                // vextractf128  $0x1,%ymm2,%xmm7
  .byte  196,193,64,87,235                   // vxorps        %xmm11,%xmm7,%xmm5
  .byte  197,145,102,237                     // vpcmpgtd      %xmm5,%xmm13,%xmm5
  .byte  196,193,104,87,227                  // vxorps        %xmm11,%xmm2,%xmm4
  .byte  197,145,102,228                     // vpcmpgtd      %xmm4,%xmm13,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  197,209,114,246,16                  // vpslld        $0x10,%xmm6,%xmm5
  .byte  196,227,125,25,246,1                // vextractf128  $0x1,%ymm6,%xmm6
  .byte  197,201,114,246,16                  // vpslld        $0x10,%xmm6,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  197,233,114,242,13                  // vpslld        $0xd,%xmm2,%xmm2
  .byte  197,201,114,247,13                  // vpslld        $0xd,%xmm7,%xmm6
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  197,236,86,213                      // vorps         %ymm5,%ymm2,%ymm2
  .byte  196,227,125,25,213,1                // vextractf128  $0x1,%ymm2,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,213,1                // vinsertf128   $0x1,%xmm5,%ymm2,%ymm2
  .byte  196,195,109,74,214,64               // vblendvps     %ymm4,%ymm14,%ymm2,%ymm2
  .byte  196,193,57,109,225                  // vpunpckhqdq   %xmm9,%xmm8,%xmm4
  .byte  196,193,89,105,234                  // vpunpckhwd    %xmm10,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,193,92,84,236                   // vandps        %ymm12,%ymm4,%ymm5
  .byte  197,220,87,229                      // vxorps        %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,230,1                // vextractf128  $0x1,%ymm4,%xmm6
  .byte  196,193,72,87,251                   // vxorps        %xmm11,%xmm6,%xmm7
  .byte  197,17,102,199                      // vpcmpgtd      %xmm7,%xmm13,%xmm8
  .byte  196,193,88,87,251                   // vxorps        %xmm11,%xmm4,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,195,69,24,248,1                 // vinsertf128   $0x1,%xmm8,%ymm7,%ymm7
  .byte  197,185,114,245,16                  // vpslld        $0x10,%xmm5,%xmm8
  .byte  196,227,125,25,237,1                // vextractf128  $0x1,%ymm5,%xmm5
  .byte  197,209,114,245,16                  // vpslld        $0x10,%xmm5,%xmm5
  .byte  196,227,61,24,237,1                 // vinsertf128   $0x1,%xmm5,%ymm8,%ymm5
  .byte  197,217,114,244,13                  // vpslld        $0xd,%xmm4,%xmm4
  .byte  197,201,114,246,13                  // vpslld        $0xd,%xmm6,%xmm6
  .byte  196,227,93,24,230,1                 // vinsertf128   $0x1,%xmm6,%ymm4,%ymm4
  .byte  197,220,86,229                      // vorps         %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,229,1                // vextractf128  $0x1,%ymm4,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,217,254,219                     // vpaddd        %xmm3,%xmm4,%xmm3
  .byte  196,227,101,24,221,1                // vinsertf128   $0x1,%xmm5,%ymm3,%ymm3
  .byte  196,195,101,74,222,112              // vblendvps     %ymm7,%ymm14,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,100,36,128               // vmovups       -0x80(%rsp),%ymm4
  .byte  197,252,16,108,36,160               // vmovups       -0x60(%rsp),%ymm5
  .byte  197,252,16,116,36,192               // vmovups       -0x40(%rsp),%ymm6
  .byte  197,252,16,124,36,224               // vmovups       -0x20(%rsp),%ymm7
  .byte  72,131,196,24                       // add           $0x18,%rsp
  .byte  255,224                             // jmpq          *%rax
  .byte  197,123,16,4,248                    // vmovsd        (%rax,%rdi,8),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,79                              // je            4642 <_sk_load_f16_avx+0x316>
  .byte  197,57,22,68,248,8                  // vmovhpd       0x8(%rax,%rdi,8),%xmm8,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,67                              // jb            4642 <_sk_load_f16_avx+0x316>
  .byte  197,251,16,84,248,16                // vmovsd        0x10(%rax,%rdi,8),%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  116,68                              // je            464f <_sk_load_f16_avx+0x323>
  .byte  197,233,22,84,248,24                // vmovhpd       0x18(%rax,%rdi,8),%xmm2,%xmm2
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,56                              // jb            464f <_sk_load_f16_avx+0x323>
  .byte  197,251,16,76,248,32                // vmovsd        0x20(%rax,%rdi,8),%xmm1
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  15,132,70,253,255,255               // je            436d <_sk_load_f16_avx+0x41>
  .byte  197,241,22,76,248,40                // vmovhpd       0x28(%rax,%rdi,8),%xmm1,%xmm1
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  15,130,54,253,255,255               // jb            436d <_sk_load_f16_avx+0x41>
  .byte  197,122,126,76,248,48               // vmovq         0x30(%rax,%rdi,8),%xmm9
  .byte  233,43,253,255,255                  // jmpq          436d <_sk_load_f16_avx+0x41>
  .byte  197,241,87,201                      // vxorpd        %xmm1,%xmm1,%xmm1
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,30,253,255,255                  // jmpq          436d <_sk_load_f16_avx+0x41>
  .byte  197,241,87,201                      // vxorpd        %xmm1,%xmm1,%xmm1
  .byte  233,21,253,255,255                  // jmpq          436d <_sk_load_f16_avx+0x41>

HIDDEN _sk_gather_f16_avx
.globl _sk_gather_f16_avx
FUNCTION(_sk_gather_f16_avx)
_sk_gather_f16_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,236,24                       // sub           $0x18,%rsp
  .byte  197,252,17,124,36,224               // vmovups       %ymm7,-0x20(%rsp)
  .byte  197,252,17,116,36,192               // vmovups       %ymm6,-0x40(%rsp)
  .byte  197,252,17,108,36,160               // vmovups       %ymm5,-0x60(%rsp)
  .byte  197,254,127,100,36,128              // vmovdqu       %ymm4,-0x80(%rsp)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  197,254,91,209                      // vcvttps2dq    %ymm1,%ymm2
  .byte  197,249,110,72,16                   // vmovd         0x10(%rax),%xmm1
  .byte  197,249,112,217,0                   // vpshufd       $0x0,%xmm1,%xmm3
  .byte  196,226,97,64,202                   // vpmulld       %xmm2,%xmm3,%xmm1
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,226,97,64,210                   // vpmulld       %xmm2,%xmm3,%xmm2
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,195,1                // vextractf128  $0x1,%ymm0,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,193,249,126,210                 // vmovq         %xmm2,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  196,225,249,126,195                 // vmovq         %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  196,195,249,22,199,1                // vpextrq       $0x1,%xmm0,%r15
  .byte  69,137,252                          // mov           %r15d,%r12d
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,122,126,4,216               // vmovq         (%r8,%rbx,8),%xmm0
  .byte  196,129,122,126,12,240              // vmovq         (%r8,%r14,8),%xmm1
  .byte  197,113,108,200                     // vpunpcklqdq   %xmm0,%xmm1,%xmm9
  .byte  196,129,122,126,12,248              // vmovq         (%r8,%r15,8),%xmm1
  .byte  196,129,122,126,20,224              // vmovq         (%r8,%r12,8),%xmm2
  .byte  197,233,108,201                     // vpunpcklqdq   %xmm1,%xmm2,%xmm1
  .byte  196,129,122,126,20,208              // vmovq         (%r8,%r10,8),%xmm2
  .byte  196,129,122,126,28,216              // vmovq         (%r8,%r11,8),%xmm3
  .byte  197,97,108,210                      // vpunpcklqdq   %xmm2,%xmm3,%xmm10
  .byte  196,65,122,126,4,192                // vmovq         (%r8,%rax,8),%xmm8
  .byte  196,129,122,126,28,200              // vmovq         (%r8,%r9,8),%xmm3
  .byte  196,193,97,108,216                  // vpunpcklqdq   %xmm8,%xmm3,%xmm3
  .byte  197,177,97,193                      // vpunpcklwd    %xmm1,%xmm9,%xmm0
  .byte  197,177,105,201                     // vpunpckhwd    %xmm1,%xmm9,%xmm1
  .byte  197,169,97,211                      // vpunpcklwd    %xmm3,%xmm10,%xmm2
  .byte  197,169,105,219                     // vpunpckhwd    %xmm3,%xmm10,%xmm3
  .byte  197,121,97,249                      // vpunpcklwd    %xmm1,%xmm0,%xmm15
  .byte  197,121,105,193                     // vpunpckhwd    %xmm1,%xmm0,%xmm8
  .byte  197,233,97,203                      // vpunpcklwd    %xmm3,%xmm2,%xmm1
  .byte  197,105,105,203                     // vpunpckhwd    %xmm3,%xmm2,%xmm9
  .byte  197,129,108,193                     // vpunpcklqdq   %xmm1,%xmm15,%xmm0
  .byte  197,233,239,210                     // vpxor         %xmm2,%xmm2,%xmm2
  .byte  197,249,105,210                     // vpunpckhwd    %xmm2,%xmm0,%xmm2
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,194,1                // vinsertf128   $0x1,%xmm2,%ymm0,%ymm0
  .byte  196,98,125,24,37,253,24,0,0         // vbroadcastss  0x18fd(%rip),%ymm12        # 6060 <_sk_callback_avx+0x434>
  .byte  196,193,124,84,212                  // vandps        %ymm12,%ymm0,%ymm2
  .byte  197,252,87,194                      // vxorps        %ymm2,%ymm0,%ymm0
  .byte  196,195,125,25,198,1                // vextractf128  $0x1,%ymm0,%xmm14
  .byte  196,98,121,24,29,233,24,0,0         // vbroadcastss  0x18e9(%rip),%xmm11        # 6064 <_sk_callback_avx+0x438>
  .byte  196,193,8,87,219                    // vxorps        %xmm11,%xmm14,%xmm3
  .byte  196,98,121,24,45,223,24,0,0         // vbroadcastss  0x18df(%rip),%xmm13        # 6068 <_sk_callback_avx+0x43c>
  .byte  197,145,102,219                     // vpcmpgtd      %xmm3,%xmm13,%xmm3
  .byte  196,65,120,87,211                   // vxorps        %xmm11,%xmm0,%xmm10
  .byte  196,65,17,102,210                   // vpcmpgtd      %xmm10,%xmm13,%xmm10
  .byte  196,99,45,24,211,1                  // vinsertf128   $0x1,%xmm3,%ymm10,%ymm10
  .byte  197,225,114,242,16                  // vpslld        $0x10,%xmm2,%xmm3
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  197,233,114,242,16                  // vpslld        $0x10,%xmm2,%xmm2
  .byte  196,227,101,24,210,1                // vinsertf128   $0x1,%xmm2,%ymm3,%ymm2
  .byte  197,249,114,240,13                  // vpslld        $0xd,%xmm0,%xmm0
  .byte  196,193,97,114,246,13               // vpslld        $0xd,%xmm14,%xmm3
  .byte  196,227,125,24,195,1                // vinsertf128   $0x1,%xmm3,%ymm0,%ymm0
  .byte  197,252,86,194                      // vorps         %ymm2,%ymm0,%ymm0
  .byte  196,227,125,25,194,1                // vextractf128  $0x1,%ymm0,%xmm2
  .byte  196,226,121,24,29,149,24,0,0        // vbroadcastss  0x1895(%rip),%xmm3        # 606c <_sk_callback_avx+0x440>
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,249,254,195                     // vpaddd        %xmm3,%xmm0,%xmm0
  .byte  196,227,125,24,194,1                // vinsertf128   $0x1,%xmm2,%ymm0,%ymm0
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,195,125,74,198,160              // vblendvps     %ymm10,%ymm14,%ymm0,%ymm0
  .byte  197,129,109,201                     // vpunpckhqdq   %xmm1,%xmm15,%xmm1
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,241,105,212                     // vpunpckhwd    %xmm4,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,212                  // vandps        %ymm12,%ymm1,%ymm2
  .byte  197,244,87,202                      // vxorps        %ymm2,%ymm1,%ymm1
  .byte  196,195,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm10
  .byte  196,193,40,87,251                   // vxorps        %xmm11,%xmm10,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,193,112,87,243                  // vxorps        %xmm11,%xmm1,%xmm6
  .byte  197,145,102,246                     // vpcmpgtd      %xmm6,%xmm13,%xmm6
  .byte  196,227,77,24,247,1                 // vinsertf128   $0x1,%xmm7,%ymm6,%ymm6
  .byte  197,193,114,242,16                  // vpslld        $0x10,%xmm2,%xmm7
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  197,233,114,242,16                  // vpslld        $0x10,%xmm2,%xmm2
  .byte  196,227,69,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm7,%ymm2
  .byte  197,241,114,241,13                  // vpslld        $0xd,%xmm1,%xmm1
  .byte  196,193,65,114,242,13               // vpslld        $0xd,%xmm10,%xmm7
  .byte  196,227,117,24,207,1                // vinsertf128   $0x1,%xmm7,%ymm1,%ymm1
  .byte  197,244,86,202                      // vorps         %ymm2,%ymm1,%ymm1
  .byte  196,227,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm2
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,195,117,74,206,96               // vblendvps     %ymm6,%ymm14,%ymm1,%ymm1
  .byte  196,193,57,108,209                  // vpunpcklqdq   %xmm9,%xmm8,%xmm2
  .byte  197,233,105,244                     // vpunpckhwd    %xmm4,%xmm2,%xmm6
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  196,193,108,84,244                  // vandps        %ymm12,%ymm2,%ymm6
  .byte  197,236,87,214                      // vxorps        %ymm6,%ymm2,%ymm2
  .byte  196,227,125,25,215,1                // vextractf128  $0x1,%ymm2,%xmm7
  .byte  196,193,64,87,235                   // vxorps        %xmm11,%xmm7,%xmm5
  .byte  197,145,102,237                     // vpcmpgtd      %xmm5,%xmm13,%xmm5
  .byte  196,193,104,87,227                  // vxorps        %xmm11,%xmm2,%xmm4
  .byte  197,145,102,228                     // vpcmpgtd      %xmm4,%xmm13,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  197,209,114,246,16                  // vpslld        $0x10,%xmm6,%xmm5
  .byte  196,227,125,25,246,1                // vextractf128  $0x1,%ymm6,%xmm6
  .byte  197,201,114,246,16                  // vpslld        $0x10,%xmm6,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  197,233,114,242,13                  // vpslld        $0xd,%xmm2,%xmm2
  .byte  197,201,114,247,13                  // vpslld        $0xd,%xmm7,%xmm6
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  197,236,86,213                      // vorps         %ymm5,%ymm2,%ymm2
  .byte  196,227,125,25,213,1                // vextractf128  $0x1,%ymm2,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,213,1                // vinsertf128   $0x1,%xmm5,%ymm2,%ymm2
  .byte  196,195,109,74,214,64               // vblendvps     %ymm4,%ymm14,%ymm2,%ymm2
  .byte  196,193,57,109,225                  // vpunpckhqdq   %xmm9,%xmm8,%xmm4
  .byte  196,193,89,105,234                  // vpunpckhwd    %xmm10,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,193,92,84,236                   // vandps        %ymm12,%ymm4,%ymm5
  .byte  197,220,87,229                      // vxorps        %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,230,1                // vextractf128  $0x1,%ymm4,%xmm6
  .byte  196,193,72,87,251                   // vxorps        %xmm11,%xmm6,%xmm7
  .byte  197,17,102,199                      // vpcmpgtd      %xmm7,%xmm13,%xmm8
  .byte  196,193,88,87,251                   // vxorps        %xmm11,%xmm4,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,195,69,24,248,1                 // vinsertf128   $0x1,%xmm8,%ymm7,%ymm7
  .byte  197,185,114,245,16                  // vpslld        $0x10,%xmm5,%xmm8
  .byte  196,227,125,25,237,1                // vextractf128  $0x1,%ymm5,%xmm5
  .byte  197,209,114,245,16                  // vpslld        $0x10,%xmm5,%xmm5
  .byte  196,227,61,24,237,1                 // vinsertf128   $0x1,%xmm5,%ymm8,%ymm5
  .byte  197,217,114,244,13                  // vpslld        $0xd,%xmm4,%xmm4
  .byte  197,201,114,246,13                  // vpslld        $0xd,%xmm6,%xmm6
  .byte  196,227,93,24,230,1                 // vinsertf128   $0x1,%xmm6,%ymm4,%ymm4
  .byte  197,220,86,229                      // vorps         %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,229,1                // vextractf128  $0x1,%ymm4,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,217,254,219                     // vpaddd        %xmm3,%xmm4,%xmm3
  .byte  196,227,101,24,221,1                // vinsertf128   $0x1,%xmm5,%ymm3,%ymm3
  .byte  196,195,101,74,222,112              // vblendvps     %ymm7,%ymm14,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,100,36,128               // vmovups       -0x80(%rsp),%ymm4
  .byte  197,252,16,108,36,160               // vmovups       -0x60(%rsp),%ymm5
  .byte  197,252,16,116,36,192               // vmovups       -0x40(%rsp),%ymm6
  .byte  197,252,16,124,36,224               // vmovups       -0x20(%rsp),%ymm7
  .byte  72,131,196,24                       // add           $0x18,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_avx
.globl _sk_store_f16_avx
FUNCTION(_sk_store_f16_avx)
_sk_store_f16_avx:
  .byte  72,131,236,88                       // sub           $0x58,%rsp
  .byte  197,252,17,124,36,32                // vmovups       %ymm7,0x20(%rsp)
  .byte  197,252,17,52,36                    // vmovups       %ymm6,(%rsp)
  .byte  197,252,17,108,36,224               // vmovups       %ymm5,-0x20(%rsp)
  .byte  197,252,17,100,36,192               // vmovups       %ymm4,-0x40(%rsp)
  .byte  196,98,125,24,13,174,22,0,0         // vbroadcastss  0x16ae(%rip),%ymm9        # 6070 <_sk_callback_avx+0x444>
  .byte  196,65,124,84,209                   // vandps        %ymm9,%ymm0,%ymm10
  .byte  197,252,17,68,36,128                // vmovups       %ymm0,-0x80(%rsp)
  .byte  196,65,124,87,218                   // vxorps        %ymm10,%ymm0,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,98,121,24,5,147,22,0,0          // vbroadcastss  0x1693(%rip),%xmm8        # 6074 <_sk_callback_avx+0x448>
  .byte  196,65,57,102,236                   // vpcmpgtd      %xmm12,%xmm8,%xmm13
  .byte  196,65,57,102,243                   // vpcmpgtd      %xmm11,%xmm8,%xmm14
  .byte  196,67,13,24,237,1                  // vinsertf128   $0x1,%xmm13,%ymm14,%ymm13
  .byte  196,193,9,114,210,16                // vpsrld        $0x10,%xmm10,%xmm14
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,210,16               // vpsrld        $0x10,%xmm10,%xmm10
  .byte  196,67,13,24,242,1                  // vinsertf128   $0x1,%xmm10,%ymm14,%ymm14
  .byte  196,193,33,114,211,13               // vpsrld        $0xd,%xmm11,%xmm11
  .byte  196,193,25,114,212,13               // vpsrld        $0xd,%xmm12,%xmm12
  .byte  196,98,125,24,21,90,22,0,0          // vbroadcastss  0x165a(%rip),%ymm10        # 6078 <_sk_callback_avx+0x44c>
  .byte  196,65,12,86,242                    // vorps         %ymm10,%ymm14,%ymm14
  .byte  196,67,125,25,247,1                 // vextractf128  $0x1,%ymm14,%xmm15
  .byte  196,65,1,254,228                    // vpaddd        %xmm12,%xmm15,%xmm12
  .byte  196,65,9,254,219                    // vpaddd        %xmm11,%xmm14,%xmm11
  .byte  196,67,37,24,228,1                  // vinsertf128   $0x1,%xmm12,%ymm11,%ymm12
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  196,99,29,74,224,208                // vblendvps     %ymm13,%ymm0,%ymm12,%ymm12
  .byte  196,65,116,84,233                   // vandps        %ymm9,%ymm1,%ymm13
  .byte  197,252,17,76,36,160                // vmovups       %ymm1,-0x60(%rsp)
  .byte  196,65,116,87,245                   // vxorps        %ymm13,%ymm1,%ymm14
  .byte  196,67,125,25,247,1                 // vextractf128  $0x1,%ymm14,%xmm15
  .byte  196,193,57,102,255                  // vpcmpgtd      %xmm15,%xmm8,%xmm7
  .byte  196,65,57,102,222                   // vpcmpgtd      %xmm14,%xmm8,%xmm11
  .byte  196,227,37,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm11,%ymm7
  .byte  196,193,33,114,213,16               // vpsrld        $0x10,%xmm13,%xmm11
  .byte  196,99,125,25,238,1                 // vextractf128  $0x1,%ymm13,%xmm6
  .byte  197,201,114,214,16                  // vpsrld        $0x10,%xmm6,%xmm6
  .byte  196,227,37,24,246,1                 // vinsertf128   $0x1,%xmm6,%ymm11,%ymm6
  .byte  196,193,33,114,215,13               // vpsrld        $0xd,%xmm15,%xmm11
  .byte  196,193,76,86,242                   // vorps         %ymm10,%ymm6,%ymm6
  .byte  196,227,125,25,245,1                // vextractf128  $0x1,%ymm6,%xmm5
  .byte  196,193,81,254,235                  // vpaddd        %xmm11,%xmm5,%xmm5
  .byte  196,193,89,114,214,13               // vpsrld        $0xd,%xmm14,%xmm4
  .byte  197,201,254,228                     // vpaddd        %xmm4,%xmm6,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,99,93,74,232,112                // vblendvps     %ymm7,%ymm0,%ymm4,%ymm13
  .byte  196,193,108,84,225                  // vandps        %ymm9,%ymm2,%ymm4
  .byte  197,236,87,236                      // vxorps        %ymm4,%ymm2,%ymm5
  .byte  196,227,125,25,238,1                // vextractf128  $0x1,%ymm5,%xmm6
  .byte  197,185,102,254                     // vpcmpgtd      %xmm6,%xmm8,%xmm7
  .byte  197,57,102,221                      // vpcmpgtd      %xmm5,%xmm8,%xmm11
  .byte  196,227,37,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm11,%ymm7
  .byte  197,161,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm11
  .byte  196,227,125,25,228,1                // vextractf128  $0x1,%ymm4,%xmm4
  .byte  197,217,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm4
  .byte  196,227,37,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm11,%ymm4
  .byte  197,201,114,214,13                  // vpsrld        $0xd,%xmm6,%xmm6
  .byte  196,193,92,86,226                   // vorps         %ymm10,%ymm4,%ymm4
  .byte  196,227,125,25,225,1                // vextractf128  $0x1,%ymm4,%xmm1
  .byte  197,241,254,206                     // vpaddd        %xmm6,%xmm1,%xmm1
  .byte  197,209,114,213,13                  // vpsrld        $0xd,%xmm5,%xmm5
  .byte  197,217,254,229                     // vpaddd        %xmm5,%xmm4,%xmm4
  .byte  196,227,93,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm4,%ymm1
  .byte  196,99,117,74,216,112               // vblendvps     %ymm7,%ymm0,%ymm1,%ymm11
  .byte  196,193,100,84,225                  // vandps        %ymm9,%ymm3,%ymm4
  .byte  197,228,87,236                      // vxorps        %ymm4,%ymm3,%ymm5
  .byte  196,227,125,25,238,1                // vextractf128  $0x1,%ymm5,%xmm6
  .byte  197,185,102,254                     // vpcmpgtd      %xmm6,%xmm8,%xmm7
  .byte  197,57,102,197                      // vpcmpgtd      %xmm5,%xmm8,%xmm8
  .byte  196,227,61,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm8,%ymm7
  .byte  197,185,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm8
  .byte  196,227,125,25,228,1                // vextractf128  $0x1,%ymm4,%xmm4
  .byte  197,217,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm4
  .byte  196,227,61,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm8,%ymm4
  .byte  196,193,92,86,226                   // vorps         %ymm10,%ymm4,%ymm4
  .byte  197,201,114,214,13                  // vpsrld        $0xd,%xmm6,%xmm6
  .byte  196,227,125,25,225,1                // vextractf128  $0x1,%ymm4,%xmm1
  .byte  197,241,254,206                     // vpaddd        %xmm6,%xmm1,%xmm1
  .byte  197,209,114,213,13                  // vpsrld        $0xd,%xmm5,%xmm5
  .byte  197,217,254,229                     // vpaddd        %xmm5,%xmm4,%xmm4
  .byte  196,227,93,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm4,%ymm1
  .byte  196,227,117,74,200,112              // vblendvps     %ymm7,%ymm0,%ymm1,%ymm1
  .byte  196,99,125,25,224,1                 // vextractf128  $0x1,%ymm12,%xmm0
  .byte  196,226,25,43,192                   // vpackusdw     %xmm0,%xmm12,%xmm0
  .byte  196,99,125,25,236,1                 // vextractf128  $0x1,%ymm13,%xmm4
  .byte  196,226,17,43,228                   // vpackusdw     %xmm4,%xmm13,%xmm4
  .byte  196,99,125,25,221,1                 // vextractf128  $0x1,%ymm11,%xmm5
  .byte  196,226,33,43,245                   // vpackusdw     %xmm5,%xmm11,%xmm6
  .byte  196,227,125,25,205,1                // vextractf128  $0x1,%ymm1,%xmm5
  .byte  196,226,113,43,205                  // vpackusdw     %xmm5,%xmm1,%xmm1
  .byte  197,249,97,236                      // vpunpcklwd    %xmm4,%xmm0,%xmm5
  .byte  197,249,105,196                     // vpunpckhwd    %xmm4,%xmm0,%xmm0
  .byte  197,201,97,225                      // vpunpcklwd    %xmm1,%xmm6,%xmm4
  .byte  197,201,105,201                     // vpunpckhwd    %xmm1,%xmm6,%xmm1
  .byte  197,81,98,220                       // vpunpckldq    %xmm4,%xmm5,%xmm11
  .byte  197,81,106,212                      // vpunpckhdq    %xmm4,%xmm5,%xmm10
  .byte  197,121,98,201                      // vpunpckldq    %xmm1,%xmm0,%xmm9
  .byte  197,121,106,193                     // vpunpckhdq    %xmm1,%xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,66                              // jne           4bfc <_sk_store_f16_avx+0x25e>
  .byte  197,120,17,28,248                   // vmovups       %xmm11,(%rax,%rdi,8)
  .byte  197,120,17,84,248,16                // vmovups       %xmm10,0x10(%rax,%rdi,8)
  .byte  197,120,17,76,248,32                // vmovups       %xmm9,0x20(%rax,%rdi,8)
  .byte  197,122,127,68,248,48               // vmovdqu       %xmm8,0x30(%rax,%rdi,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,68,36,128                // vmovups       -0x80(%rsp),%ymm0
  .byte  197,252,16,76,36,160                // vmovups       -0x60(%rsp),%ymm1
  .byte  197,252,16,100,36,192               // vmovups       -0x40(%rsp),%ymm4
  .byte  197,252,16,108,36,224               // vmovups       -0x20(%rsp),%ymm5
  .byte  197,252,16,52,36                    // vmovups       (%rsp),%ymm6
  .byte  197,252,16,124,36,32                // vmovups       0x20(%rsp),%ymm7
  .byte  72,131,196,88                       // add           $0x58,%rsp
  .byte  255,224                             // jmpq          *%rax
  .byte  197,121,214,28,248                  // vmovq         %xmm11,(%rax,%rdi,8)
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,202                             // je            4bd1 <_sk_store_f16_avx+0x233>
  .byte  197,121,23,92,248,8                 // vmovhpd       %xmm11,0x8(%rax,%rdi,8)
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,190                             // jb            4bd1 <_sk_store_f16_avx+0x233>
  .byte  197,121,214,84,248,16               // vmovq         %xmm10,0x10(%rax,%rdi,8)
  .byte  116,182                             // je            4bd1 <_sk_store_f16_avx+0x233>
  .byte  197,121,23,84,248,24                // vmovhpd       %xmm10,0x18(%rax,%rdi,8)
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,170                             // jb            4bd1 <_sk_store_f16_avx+0x233>
  .byte  197,121,214,76,248,32               // vmovq         %xmm9,0x20(%rax,%rdi,8)
  .byte  116,162                             // je            4bd1 <_sk_store_f16_avx+0x233>
  .byte  197,121,23,76,248,40                // vmovhpd       %xmm9,0x28(%rax,%rdi,8)
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,150                             // jb            4bd1 <_sk_store_f16_avx+0x233>
  .byte  197,121,214,68,248,48               // vmovq         %xmm8,0x30(%rax,%rdi,8)
  .byte  235,142                             // jmp           4bd1 <_sk_store_f16_avx+0x233>

HIDDEN _sk_load_u16_be_avx
.globl _sk_load_u16_be_avx
FUNCTION(_sk_load_u16_be_avx)
_sk_load_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,141,4,189,0,0,0,0                // lea           0x0(,%rdi,4),%rax
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,253,0,0,0                    // jne           4d56 <_sk_load_u16_be_avx+0x113>
  .byte  196,65,121,16,4,64                  // vmovupd       (%r8,%rax,2),%xmm8
  .byte  196,193,121,16,84,64,16             // vmovupd       0x10(%r8,%rax,2),%xmm2
  .byte  196,193,121,16,92,64,32             // vmovupd       0x20(%r8,%rax,2),%xmm3
  .byte  196,65,122,111,76,64,48             // vmovdqu       0x30(%r8,%rax,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,202                      // vpunpcklwd    %xmm2,%xmm0,%xmm9
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,227                     // vpunpckhwd    %xmm3,%xmm1,%xmm12
  .byte  197,177,108,194                     // vpunpcklqdq   %xmm2,%xmm9,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,193,121,105,202                 // vpunpckhwd    %xmm10,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,29,178,19,0,0         // vbroadcastss  0x13b2(%rip),%ymm11        # 607c <_sk_callback_avx+0x450>
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,177,109,202                     // vpunpckhqdq   %xmm2,%xmm9,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,193,113,105,210                 // vpunpckhwd    %xmm10,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,193,57,108,212                  // vpunpcklqdq   %xmm12,%xmm8,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,193,105,105,218                 // vpunpckhwd    %xmm10,%xmm2,%xmm3
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  196,193,57,109,220                  // vpunpckhqdq   %xmm12,%xmm8,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,65,97,105,194                   // vpunpckhwd    %xmm10,%xmm3,%xmm8
  .byte  196,226,121,51,219                  // vpmovzxwd     %xmm3,%xmm3
  .byte  196,195,101,24,216,1                // vinsertf128   $0x1,%xmm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,219                  // vmulps        %ymm11,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,123,16,4,64                  // vmovsd        (%r8,%rax,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,85                              // je            4dbc <_sk_load_u16_be_avx+0x179>
  .byte  196,65,57,22,68,64,8                // vmovhpd       0x8(%r8,%rax,2),%xmm8,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,72                              // jb            4dbc <_sk_load_u16_be_avx+0x179>
  .byte  196,193,123,16,84,64,16             // vmovsd        0x10(%r8,%rax,2),%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  116,72                              // je            4dc9 <_sk_load_u16_be_avx+0x186>
  .byte  196,193,105,22,84,64,24             // vmovhpd       0x18(%r8,%rax,2),%xmm2,%xmm2
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,59                              // jb            4dc9 <_sk_load_u16_be_avx+0x186>
  .byte  196,193,123,16,92,64,32             // vmovsd        0x20(%r8,%rax,2),%xmm3
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  15,132,213,254,255,255              // je            4c74 <_sk_load_u16_be_avx+0x31>
  .byte  196,193,97,22,92,64,40              // vmovhpd       0x28(%r8,%rax,2),%xmm3,%xmm3
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  15,130,196,254,255,255              // jb            4c74 <_sk_load_u16_be_avx+0x31>
  .byte  196,65,122,126,76,64,48             // vmovq         0x30(%r8,%rax,2),%xmm9
  .byte  233,184,254,255,255                 // jmpq          4c74 <_sk_load_u16_be_avx+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,171,254,255,255                 // jmpq          4c74 <_sk_load_u16_be_avx+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,162,254,255,255                 // jmpq          4c74 <_sk_load_u16_be_avx+0x31>

HIDDEN _sk_load_rgb_u16_be_avx
.globl _sk_load_rgb_u16_be_avx
FUNCTION(_sk_load_rgb_u16_be_avx)
_sk_load_rgb_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,141,4,127                        // lea           (%rdi,%rdi,2),%rax
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,133,243,0,0,0                    // jne           4ed7 <_sk_load_rgb_u16_be_avx+0x105>
  .byte  196,193,122,111,4,64                // vmovdqu       (%r8,%rax,2),%xmm0
  .byte  196,193,122,111,84,64,12            // vmovdqu       0xc(%r8,%rax,2),%xmm2
  .byte  196,193,122,111,76,64,24            // vmovdqu       0x18(%r8,%rax,2),%xmm1
  .byte  196,193,122,111,92,64,32            // vmovdqu       0x20(%r8,%rax,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,211                     // vpunpckhwd    %xmm3,%xmm1,%xmm10
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,65,25,239,228                   // vpxor         %xmm12,%xmm12,%xmm12
  .byte  196,193,121,105,204                 // vpunpckhwd    %xmm12,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,29,18,18,0,0          // vbroadcastss  0x1212(%rip),%ymm11        # 6080 <_sk_callback_avx+0x454>
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,193,113,105,212                 // vpunpckhwd    %xmm12,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,193,49,108,210                  // vpunpcklqdq   %xmm10,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,193,105,105,220                 // vpunpckhwd    %xmm12,%xmm2,%xmm3
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,175,17,0,0        // vbroadcastss  0x11af(%rip),%ymm3        # 6084 <_sk_callback_avx+0x458>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,193,121,110,4,64                // vmovd         (%r8,%rax,2),%xmm0
  .byte  196,193,121,196,68,64,4,2           // vpinsrw       $0x2,0x4(%r8,%rax,2),%xmm0,%xmm0
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  117,5                               // jne           4ef0 <_sk_load_rgb_u16_be_avx+0x11e>
  .byte  233,40,255,255,255                  // jmpq          4e18 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,76,64,6             // vmovd         0x6(%r8,%rax,2),%xmm1
  .byte  196,65,113,196,68,64,10,2           // vpinsrw       $0x2,0xa(%r8,%rax,2),%xmm1,%xmm8
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,26                              // jb            4f1f <_sk_load_rgb_u16_be_avx+0x14d>
  .byte  196,193,121,110,76,64,12            // vmovd         0xc(%r8,%rax,2),%xmm1
  .byte  196,193,113,196,84,64,16,2          // vpinsrw       $0x2,0x10(%r8,%rax,2),%xmm1,%xmm2
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  117,10                              // jne           4f24 <_sk_load_rgb_u16_be_avx+0x152>
  .byte  233,249,254,255,255                 // jmpq          4e18 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,244,254,255,255                 // jmpq          4e18 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,76,64,18            // vmovd         0x12(%r8,%rax,2),%xmm1
  .byte  196,65,113,196,76,64,22,2           // vpinsrw       $0x2,0x16(%r8,%rax,2),%xmm1,%xmm9
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,26                              // jb            4f53 <_sk_load_rgb_u16_be_avx+0x181>
  .byte  196,193,121,110,76,64,24            // vmovd         0x18(%r8,%rax,2),%xmm1
  .byte  196,193,113,196,76,64,28,2          // vpinsrw       $0x2,0x1c(%r8,%rax,2),%xmm1,%xmm1
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  117,10                              // jne           4f58 <_sk_load_rgb_u16_be_avx+0x186>
  .byte  233,197,254,255,255                 // jmpq          4e18 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,192,254,255,255                 // jmpq          4e18 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,92,64,30            // vmovd         0x1e(%r8,%rax,2),%xmm3
  .byte  196,65,97,196,92,64,34,2            // vpinsrw       $0x2,0x22(%r8,%rax,2),%xmm3,%xmm11
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,20                              // jb            4f81 <_sk_load_rgb_u16_be_avx+0x1af>
  .byte  196,193,121,110,92,64,36            // vmovd         0x24(%r8,%rax,2),%xmm3
  .byte  196,193,97,196,92,64,40,2           // vpinsrw       $0x2,0x28(%r8,%rax,2),%xmm3,%xmm3
  .byte  233,151,254,255,255                 // jmpq          4e18 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,146,254,255,255                 // jmpq          4e18 <_sk_load_rgb_u16_be_avx+0x46>

HIDDEN _sk_store_u16_be_avx
.globl _sk_store_u16_be_avx
FUNCTION(_sk_store_u16_be_avx)
_sk_store_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,141,4,189,0,0,0,0                // lea           0x0(,%rdi,4),%rax
  .byte  196,98,125,24,5,236,16,0,0          // vbroadcastss  0x10ec(%rip),%ymm8        # 6088 <_sk_callback_avx+0x45c>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,67,125,25,202,1                 // vextractf128  $0x1,%ymm9,%xmm10
  .byte  196,66,49,43,202                    // vpackusdw     %xmm10,%xmm9,%xmm9
  .byte  196,193,41,113,241,8                // vpsllw        $0x8,%xmm9,%xmm10
  .byte  196,193,49,113,209,8                // vpsrlw        $0x8,%xmm9,%xmm9
  .byte  196,65,41,235,201                   // vpor          %xmm9,%xmm10,%xmm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,67,125,25,211,1                 // vextractf128  $0x1,%ymm10,%xmm11
  .byte  196,66,41,43,211                    // vpackusdw     %xmm11,%xmm10,%xmm10
  .byte  196,193,33,113,242,8                // vpsllw        $0x8,%xmm10,%xmm11
  .byte  196,193,41,113,210,8                // vpsrlw        $0x8,%xmm10,%xmm10
  .byte  196,65,33,235,210                   // vpor          %xmm10,%xmm11,%xmm10
  .byte  196,65,108,89,216                   // vmulps        %ymm8,%ymm2,%ymm11
  .byte  196,65,125,91,219                   // vcvtps2dq     %ymm11,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,66,33,43,220                    // vpackusdw     %xmm12,%xmm11,%xmm11
  .byte  196,193,25,113,243,8                // vpsllw        $0x8,%xmm11,%xmm12
  .byte  196,193,33,113,211,8                // vpsrlw        $0x8,%xmm11,%xmm11
  .byte  196,65,25,235,219                   // vpor          %xmm11,%xmm12,%xmm11
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,196,1                 // vextractf128  $0x1,%ymm8,%xmm12
  .byte  196,66,57,43,196                    // vpackusdw     %xmm12,%xmm8,%xmm8
  .byte  196,193,25,113,240,8                // vpsllw        $0x8,%xmm8,%xmm12
  .byte  196,193,57,113,208,8                // vpsrlw        $0x8,%xmm8,%xmm8
  .byte  196,65,25,235,192                   // vpor          %xmm8,%xmm12,%xmm8
  .byte  196,65,49,97,226                    // vpunpcklwd    %xmm10,%xmm9,%xmm12
  .byte  196,65,49,105,234                   // vpunpckhwd    %xmm10,%xmm9,%xmm13
  .byte  196,65,33,97,200                    // vpunpcklwd    %xmm8,%xmm11,%xmm9
  .byte  196,65,33,105,192                   // vpunpckhwd    %xmm8,%xmm11,%xmm8
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,17,98,200                    // vpunpckldq    %xmm8,%xmm13,%xmm9
  .byte  196,65,17,106,192                   // vpunpckhdq    %xmm8,%xmm13,%xmm8
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,31                              // jne           5080 <_sk_store_u16_be_avx+0xfa>
  .byte  196,65,120,17,28,64                 // vmovups       %xmm11,(%r8,%rax,2)
  .byte  196,65,120,17,84,64,16              // vmovups       %xmm10,0x10(%r8,%rax,2)
  .byte  196,65,120,17,76,64,32              // vmovups       %xmm9,0x20(%r8,%rax,2)
  .byte  196,65,122,127,68,64,48             // vmovdqu       %xmm8,0x30(%r8,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,214,28,64                // vmovq         %xmm11,(%r8,%rax,2)
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,240                             // je            507c <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,92,64,8               // vmovhpd       %xmm11,0x8(%r8,%rax,2)
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,227                             // jb            507c <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,84,64,16             // vmovq         %xmm10,0x10(%r8,%rax,2)
  .byte  116,218                             // je            507c <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,84,64,24              // vmovhpd       %xmm10,0x18(%r8,%rax,2)
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,205                             // jb            507c <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,76,64,32             // vmovq         %xmm9,0x20(%r8,%rax,2)
  .byte  116,196                             // je            507c <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,76,64,40              // vmovhpd       %xmm9,0x28(%r8,%rax,2)
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,183                             // jb            507c <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,68,64,48             // vmovq         %xmm8,0x30(%r8,%rax,2)
  .byte  235,174                             // jmp           507c <_sk_store_u16_be_avx+0xf6>

HIDDEN _sk_load_f32_avx
.globl _sk_load_f32_avx
FUNCTION(_sk_load_f32_avx)
_sk_load_f32_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  119,110                             // ja            5144 <_sk_load_f32_avx+0x76>
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  76,141,12,189,0,0,0,0               // lea           0x0(,%rdi,4),%r9
  .byte  76,141,21,132,0,0,0                 // lea           0x84(%rip),%r10        # 516c <_sk_load_f32_avx+0x9e>
  .byte  73,99,4,138                         // movslq        (%r10,%rcx,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,3,125,24,68,136,112,1           // vinsertf128   $0x1,0x70(%r8,%r9,4),%ymm0,%ymm8
  .byte  196,131,125,24,92,136,96,1          // vinsertf128   $0x1,0x60(%r8,%r9,4),%ymm0,%ymm3
  .byte  196,131,125,24,76,136,80,1          // vinsertf128   $0x1,0x50(%r8,%r9,4),%ymm0,%ymm1
  .byte  196,131,125,24,84,136,64,1          // vinsertf128   $0x1,0x40(%r8,%r9,4),%ymm0,%ymm2
  .byte  196,129,121,16,68,136,48            // vmovupd       0x30(%r8,%r9,4),%xmm0
  .byte  196,195,125,13,192,12               // vblendpd      $0xc,%ymm8,%ymm0,%ymm0
  .byte  196,1,121,16,68,136,32              // vmovupd       0x20(%r8,%r9,4),%xmm8
  .byte  196,99,61,13,203,12                 // vblendpd      $0xc,%ymm3,%ymm8,%ymm9
  .byte  196,129,121,16,92,136,16            // vmovupd       0x10(%r8,%r9,4),%xmm3
  .byte  196,99,101,13,209,12                // vblendpd      $0xc,%ymm1,%ymm3,%ymm10
  .byte  196,129,121,16,12,136               // vmovupd       (%r8,%r9,4),%xmm1
  .byte  196,227,117,13,202,12               // vblendpd      $0xc,%ymm2,%ymm1,%ymm1
  .byte  196,193,116,20,210                  // vunpcklps     %ymm10,%ymm1,%ymm2
  .byte  196,193,116,21,218                  // vunpckhps     %ymm10,%ymm1,%ymm3
  .byte  197,180,20,200                      // vunpcklps     %ymm0,%ymm9,%ymm1
  .byte  197,52,21,192                       // vunpckhps     %ymm0,%ymm9,%ymm8
  .byte  197,237,20,193                      // vunpcklpd     %ymm1,%ymm2,%ymm0
  .byte  197,237,21,201                      // vunpckhpd     %ymm1,%ymm2,%ymm1
  .byte  196,193,101,20,208                  // vunpcklpd     %ymm8,%ymm3,%ymm2
  .byte  196,193,101,21,216                  // vunpckhpd     %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  133,255                             // test          %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  191,255,255,255,178                 // mov           $0xb2ffffff,%edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,165,255,255,255,157             // jmpq          *-0x62000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,149,255,255,255,141             // callq         *-0x72000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_f32_avx
.globl _sk_store_f32_avx
FUNCTION(_sk_store_f32_avx)
_sk_store_f32_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  72,141,4,189,0,0,0,0                // lea           0x0(,%rdi,4),%rax
  .byte  197,124,20,193                      // vunpcklps     %ymm1,%ymm0,%ymm8
  .byte  197,124,21,217                      // vunpckhps     %ymm1,%ymm0,%ymm11
  .byte  197,108,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm9
  .byte  197,108,21,227                      // vunpckhps     %ymm3,%ymm2,%ymm12
  .byte  196,65,61,20,209                    // vunpcklpd     %ymm9,%ymm8,%ymm10
  .byte  196,65,61,21,201                    // vunpckhpd     %ymm9,%ymm8,%ymm9
  .byte  196,65,37,20,196                    // vunpcklpd     %ymm12,%ymm11,%ymm8
  .byte  196,65,37,21,220                    // vunpckhpd     %ymm12,%ymm11,%ymm11
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  117,55                              // jne           51f9 <_sk_store_f32_avx+0x6d>
  .byte  196,67,45,24,225,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm12
  .byte  196,67,61,24,235,1                  // vinsertf128   $0x1,%xmm11,%ymm8,%ymm13
  .byte  196,67,45,6,201,49                  // vperm2f128    $0x31,%ymm9,%ymm10,%ymm9
  .byte  196,67,61,6,195,49                  // vperm2f128    $0x31,%ymm11,%ymm8,%ymm8
  .byte  196,65,125,17,36,128                // vmovupd       %ymm12,(%r8,%rax,4)
  .byte  196,65,125,17,108,128,32            // vmovupd       %ymm13,0x20(%r8,%rax,4)
  .byte  196,65,125,17,76,128,64             // vmovupd       %ymm9,0x40(%r8,%rax,4)
  .byte  196,65,125,17,68,128,96             // vmovupd       %ymm8,0x60(%r8,%rax,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,17,20,128                // vmovupd       %xmm10,(%r8,%rax,4)
  .byte  72,131,249,1                        // cmp           $0x1,%rcx
  .byte  116,240                             // je            51f5 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,76,128,16             // vmovupd       %xmm9,0x10(%r8,%rax,4)
  .byte  72,131,249,3                        // cmp           $0x3,%rcx
  .byte  114,227                             // jb            51f5 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,68,128,32             // vmovupd       %xmm8,0x20(%r8,%rax,4)
  .byte  116,218                             // je            51f5 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,92,128,48             // vmovupd       %xmm11,0x30(%r8,%rax,4)
  .byte  72,131,249,5                        // cmp           $0x5,%rcx
  .byte  114,205                             // jb            51f5 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,84,128,64,1           // vextractf128  $0x1,%ymm10,0x40(%r8,%rax,4)
  .byte  116,195                             // je            51f5 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,76,128,80,1           // vextractf128  $0x1,%ymm9,0x50(%r8,%rax,4)
  .byte  72,131,249,7                        // cmp           $0x7,%rcx
  .byte  114,181                             // jb            51f5 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,68,128,96,1           // vextractf128  $0x1,%ymm8,0x60(%r8,%rax,4)
  .byte  235,171                             // jmp           51f5 <_sk_store_f32_avx+0x69>

HIDDEN _sk_clamp_x_avx
.globl _sk_clamp_x_avx
FUNCTION(_sk_clamp_x_avx)
_sk_clamp_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_avx
.globl _sk_clamp_y_avx
FUNCTION(_sk_clamp_y_avx)
_sk_clamp_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,201                      // vmaxps        %ymm1,%ymm8,%ymm1
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_avx
.globl _sk_repeat_x_avx
FUNCTION(_sk_repeat_x_avx)
_sk_repeat_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,65,124,94,200                   // vdivps        %ymm8,%ymm0,%ymm9
  .byte  196,67,125,8,201,1                  // vroundps      $0x1,%ymm9,%ymm9
  .byte  196,65,52,89,200                    // vmulps        %ymm8,%ymm9,%ymm9
  .byte  196,193,124,92,193                  // vsubps        %ymm9,%ymm0,%ymm0
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_avx
.globl _sk_repeat_y_avx
FUNCTION(_sk_repeat_y_avx)
_sk_repeat_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,65,116,94,200                   // vdivps        %ymm8,%ymm1,%ymm9
  .byte  196,67,125,8,201,1                  // vroundps      $0x1,%ymm9,%ymm9
  .byte  196,65,52,89,200                    // vmulps        %ymm8,%ymm9,%ymm9
  .byte  196,193,116,92,201                  // vsubps        %ymm9,%ymm1,%ymm1
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_avx
.globl _sk_mirror_x_avx
FUNCTION(_sk_mirror_x_avx)
_sk_mirror_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,0                       // vmovd         (%rax),%xmm8
  .byte  196,65,121,112,200,0                // vpshufd       $0x0,%xmm8,%xmm9
  .byte  196,67,53,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm9,%ymm9
  .byte  196,65,124,92,209                   // vsubps        %ymm9,%ymm0,%ymm10
  .byte  196,193,58,88,192                   // vaddss        %xmm8,%xmm8,%xmm0
  .byte  196,227,121,4,192,0                 // vpermilps     $0x0,%xmm0,%xmm0
  .byte  196,227,125,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm0,%ymm0
  .byte  197,44,94,192                       // vdivps        %ymm0,%ymm10,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,172,92,192                      // vsubps        %ymm0,%ymm10,%ymm0
  .byte  196,193,124,92,193                  // vsubps        %ymm9,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,188,84,192                      // vandps        %ymm0,%ymm8,%ymm0
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_avx
.globl _sk_mirror_y_avx
FUNCTION(_sk_mirror_y_avx)
_sk_mirror_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,0                       // vmovd         (%rax),%xmm8
  .byte  196,65,121,112,200,0                // vpshufd       $0x0,%xmm8,%xmm9
  .byte  196,67,53,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm9,%ymm9
  .byte  196,65,116,92,209                   // vsubps        %ymm9,%ymm1,%ymm10
  .byte  196,193,58,88,200                   // vaddss        %xmm8,%xmm8,%xmm1
  .byte  196,227,121,4,201,0                 // vpermilps     $0x0,%xmm1,%xmm1
  .byte  196,227,117,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm1,%ymm1
  .byte  197,44,94,193                       // vdivps        %ymm1,%ymm10,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,172,92,201                      // vsubps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,92,201                  // vsubps        %ymm9,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,193                       // vsubps        %ymm1,%ymm8,%ymm8
  .byte  197,188,84,201                      // vandps        %ymm1,%ymm8,%ymm1
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_avx
.globl _sk_luminance_to_alpha_avx
FUNCTION(_sk_luminance_to_alpha_avx)
_sk_luminance_to_alpha_avx:
  .byte  196,226,125,24,29,19,13,0,0         // vbroadcastss  0xd13(%rip),%ymm3        # 608c <_sk_callback_avx+0x460>
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,29,10,13,0,0         // vbroadcastss  0xd0a(%rip),%ymm3        # 6090 <_sk_callback_avx+0x464>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,253,12,0,0        // vbroadcastss  0xcfd(%rip),%ymm1        # 6094 <_sk_callback_avx+0x468>
  .byte  197,236,89,201                      // vmulps        %ymm1,%ymm2,%ymm1
  .byte  197,252,88,217                      // vaddps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_avx
.globl _sk_matrix_2x3_avx
FUNCTION(_sk_matrix_2x3_avx)
_sk_matrix_2x3_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,8                  // vbroadcastss  0x8(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,12                 // vbroadcastss  0xc(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,252,88,201                      // vaddps        %ymm1,%ymm0,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_avx
.globl _sk_matrix_3x4_avx
FUNCTION(_sk_matrix_3x4_avx)
_sk_matrix_3x4_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,98,125,24,88,36                 // vbroadcastss  0x24(%rax),%ymm11
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,28                 // vbroadcastss  0x1c(%rax),%ymm11
  .byte  196,98,125,24,96,40                 // vbroadcastss  0x28(%rax),%ymm12
  .byte  197,36,89,218                       // vmulps        %ymm2,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  196,98,125,24,104,44                // vbroadcastss  0x2c(%rax),%ymm13
  .byte  197,156,89,210                      // vmulps        %ymm2,%ymm12,%ymm2
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  197,252,88,209                      // vaddps        %ymm1,%ymm0,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_avx
.globl _sk_matrix_4x5_avx
FUNCTION(_sk_matrix_4x5_avx)
_sk_matrix_4x5_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,16                 // vbroadcastss  0x10(%rax),%ymm9
  .byte  196,98,125,24,80,32                 // vbroadcastss  0x20(%rax),%ymm10
  .byte  196,98,125,24,88,48                 // vbroadcastss  0x30(%rax),%ymm11
  .byte  196,98,125,24,96,64                 // vbroadcastss  0x40(%rax),%ymm12
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,98,125,24,88,36                 // vbroadcastss  0x24(%rax),%ymm11
  .byte  196,98,125,24,96,52                 // vbroadcastss  0x34(%rax),%ymm12
  .byte  196,98,125,24,104,68                // vbroadcastss  0x44(%rax),%ymm13
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  197,36,89,218                       // vmulps        %ymm2,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,88,24                 // vbroadcastss  0x18(%rax),%ymm11
  .byte  196,98,125,24,96,40                 // vbroadcastss  0x28(%rax),%ymm12
  .byte  196,98,125,24,104,56                // vbroadcastss  0x38(%rax),%ymm13
  .byte  196,98,125,24,112,72                // vbroadcastss  0x48(%rax),%ymm14
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  197,28,89,226                       // vmulps        %ymm2,%ymm12,%ymm12
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  197,36,89,217                       // vmulps        %ymm1,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,208                       // vmulps        %ymm0,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,88,12                 // vbroadcastss  0xc(%rax),%ymm11
  .byte  196,98,125,24,96,28                 // vbroadcastss  0x1c(%rax),%ymm12
  .byte  196,98,125,24,104,44                // vbroadcastss  0x2c(%rax),%ymm13
  .byte  196,98,125,24,112,60                // vbroadcastss  0x3c(%rax),%ymm14
  .byte  196,98,125,24,120,76                // vbroadcastss  0x4c(%rax),%ymm15
  .byte  197,140,89,219                      // vmulps        %ymm3,%ymm14,%ymm3
  .byte  196,193,100,88,223                  // vaddps        %ymm15,%ymm3,%ymm3
  .byte  197,148,89,210                      // vmulps        %ymm2,%ymm13,%ymm2
  .byte  197,236,88,211                      // vaddps        %ymm3,%ymm2,%ymm2
  .byte  197,156,89,201                      // vmulps        %ymm1,%ymm12,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  197,252,88,217                      // vaddps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_avx
.globl _sk_matrix_perspective_avx
FUNCTION(_sk_matrix_perspective_avx)
_sk_matrix_perspective_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,98,125,24,88,28                 // vbroadcastss  0x1c(%rax),%ymm11
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,204                  // vaddps        %ymm12,%ymm1,%ymm1
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,83,200                      // vrcpps        %ymm0,%ymm1
  .byte  197,188,89,193                      // vmulps        %ymm1,%ymm8,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_avx
.globl _sk_gradient_avx
FUNCTION(_sk_gradient_avx)
_sk_gradient_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,226,125,24,72,20                // vbroadcastss  0x14(%rax),%ymm1
  .byte  196,226,125,24,80,24                // vbroadcastss  0x18(%rax),%ymm2
  .byte  196,226,125,24,88,28                // vbroadcastss  0x1c(%rax),%ymm3
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,132,146,0,0,0                    // je            56ed <_sk_gradient_avx+0xb8>
  .byte  72,139,64,8                         // mov           0x8(%rax),%rax
  .byte  72,131,192,32                       // add           $0x20,%rax
  .byte  196,65,28,87,228                    // vxorps        %ymm12,%ymm12,%ymm12
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  196,65,44,87,210                    // vxorps        %ymm10,%ymm10,%ymm10
  .byte  196,65,36,87,219                    // vxorps        %ymm11,%ymm11,%ymm11
  .byte  196,98,125,24,104,224               // vbroadcastss  -0x20(%rax),%ymm13
  .byte  196,65,124,194,237,1                // vcmpltps      %ymm13,%ymm0,%ymm13
  .byte  196,98,125,24,112,228               // vbroadcastss  -0x1c(%rax),%ymm14
  .byte  196,67,13,74,228,208                // vblendvps     %ymm13,%ymm12,%ymm14,%ymm12
  .byte  196,98,125,24,112,232               // vbroadcastss  -0x18(%rax),%ymm14
  .byte  196,67,13,74,219,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm11
  .byte  196,98,125,24,112,236               // vbroadcastss  -0x14(%rax),%ymm14
  .byte  196,67,13,74,210,208                // vblendvps     %ymm13,%ymm10,%ymm14,%ymm10
  .byte  196,98,125,24,112,240               // vbroadcastss  -0x10(%rax),%ymm14
  .byte  196,67,13,74,201,208                // vblendvps     %ymm13,%ymm9,%ymm14,%ymm9
  .byte  196,98,125,24,112,244               // vbroadcastss  -0xc(%rax),%ymm14
  .byte  196,67,13,74,192,208                // vblendvps     %ymm13,%ymm8,%ymm14,%ymm8
  .byte  196,98,125,24,112,248               // vbroadcastss  -0x8(%rax),%ymm14
  .byte  196,227,13,74,201,208               // vblendvps     %ymm13,%ymm1,%ymm14,%ymm1
  .byte  196,98,125,24,112,252               // vbroadcastss  -0x4(%rax),%ymm14
  .byte  196,227,13,74,210,208               // vblendvps     %ymm13,%ymm2,%ymm14,%ymm2
  .byte  196,98,125,24,48                    // vbroadcastss  (%rax),%ymm14
  .byte  196,227,13,74,219,208               // vblendvps     %ymm13,%ymm3,%ymm14,%ymm3
  .byte  72,131,192,36                       // add           $0x24,%rax
  .byte  73,255,200                          // dec           %r8
  .byte  117,140                             // jne           5677 <_sk_gradient_avx+0x42>
  .byte  235,20                              // jmp           5701 <_sk_gradient_avx+0xcc>
  .byte  196,65,36,87,219                    // vxorps        %ymm11,%ymm11,%ymm11
  .byte  196,65,44,87,210                    // vxorps        %ymm10,%ymm10,%ymm10
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  196,65,28,87,228                    // vxorps        %ymm12,%ymm12,%ymm12
  .byte  197,28,89,224                       // vmulps        %ymm0,%ymm12,%ymm12
  .byte  196,65,60,88,196                    // vaddps        %ymm12,%ymm8,%ymm8
  .byte  197,36,89,216                       // vmulps        %ymm0,%ymm11,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,208                       // vmulps        %ymm0,%ymm10,%ymm10
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,252,88,219                      // vaddps        %ymm3,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_avx
.globl _sk_evenly_spaced_2_stop_gradient_avx
FUNCTION(_sk_evenly_spaced_2_stop_gradient_avx)
_sk_evenly_spaced_2_stop_gradient_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,226,125,24,80,16                // vbroadcastss  0x10(%rax),%ymm2
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,116,88,194                      // vaddps        %ymm2,%ymm1,%ymm8
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,20                // vbroadcastss  0x14(%rax),%ymm2
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,24                // vbroadcastss  0x18(%rax),%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,236,88,211                      // vaddps        %ymm3,%ymm2,%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  196,98,125,24,72,28                 // vbroadcastss  0x1c(%rax),%ymm9
  .byte  197,228,89,192                      // vmulps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,88,217                  // vaddps        %ymm9,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_avx
.globl _sk_xy_to_unit_angle_avx
FUNCTION(_sk_xy_to_unit_angle_avx)
_sk_xy_to_unit_angle_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,200                       // vsubps        %ymm0,%ymm8,%ymm9
  .byte  197,52,84,200                       // vandps        %ymm0,%ymm9,%ymm9
  .byte  197,60,92,209                       // vsubps        %ymm1,%ymm8,%ymm10
  .byte  197,44,84,209                       // vandps        %ymm1,%ymm10,%ymm10
  .byte  196,65,52,93,218                    // vminps        %ymm10,%ymm9,%ymm11
  .byte  196,65,52,95,226                    // vmaxps        %ymm10,%ymm9,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  196,65,36,89,227                    // vmulps        %ymm11,%ymm11,%ymm12
  .byte  196,98,125,24,45,226,8,0,0          // vbroadcastss  0x8e2(%rip),%ymm13        # 6098 <_sk_callback_avx+0x46c>
  .byte  196,65,28,89,237                    // vmulps        %ymm13,%ymm12,%ymm13
  .byte  196,98,125,24,53,216,8,0,0          // vbroadcastss  0x8d8(%rip),%ymm14        # 609c <_sk_callback_avx+0x470>
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  196,65,28,89,237                    // vmulps        %ymm13,%ymm12,%ymm13
  .byte  196,98,125,24,53,201,8,0,0          // vbroadcastss  0x8c9(%rip),%ymm14        # 60a0 <_sk_callback_avx+0x474>
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  196,65,28,89,229                    // vmulps        %ymm13,%ymm12,%ymm12
  .byte  196,98,125,24,45,186,8,0,0          // vbroadcastss  0x8ba(%rip),%ymm13        # 60a4 <_sk_callback_avx+0x478>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,65,52,194,202,1                 // vcmpltps      %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,165,8,0,0          // vbroadcastss  0x8a5(%rip),%ymm10        # 60a8 <_sk_callback_avx+0x47c>
  .byte  196,65,44,92,211                    // vsubps        %ymm11,%ymm10,%ymm10
  .byte  196,67,37,74,202,144                // vblendvps     %ymm9,%ymm10,%ymm11,%ymm9
  .byte  196,193,124,194,192,1               // vcmpltps      %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,21,143,8,0,0          // vbroadcastss  0x88f(%rip),%ymm10        # 60ac <_sk_callback_avx+0x480>
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  196,65,116,194,200,1                // vcmpltps      %ymm8,%ymm1,%ymm9
  .byte  196,98,125,24,21,121,8,0,0          // vbroadcastss  0x879(%rip),%ymm10        # 60b0 <_sk_callback_avx+0x484>
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  196,195,125,74,194,144              // vblendvps     %ymm9,%ymm10,%ymm0,%ymm0
  .byte  196,65,124,194,200,3                // vcmpunordps   %ymm8,%ymm0,%ymm9
  .byte  196,195,125,74,192,144              // vblendvps     %ymm9,%ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_avx
.globl _sk_xy_to_radius_avx
FUNCTION(_sk_xy_to_radius_avx)
_sk_xy_to_radius_avx:
  .byte  197,252,89,192                      // vmulps        %ymm0,%ymm0,%ymm0
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  197,252,82,192                      // vrsqrtps      %ymm0,%ymm0
  .byte  197,252,83,192                      // vrcpps        %ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_avx
.globl _sk_save_xy_avx
FUNCTION(_sk_save_xy_avx)
_sk_save_xy_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,63,8,0,0            // vbroadcastss  0x83f(%rip),%ymm8        # 60b4 <_sk_callback_avx+0x488>
  .byte  196,65,124,88,200                   // vaddps        %ymm8,%ymm0,%ymm9
  .byte  196,67,125,8,209,1                  // vroundps      $0x1,%ymm9,%ymm10
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,88,192                   // vaddps        %ymm8,%ymm1,%ymm8
  .byte  196,67,125,8,208,1                  // vroundps      $0x1,%ymm8,%ymm10
  .byte  196,65,60,92,194                    // vsubps        %ymm10,%ymm8,%ymm8
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,124,17,72,64                    // vmovups       %ymm9,0x40(%rax)
  .byte  197,124,17,64,96                    // vmovups       %ymm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_avx
.globl _sk_accumulate_avx
FUNCTION(_sk_accumulate_avx)
_sk_accumulate_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,16,128,128,0,0,0            // vmovups       0x80(%rax),%ymm8
  .byte  197,60,89,128,160,0,0,0             // vmulps        0xa0(%rax),%ymm8,%ymm8
  .byte  197,60,89,200                       // vmulps        %ymm0,%ymm8,%ymm9
  .byte  197,180,88,228                      // vaddps        %ymm4,%ymm9,%ymm4
  .byte  197,60,89,201                       // vmulps        %ymm1,%ymm8,%ymm9
  .byte  197,180,88,237                      // vaddps        %ymm5,%ymm9,%ymm5
  .byte  197,60,89,202                       // vmulps        %ymm2,%ymm8,%ymm9
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  197,60,89,195                       // vmulps        %ymm3,%ymm8,%ymm8
  .byte  197,188,88,255                      // vaddps        %ymm7,%ymm8,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_avx
.globl _sk_bilinear_nx_avx
FUNCTION(_sk_bilinear_nx_avx)
_sk_bilinear_nx_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,203,7,0,0          // vbroadcastss  0x7cb(%rip),%ymm0        # 60b8 <_sk_callback_avx+0x48c>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,194,7,0,0           // vbroadcastss  0x7c2(%rip),%ymm8        # 60bc <_sk_callback_avx+0x490>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_avx
.globl _sk_bilinear_px_avx
FUNCTION(_sk_bilinear_px_avx)
_sk_bilinear_px_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,170,7,0,0          // vbroadcastss  0x7aa(%rip),%ymm0        # 60c0 <_sk_callback_avx+0x494>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_avx
.globl _sk_bilinear_ny_avx
FUNCTION(_sk_bilinear_ny_avx)
_sk_bilinear_ny_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,142,7,0,0         // vbroadcastss  0x78e(%rip),%ymm1        # 60c4 <_sk_callback_avx+0x498>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,132,7,0,0           // vbroadcastss  0x784(%rip),%ymm8        # 60c8 <_sk_callback_avx+0x49c>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_avx
.globl _sk_bilinear_py_avx
FUNCTION(_sk_bilinear_py_avx)
_sk_bilinear_py_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,108,7,0,0         // vbroadcastss  0x76c(%rip),%ymm1        # 60cc <_sk_callback_avx+0x4a0>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_avx
.globl _sk_bicubic_n3x_avx
FUNCTION(_sk_bicubic_n3x_avx)
_sk_bicubic_n3x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,79,7,0,0           // vbroadcastss  0x74f(%rip),%ymm0        # 60d0 <_sk_callback_avx+0x4a4>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,70,7,0,0            // vbroadcastss  0x746(%rip),%ymm8        # 60d4 <_sk_callback_avx+0x4a8>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,55,7,0,0           // vbroadcastss  0x737(%rip),%ymm10        # 60d8 <_sk_callback_avx+0x4ac>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,45,7,0,0           // vbroadcastss  0x72d(%rip),%ymm10        # 60dc <_sk_callback_avx+0x4b0>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_avx
.globl _sk_bicubic_n1x_avx
FUNCTION(_sk_bicubic_n1x_avx)
_sk_bicubic_n1x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,16,7,0,0           // vbroadcastss  0x710(%rip),%ymm0        # 60e0 <_sk_callback_avx+0x4b4>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,7,7,0,0             // vbroadcastss  0x707(%rip),%ymm8        # 60e4 <_sk_callback_avx+0x4b8>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,253,6,0,0          // vbroadcastss  0x6fd(%rip),%ymm9        # 60e8 <_sk_callback_avx+0x4bc>
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,243,6,0,0          // vbroadcastss  0x6f3(%rip),%ymm10        # 60ec <_sk_callback_avx+0x4c0>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,228,6,0,0          // vbroadcastss  0x6e4(%rip),%ymm10        # 60f0 <_sk_callback_avx+0x4c4>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,213,6,0,0          // vbroadcastss  0x6d5(%rip),%ymm9        # 60f4 <_sk_callback_avx+0x4c8>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_avx
.globl _sk_bicubic_p1x_avx
FUNCTION(_sk_bicubic_p1x_avx)
_sk_bicubic_p1x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,189,6,0,0           // vbroadcastss  0x6bd(%rip),%ymm8        # 60f8 <_sk_callback_avx+0x4cc>
  .byte  197,188,88,0                        // vaddps        (%rax),%ymm8,%ymm0
  .byte  197,124,16,72,64                    // vmovups       0x40(%rax),%ymm9
  .byte  196,98,125,24,21,175,6,0,0          // vbroadcastss  0x6af(%rip),%ymm10        # 60fc <_sk_callback_avx+0x4d0>
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,98,125,24,29,165,6,0,0          // vbroadcastss  0x6a5(%rip),%ymm11        # 6100 <_sk_callback_avx+0x4d4>
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,192                    // vaddps        %ymm8,%ymm10,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  196,98,125,24,13,140,6,0,0          // vbroadcastss  0x68c(%rip),%ymm9        # 6104 <_sk_callback_avx+0x4d8>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_avx
.globl _sk_bicubic_p3x_avx
FUNCTION(_sk_bicubic_p3x_avx)
_sk_bicubic_p3x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,116,6,0,0          // vbroadcastss  0x674(%rip),%ymm0        # 6108 <_sk_callback_avx+0x4dc>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,97,6,0,0           // vbroadcastss  0x661(%rip),%ymm10        # 610c <_sk_callback_avx+0x4e0>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,87,6,0,0           // vbroadcastss  0x657(%rip),%ymm10        # 6110 <_sk_callback_avx+0x4e4>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_avx
.globl _sk_bicubic_n3y_avx
FUNCTION(_sk_bicubic_n3y_avx)
_sk_bicubic_n3y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,58,6,0,0          // vbroadcastss  0x63a(%rip),%ymm1        # 6114 <_sk_callback_avx+0x4e8>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,48,6,0,0            // vbroadcastss  0x630(%rip),%ymm8        # 6118 <_sk_callback_avx+0x4ec>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,33,6,0,0           // vbroadcastss  0x621(%rip),%ymm10        # 611c <_sk_callback_avx+0x4f0>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,23,6,0,0           // vbroadcastss  0x617(%rip),%ymm10        # 6120 <_sk_callback_avx+0x4f4>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_avx
.globl _sk_bicubic_n1y_avx
FUNCTION(_sk_bicubic_n1y_avx)
_sk_bicubic_n1y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,250,5,0,0         // vbroadcastss  0x5fa(%rip),%ymm1        # 6124 <_sk_callback_avx+0x4f8>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,240,5,0,0           // vbroadcastss  0x5f0(%rip),%ymm8        # 6128 <_sk_callback_avx+0x4fc>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,230,5,0,0          // vbroadcastss  0x5e6(%rip),%ymm9        # 612c <_sk_callback_avx+0x500>
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,220,5,0,0          // vbroadcastss  0x5dc(%rip),%ymm10        # 6130 <_sk_callback_avx+0x504>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,205,5,0,0          // vbroadcastss  0x5cd(%rip),%ymm10        # 6134 <_sk_callback_avx+0x508>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,190,5,0,0          // vbroadcastss  0x5be(%rip),%ymm9        # 6138 <_sk_callback_avx+0x50c>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_avx
.globl _sk_bicubic_p1y_avx
FUNCTION(_sk_bicubic_p1y_avx)
_sk_bicubic_p1y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,166,5,0,0           // vbroadcastss  0x5a6(%rip),%ymm8        # 613c <_sk_callback_avx+0x510>
  .byte  197,188,88,72,32                    // vaddps        0x20(%rax),%ymm8,%ymm1
  .byte  197,124,16,72,96                    // vmovups       0x60(%rax),%ymm9
  .byte  196,98,125,24,21,151,5,0,0          // vbroadcastss  0x597(%rip),%ymm10        # 6140 <_sk_callback_avx+0x514>
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,98,125,24,29,141,5,0,0          // vbroadcastss  0x58d(%rip),%ymm11        # 6144 <_sk_callback_avx+0x518>
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,192                    // vaddps        %ymm8,%ymm10,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  196,98,125,24,13,116,5,0,0          // vbroadcastss  0x574(%rip),%ymm9        # 6148 <_sk_callback_avx+0x51c>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_avx
.globl _sk_bicubic_p3y_avx
FUNCTION(_sk_bicubic_p3y_avx)
_sk_bicubic_p3y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,92,5,0,0          // vbroadcastss  0x55c(%rip),%ymm1        # 614c <_sk_callback_avx+0x520>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,72,5,0,0           // vbroadcastss  0x548(%rip),%ymm10        # 6150 <_sk_callback_avx+0x524>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,62,5,0,0           // vbroadcastss  0x53e(%rip),%ymm10        # 6154 <_sk_callback_avx+0x528>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_avx
.globl _sk_callback_avx
FUNCTION(_sk_callback_avx)
_sk_callback_avx:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,129,236,144,0,0,0                // sub           $0x90,%rsp
  .byte  197,252,17,124,36,96                // vmovups       %ymm7,0x60(%rsp)
  .byte  197,252,17,116,36,64                // vmovups       %ymm6,0x40(%rsp)
  .byte  197,252,17,108,36,32                // vmovups       %ymm5,0x20(%rsp)
  .byte  197,252,17,36,36                    // vmovups       %ymm4,(%rsp)
  .byte  73,137,205                          // mov           %rcx,%r13
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  73,137,255                          // mov           %rdi,%r15
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,137,195                          // mov           %rax,%rbx
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,193                      // vunpckhps     %ymm1,%ymm0,%ymm0
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,211                      // vunpckhps     %ymm3,%ymm2,%ymm2
  .byte  197,221,20,217                      // vunpcklpd     %ymm1,%ymm4,%ymm3
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,253,20,226                      // vunpcklpd     %ymm2,%ymm0,%ymm4
  .byte  197,253,21,194                      // vunpckhpd     %ymm2,%ymm0,%ymm0
  .byte  196,227,101,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm2
  .byte  196,227,93,24,232,1                 // vinsertf128   $0x1,%xmm0,%ymm4,%ymm5
  .byte  196,227,101,6,201,49                // vperm2f128    $0x31,%ymm1,%ymm3,%ymm1
  .byte  196,227,93,6,192,49                 // vperm2f128    $0x31,%ymm0,%ymm4,%ymm0
  .byte  197,253,17,83,8                     // vmovupd       %ymm2,0x8(%rbx)
  .byte  197,253,17,107,40                   // vmovupd       %ymm5,0x28(%rbx)
  .byte  197,253,17,75,72                    // vmovupd       %ymm1,0x48(%rbx)
  .byte  197,253,17,67,104                   // vmovupd       %ymm0,0x68(%rbx)
  .byte  77,133,237                          // test          %r13,%r13
  .byte  190,8,0,0,0                         // mov           $0x8,%esi
  .byte  65,15,69,245                        // cmovne        %r13d,%esi
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  197,248,119                         // vzeroupper
  .byte  255,19                              // callq         *(%rbx)
  .byte  72,139,131,136,0,0,0                // mov           0x88(%rbx),%rax
  .byte  197,248,16,0                        // vmovups       (%rax),%xmm0
  .byte  197,248,16,72,16                    // vmovups       0x10(%rax),%xmm1
  .byte  197,248,16,80,32                    // vmovups       0x20(%rax),%xmm2
  .byte  197,248,16,88,48                    // vmovups       0x30(%rax),%xmm3
  .byte  196,227,101,24,88,112,1             // vinsertf128   $0x1,0x70(%rax),%ymm3,%ymm3
  .byte  196,227,109,24,80,96,1              // vinsertf128   $0x1,0x60(%rax),%ymm2,%ymm2
  .byte  196,227,117,24,72,80,1              // vinsertf128   $0x1,0x50(%rax),%ymm1,%ymm1
  .byte  196,227,125,24,64,64,1              // vinsertf128   $0x1,0x40(%rax),%ymm0,%ymm0
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,233                      // vunpckhps     %ymm1,%ymm0,%ymm5
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,219                      // vunpckhps     %ymm3,%ymm2,%ymm3
  .byte  197,221,20,193                      // vunpcklpd     %ymm1,%ymm4,%ymm0
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,213,20,211                      // vunpcklpd     %ymm3,%ymm5,%ymm2
  .byte  197,213,21,219                      // vunpckhpd     %ymm3,%ymm5,%ymm3
  .byte  76,137,230                          // mov           %r12,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,255                          // mov           %r15,%rdi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  76,137,233                          // mov           %r13,%rcx
  .byte  197,252,16,36,36                    // vmovups       (%rsp),%ymm4
  .byte  197,252,16,108,36,32                // vmovups       0x20(%rsp),%ymm5
  .byte  197,252,16,116,36,64                // vmovups       0x40(%rsp),%ymm6
  .byte  197,252,16,124,36,96                // vmovups       0x60(%rsp),%ymm7
  .byte  72,129,196,144,0,0,0                // add           $0x90,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,128,63                      // mov           $0x3f800000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,224                   // add           %al,-0x1fffff41(%rax)
  .byte  64,154                              // rex           (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 5e05 <.literal4+0xb1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 5e15 <.literal4+0xc1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 5e25 <.literal4+0xd1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 5e35 <.literal4+0xe1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,145                          // cmpb          $0x91,(%rdi)
  .byte  131,158,61,154,153,153,62           // sbbl          $0x3e,-0x666665c3(%rsi)
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,41,92,71,65                      // cmp           $0x41475c29,%eax
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  168,87                              // test          $0x57,%al
  .byte  202,189,194                         // lret          $0xc2bd
  .byte  135,210                             // xchg          %edx,%edx
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,63,4                            // cmpb          $0x4,(%rdi)
  .byte  231,140                             // out           %eax,$0x8c
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,128,64,171,170,42                 // add           %al,0x2aaaab40(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,129,128,128,59                  // mov           $0x3b808081,%esi
  .byte  129,128,128,59,0,248,0,0,8,33       // addl          $0x21080000,-0x7ffc480(%rax)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5e81 <.literal4+0x12d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,129,128,128,59              // and           %eax,0x3b808081(,%rdi,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  0,52,255                            // add           %dh,(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5ea8 <.literal4+0x154>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5f21 <.literal4+0x1cd>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5edc <.literal4+0x188>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5f55 <.literal4+0x201>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5f10 <.literal4+0x1bc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5f89 <.literal4+0x235>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5f44 <.literal4+0x1f0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5fbd <.literal4+0x269>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,200                    // add           %al,-0x37ffffc1(%rax)
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  127,67                              // jg            5fbb <.literal4+0x267>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,203,61,13       // movabs        %eax,0xd3dcb3c1118c23b
  .byte  190,80,128,3,62                     // mov           $0x3e038050,%esi
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           5fdb <.literal4+0x287>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  127,67                              // jg            5fef <.literal4+0x29b>
  .byte  129,128,128,59,0,0,128,63,129,128   // addl          $0x80813f80,0x3b80(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,128,63,129,128,128                // add           %al,-0x7f7f7ec1(%rax)
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5fd1 <.literal4+0x27d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5fed <.literal4+0x299>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            6042 <.literal4+0x2ee>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,240                // mov           %ecx,-0xfffc278(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,0                  // mov           %ecx,0x3d88(%rax)
  .byte  112,65                              // jo            6085 <.literal4+0x331>
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  127,67                              // jg            6093 <.literal4+0x33f>
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,128,56                    // add           %al,0x38800000(%rax)
  .byte  0,64,254                            // add           %al,-0x2(%rax)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,0,0,128                    // add           %al,-0x7fffffc9(%rax)
  .byte  63                                  // (bad)
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            60d3 <.literal4+0x37f>
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,111,43,231               // fstl          -0x18d490c3(%rbx)
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,169,240,34,62                   // mov           $0x3e22f0a9,%ebp
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,114              // sarb          $0x72,0x3f800000(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,0,191                       // mov           $0xbf000000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,114                          // sarb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,192,191                     // mov           $0xbfc00000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,0,191                       // mov           $0xbf000000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,114                          // sarb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190                                 // .byte         0xbe

BALIGN32
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)

BALIGN16
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
BALIGN32

HIDDEN _sk_start_pipeline_sse41
.globl _sk_start_pipeline_sse41
FUNCTION(_sk_start_pipeline_sse41)
_sk_start_pipeline_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  73,137,207                          // mov           %rcx,%r15
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,196                          // mov           %rax,%r12
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  72,141,67,4                         // lea           0x4(%rbx),%rax
  .byte  76,57,248                           // cmp           %r15,%rax
  .byte  118,5                               // jbe           28 <_sk_start_pipeline_sse41+0x28>
  .byte  72,137,216                          // mov           %rbx,%rax
  .byte  235,52                              // jmp           5c <_sk_start_pipeline_sse41+0x5c>
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  65,255,212                          // callq         *%r12
  .byte  72,141,67,4                         // lea           0x4(%rbx),%rax
  .byte  72,131,195,8                        // add           $0x8,%rbx
  .byte  76,57,251                           // cmp           %r15,%rbx
  .byte  72,137,195                          // mov           %rax,%rbx
  .byte  118,204                             // jbe           28 <_sk_start_pipeline_sse41+0x28>
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  195                                 // retq

HIDDEN _sk_just_return_sse41
.globl _sk_just_return_sse41
FUNCTION(_sk_just_return_sse41)
_sk_just_return_sse41:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_sse41
.globl _sk_seed_shader_sse41
FUNCTION(_sk_seed_shader_sse41)
_sk_seed_shader_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,15,110,199                      // movd          %edi,%xmm0
  .byte  102,15,112,192,0                    // pshufd        $0x0,%xmm0,%xmm0
  .byte  15,91,200                           // cvtdq2ps      %xmm0,%xmm1
  .byte  15,40,21,4,68,0,0                   // movaps        0x4404(%rip),%xmm2        # 4480 <_sk_callback_sse41+0xdc>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,16,2                             // movups        (%rdx),%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  102,15,110,8                        // movd          (%rax),%xmm1
  .byte  102,15,112,201,0                    // pshufd        $0x0,%xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,21,243,67,0,0                 // movaps        0x43f3(%rip),%xmm2        # 4490 <_sk_callback_sse41+0xec>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_sse41
.globl _sk_dither_sse41
FUNCTION(_sk_dither_sse41)
_sk_dither_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,68,15,110,199                   // movd          %edi,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,16,10                         // movups        (%rdx),%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  243,69,15,91,201                    // cvttps2dq     %xmm9,%xmm9
  .byte  72,139,8                            // mov           (%rax),%rcx
  .byte  102,68,15,110,1                     // movd          (%rcx),%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,68,15,111,21,184,67,0,0         // movdqa        0x43b8(%rip),%xmm10        # 44a0 <_sk_callback_sse41+0xfc>
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,65,15,114,243,5                 // pslld         $0x5,%xmm11
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,65,15,114,242,4                 // pslld         $0x4,%xmm10
  .byte  102,68,15,111,37,164,67,0,0         // movdqa        0x43a4(%rip),%xmm12        # 44b0 <_sk_callback_sse41+0x10c>
  .byte  102,68,15,111,45,171,67,0,0         // movdqa        0x43ab(%rip),%xmm13        # 44c0 <_sk_callback_sse41+0x11c>
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,69,15,219,245                   // pand          %xmm13,%xmm14
  .byte  102,65,15,114,246,2                 // pslld         $0x2,%xmm14
  .byte  102,69,15,219,233                   // pand          %xmm9,%xmm13
  .byte  102,69,15,254,237                   // paddd         %xmm13,%xmm13
  .byte  102,69,15,219,196                   // pand          %xmm12,%xmm8
  .byte  102,65,15,114,208,1                 // psrld         $0x1,%xmm8
  .byte  102,69,15,219,204                   // pand          %xmm12,%xmm9
  .byte  102,65,15,114,209,2                 // psrld         $0x2,%xmm9
  .byte  102,69,15,235,234                   // por           %xmm10,%xmm13
  .byte  102,69,15,235,233                   // por           %xmm9,%xmm13
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,235,245                   // por           %xmm13,%xmm14
  .byte  102,69,15,235,240                   // por           %xmm8,%xmm14
  .byte  69,15,91,198                        // cvtdq2ps      %xmm14,%xmm8
  .byte  68,15,89,5,102,67,0,0               // mulps         0x4366(%rip),%xmm8        # 44d0 <_sk_callback_sse41+0x12c>
  .byte  68,15,88,5,110,67,0,0               // addps         0x436e(%rip),%xmm8        # 44e0 <_sk_callback_sse41+0x13c>
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_sse41
.globl _sk_constant_color_sse41
FUNCTION(_sk_constant_color_sse41)
_sk_constant_color_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_sse41
.globl _sk_clear_sse41
FUNCTION(_sk_clear_sse41)
_sk_clear_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_sse41
.globl _sk_srcatop_sse41
FUNCTION(_sk_srcatop_sse41)
_sk_srcatop_sse41:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  68,15,40,5,27,67,0,0                // movaps        0x431b(%rip),%xmm8        # 44f0 <_sk_callback_sse41+0x14c>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_sse41
.globl _sk_dstatop_sse41
FUNCTION(_sk_dstatop_sse41)
_sk_dstatop_sse41:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,40,13,222,66,0,0              // movaps        0x42de(%rip),%xmm9        # 4500 <_sk_callback_sse41+0x15c>
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_sse41
.globl _sk_srcin_sse41
FUNCTION(_sk_srcin_sse41)
_sk_srcin_sse41:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_sse41
.globl _sk_dstin_sse41
FUNCTION(_sk_dstin_sse41)
_sk_dstin_sse41:
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_sse41
.globl _sk_srcout_sse41
FUNCTION(_sk_srcout_sse41)
_sk_srcout_sse41:
  .byte  68,15,40,5,130,66,0,0               // movaps        0x4282(%rip),%xmm8        # 4510 <_sk_callback_sse41+0x16c>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_sse41
.globl _sk_dstout_sse41
FUNCTION(_sk_dstout_sse41)
_sk_dstout_sse41:
  .byte  68,15,40,5,114,66,0,0               // movaps        0x4272(%rip),%xmm8        # 4520 <_sk_callback_sse41+0x17c>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_sse41
.globl _sk_srcover_sse41
FUNCTION(_sk_srcover_sse41)
_sk_srcover_sse41:
  .byte  68,15,40,5,85,66,0,0                // movaps        0x4255(%rip),%xmm8        # 4530 <_sk_callback_sse41+0x18c>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_sse41
.globl _sk_dstover_sse41
FUNCTION(_sk_dstover_sse41)
_sk_dstover_sse41:
  .byte  68,15,40,5,41,66,0,0                // movaps        0x4229(%rip),%xmm8        # 4540 <_sk_callback_sse41+0x19c>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_sse41
.globl _sk_modulate_sse41
FUNCTION(_sk_modulate_sse41)
_sk_modulate_sse41:
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_sse41
.globl _sk_multiply_sse41
FUNCTION(_sk_multiply_sse41)
_sk_multiply_sse41:
  .byte  68,15,40,5,253,65,0,0               // movaps        0x41fd(%rip),%xmm8        # 4550 <_sk_callback_sse41+0x1ac>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,221                        // mulps         %xmm5,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__sse41
.globl _sk_plus__sse41
FUNCTION(_sk_plus__sse41)
_sk_plus__sse41:
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_sse41
.globl _sk_screen_sse41
FUNCTION(_sk_screen_sse41)
_sk_screen_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,88,196                        // addps         %xmm4,%xmm8
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,88,205                        // addps         %xmm5,%xmm9
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,201                        // subps         %xmm1,%xmm9
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  68,15,88,214                        // addps         %xmm6,%xmm10
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,92,210                        // subps         %xmm2,%xmm10
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  68,15,88,223                        // addps         %xmm7,%xmm11
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__sse41
.globl _sk_xor__sse41
FUNCTION(_sk_xor__sse41)
_sk_xor__sse41:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,40,29,46,65,0,0                  // movaps        0x412e(%rip),%xmm3        # 4560 <_sk_callback_sse41+0x1bc>
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_sse41
.globl _sk_darken_sse41
FUNCTION(_sk_darken_sse41)
_sk_darken_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,95,209                        // maxps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,153,64,0,0                 // movaps        0x4099(%rip),%xmm2        # 4570 <_sk_callback_sse41+0x1cc>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_sse41
.globl _sk_lighten_sse41
FUNCTION(_sk_lighten_sse41)
_sk_lighten_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,62,64,0,0                  // movaps        0x403e(%rip),%xmm2        # 4580 <_sk_callback_sse41+0x1dc>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_sse41
.globl _sk_difference_sse41
FUNCTION(_sk_difference_sse41)
_sk_difference_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,216,63,0,0                 // movaps        0x3fd8(%rip),%xmm2        # 4590 <_sk_callback_sse41+0x1ec>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_sse41
.globl _sk_exclusion_sse41
FUNCTION(_sk_exclusion_sse41)
_sk_exclusion_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  15,40,13,153,63,0,0                 // movaps        0x3f99(%rip),%xmm1        # 45a0 <_sk_callback_sse41+0x1fc>
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_sse41
.globl _sk_colorburn_sse41
FUNCTION(_sk_colorburn_sse41)
_sk_colorburn_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,136,63,0,0              // movaps        0x3f88(%rip),%xmm10        # 45b0 <_sk_callback_sse41+0x20c>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,94,192                        // divps         %xmm8,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  68,15,88,228                        // addps         %xmm4,%xmm12
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  102,69,15,56,20,232                 // blendvps      %xmm0,%xmm8,%xmm13
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  102,69,15,56,20,196                 // blendvps      %xmm0,%xmm12,%xmm8
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,197                           // subps         %xmm5,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,94,193                           // divps         %xmm1,%xmm0
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,93,232                        // minps         %xmm0,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  68,15,88,229                        // addps         %xmm5,%xmm12
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  102,65,15,56,20,204                 // blendvps      %xmm0,%xmm12,%xmm1
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,94,194                           // divps         %xmm2,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,194,202,0                     // cmpeqps       %xmm2,%xmm9
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_sse41
.globl _sk_colordodge_sse41
FUNCTION(_sk_colordodge_sse41)
_sk_colordodge_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,102,62,0,0              // movaps        0x3e66(%rip),%xmm10        # 45c0 <_sk_callback_sse41+0x21c>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,224                        // mulps         %xmm8,%xmm12
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,94,200                        // divps         %xmm0,%xmm9
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  69,15,93,241                        // minps         %xmm9,%xmm14
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  102,69,15,56,20,240                 // blendvps      %xmm0,%xmm8,%xmm14
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,88,228                        // addps         %xmm4,%xmm12
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  69,15,88,198                        // addps         %xmm14,%xmm8
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  102,69,15,56,20,196                 // blendvps      %xmm0,%xmm12,%xmm8
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,229                        // mulps         %xmm5,%xmm12
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,94,224                        // divps         %xmm0,%xmm12
  .byte  69,15,40,243                        // movaps        %xmm11,%xmm14
  .byte  68,15,89,241                        // mulps         %xmm1,%xmm14
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  102,68,15,56,20,233                 // blendvps      %xmm0,%xmm1,%xmm13
  .byte  68,15,88,245                        // addps         %xmm5,%xmm14
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  102,65,15,56,20,206                 // blendvps      %xmm0,%xmm14,%xmm1
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  68,15,94,224                        // divps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  68,15,194,206,0                     // cmpeqps       %xmm6,%xmm9
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_sse41
.globl _sk_hardlight_sse41
FUNCTION(_sk_hardlight_sse41)
_sk_hardlight_sse41:
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,40,21,63,61,0,0               // movaps        0x3d3f(%rip),%xmm10        # 45d0 <_sk_callback_sse41+0x22c>
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  15,92,239                           // subps         %xmm7,%xmm5
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  68,15,92,212                        // subps         %xmm4,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  68,15,40,252                        // movaps        %xmm4,%xmm15
  .byte  69,15,92,249                        // subps         %xmm9,%xmm15
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  65,15,89,199                        // mulps         %xmm15,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  68,15,40,251                        // movaps        %xmm3,%xmm15
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  102,69,15,56,20,249                 // blendvps      %xmm0,%xmm9,%xmm15
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  69,15,40,204                        // movaps        %xmm12,%xmm9
  .byte  69,15,92,233                        // subps         %xmm9,%xmm13
  .byte  68,15,89,232                        // mulps         %xmm0,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  69,15,88,199                        // addps         %xmm15,%xmm8
  .byte  65,15,89,205                        // mulps         %xmm13,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  68,15,40,92,36,232                  // movaps        -0x18(%rsp),%xmm11
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  68,15,88,205                        // addps         %xmm5,%xmm9
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,92,234                           // subps         %xmm2,%xmm5
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  68,15,89,245                        // mulps         %xmm5,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  65,15,92,222                        // subps         %xmm14,%xmm3
  .byte  102,15,56,20,218                    // blendvps      %xmm0,%xmm2,%xmm3
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  65,15,88,226                        // addps         %xmm10,%xmm4
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  65,15,40,237                        // movaps        %xmm13,%xmm5
  .byte  65,15,40,243                        // movaps        %xmm11,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_sse41
.globl _sk_overlay_sse41
FUNCTION(_sk_overlay_sse41)
_sk_overlay_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  68,15,40,21,36,60,0,0               // movaps        0x3c24(%rip),%xmm10        # 45e0 <_sk_callback_sse41+0x23c>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  68,15,40,235                        // movaps        %xmm3,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,231                        // mulps         %xmm7,%xmm12
  .byte  65,15,89,205                        // mulps         %xmm13,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  68,15,92,233                        // subps         %xmm1,%xmm13
  .byte  102,69,15,56,20,238                 // blendvps      %xmm0,%xmm14,%xmm13
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  68,15,40,235                        // movaps        %xmm3,%xmm13
  .byte  69,15,92,233                        // subps         %xmm9,%xmm13
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,92,245                        // subps         %xmm5,%xmm14
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  102,69,15,56,20,233                 // blendvps      %xmm0,%xmm9,%xmm13
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  68,15,92,218                        // subps         %xmm2,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,92,238                        // subps         %xmm6,%xmm13
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  102,68,15,56,20,226                 // blendvps      %xmm0,%xmm2,%xmm12
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_sse41
.globl _sk_softlight_sse41
FUNCTION(_sk_softlight_sse41)
_sk_softlight_sse41:
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,41,76,36,200                     // movaps        %xmm1,-0x38(%rsp)
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,207,1                     // cmpltps       %xmm7,%xmm9
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,94,199                           // divps         %xmm7,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  15,40,13,251,58,0,0                 // movaps        0x3afb(%rip),%xmm1        # 45f0 <_sk_callback_sse41+0x24c>
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,92,208                        // subps         %xmm0,%xmm10
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  68,15,40,248                        // movaps        %xmm0,%xmm15
  .byte  15,82,208                           // rsqrtps       %xmm0,%xmm2
  .byte  68,15,83,218                        // rcpps         %xmm2,%xmm11
  .byte  68,15,92,216                        // subps         %xmm0,%xmm11
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,40,45,217,58,0,0              // movaps        0x3ad9(%rip),%xmm13        # 4600 <_sk_callback_sse41+0x25c>
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  68,15,89,242                        // mulps         %xmm2,%xmm14
  .byte  68,15,40,37,217,58,0,0              // movaps        0x3ad9(%rip),%xmm12        # 4610 <_sk_callback_sse41+0x26c>
  .byte  69,15,89,252                        // mulps         %xmm12,%xmm15
  .byte  69,15,88,254                        // addps         %xmm14,%xmm15
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,69,15,56,20,223                 // blendvps      %xmm0,%xmm15,%xmm11
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,88,211                        // addps         %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,69,15,56,20,218                 // blendvps      %xmm0,%xmm10,%xmm11
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,88,197                        // addps         %xmm13,%xmm0
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  65,15,82,194                        // rsqrtps       %xmm10,%xmm0
  .byte  68,15,83,240                        // rcpps         %xmm0,%xmm14
  .byte  69,15,92,242                        // subps         %xmm10,%xmm14
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,68,15,56,20,242                 // blendvps      %xmm0,%xmm2,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  69,15,92,250                        // subps         %xmm10,%xmm15
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  68,15,89,250                        // mulps         %xmm2,%xmm15
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,242                        // mulps         %xmm2,%xmm14
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,242                        // addps         %xmm2,%xmm14
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,252                        // mulps         %xmm4,%xmm15
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,69,15,56,20,247                 // blendvps      %xmm0,%xmm15,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  15,40,100,36,216                    // movaps        -0x28(%rsp),%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,94,199                           // divps         %xmm7,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,82,208                           // rsqrtps       %xmm0,%xmm2
  .byte  68,15,83,202                        // rcpps         %xmm2,%xmm9
  .byte  68,15,92,200                        // subps         %xmm0,%xmm9
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,69,15,56,20,204                 // blendvps      %xmm0,%xmm12,%xmm9
  .byte  68,15,40,100,36,232                 // movaps        -0x18(%rsp),%xmm12
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,68,15,56,20,201                 // blendvps      %xmm0,%xmm1,%xmm9
  .byte  68,15,92,255                        // subps         %xmm7,%xmm15
  .byte  69,15,89,199                        // mulps         %xmm15,%xmm8
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  69,15,89,252                        // mulps         %xmm12,%xmm15
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  69,15,88,195                        // addps         %xmm11,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,40,108,36,184                    // movaps        -0x48(%rsp),%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_sse41
.globl _sk_hue_sse41
FUNCTION(_sk_hue_sse41)
_sk_hue_sse41:
  .byte  15,41,124,36,152                    // movaps        %xmm7,-0x68(%rsp)
  .byte  68,15,40,246                        // movaps        %xmm6,%xmm14
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,41,76,36,216                     // movaps        %xmm1,-0x28(%rsp)
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,41,84,36,200                  // movaps        %xmm10,-0x38(%rsp)
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  68,15,40,234                        // movaps        %xmm2,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,205                        // movaps        %xmm5,%xmm9
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  15,41,108,36,184                    // movaps        %xmm5,-0x48(%rsp)
  .byte  69,15,95,222                        // maxps         %xmm14,%xmm11
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  65,15,95,211                        // maxps         %xmm11,%xmm2
  .byte  65,15,40,230                        // movaps        %xmm14,%xmm4
  .byte  15,41,100,36,168                    // movaps        %xmm4,-0x58(%rsp)
  .byte  68,15,93,204                        // minps         %xmm4,%xmm9
  .byte  65,15,93,249                        // minps         %xmm9,%xmm7
  .byte  15,92,215                           // subps         %xmm7,%xmm2
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,93,253                        // minps         %xmm13,%xmm7
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,223                           // minps         %xmm7,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,95,253                        // maxps         %xmm13,%xmm7
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,95,199                           // maxps         %xmm7,%xmm0
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  68,15,92,235                        // subps         %xmm3,%xmm13
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,94,208                        // divps         %xmm0,%xmm10
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,94,200                           // divps         %xmm0,%xmm1
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  68,15,94,232                        // divps         %xmm0,%xmm13
  .byte  15,194,195,4                        // cmpneqps      %xmm3,%xmm0
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  15,84,200                           // andps         %xmm0,%xmm1
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  15,40,5,68,56,0,0                   // movaps        0x3844(%rip),%xmm0        # 4620 <_sk_callback_sse41+0x27c>
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,40,21,73,56,0,0                  // movaps        0x3849(%rip),%xmm2        # 4630 <_sk_callback_sse41+0x28c>
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  65,15,88,252                        // addps         %xmm12,%xmm7
  .byte  68,15,40,53,74,56,0,0               // movaps        0x384a(%rip),%xmm14        # 4640 <_sk_callback_sse41+0x29c>
  .byte  68,15,40,252                        // movaps        %xmm4,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  68,15,88,255                        // addps         %xmm7,%xmm15
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  65,15,40,221                        // movaps        %xmm13,%xmm3
  .byte  65,15,89,222                        // mulps         %xmm14,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  69,15,89,248                        // mulps         %xmm8,%xmm15
  .byte  68,15,92,251                        // subps         %xmm3,%xmm15
  .byte  69,15,88,215                        // addps         %xmm15,%xmm10
  .byte  65,15,88,207                        // addps         %xmm15,%xmm1
  .byte  69,15,88,253                        // addps         %xmm13,%xmm15
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  65,15,93,223                        // minps         %xmm15,%xmm3
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  15,93,251                           // minps         %xmm3,%xmm7
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  69,15,89,247                        // mulps         %xmm15,%xmm14
  .byte  68,15,88,242                        // addps         %xmm2,%xmm14
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,207,2                     // cmpleps       %xmm7,%xmm9
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,94,235                        // divps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,234                 // blendvps      %xmm0,%xmm10,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,95,199                        // maxps         %xmm15,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  65,15,40,248                        // movaps        %xmm8,%xmm7
  .byte  15,40,108,36,152                    // movaps        -0x68(%rsp),%xmm5
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  65,15,194,226,1                     // cmpltps       %xmm10,%xmm4
  .byte  65,15,40,213                        // movaps        %xmm13,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  68,15,40,223                        // movaps        %xmm7,%xmm11
  .byte  69,15,92,222                        // subps         %xmm14,%xmm11
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  69,15,92,214                        // subps         %xmm14,%xmm10
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,92,230                        // subps         %xmm14,%xmm12
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  68,15,94,227                        // divps         %xmm3,%xmm12
  .byte  69,15,88,230                        // addps         %xmm14,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,202                        // divps         %xmm10,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  15,94,203                           // divps         %xmm3,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,207                 // blendvps      %xmm0,%xmm15,%xmm1
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,15,56,20,202                    // blendvps      %xmm0,%xmm2,%xmm1
  .byte  68,15,40,13,14,55,0,0               // movaps        0x370e(%rip),%xmm9        # 4650 <_sk_callback_sse41+0x2ac>
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  15,92,229                           // subps         %xmm5,%xmm4
  .byte  15,40,68,36,200                     // movaps        -0x38(%rsp),%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,92,36,216                     // movaps        -0x28(%rsp),%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,89,100,36,232                    // mulps         -0x18(%rsp),%xmm4
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  68,15,95,234                        // maxps         %xmm2,%xmm13
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  15,95,202                           // maxps         %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  65,15,88,197                        // addps         %xmm13,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,108,36,184                    // movaps        -0x48(%rsp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,88,204                        // addps         %xmm4,%xmm9
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_sse41
.globl _sk_saturation_sse41
FUNCTION(_sk_saturation_sse41)
_sk_saturation_sse41:
  .byte  68,15,40,206                        // movaps        %xmm6,%xmm9
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,41,76,36,216                     // movaps        %xmm1,-0x28(%rsp)
  .byte  15,41,68,36,200                     // movaps        %xmm0,-0x38(%rsp)
  .byte  68,15,40,212                        // movaps        %xmm4,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  68,15,40,220                        // movaps        %xmm4,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,41,116,36,184                 // movaps        %xmm14,-0x48(%rsp)
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,41,76,36,232                  // movaps        %xmm9,-0x18(%rsp)
  .byte  65,15,95,217                        // maxps         %xmm9,%xmm3
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,95,211                           // maxps         %xmm3,%xmm2
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,93,225                        // minps         %xmm9,%xmm12
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,93,220                        // minps         %xmm12,%xmm3
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,41,100,36,168                 // movaps        %xmm12,-0x58(%rsp)
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  15,95,248                           // maxps         %xmm0,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,94,223                        // divps         %xmm7,%xmm11
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  68,15,94,199                        // divps         %xmm7,%xmm8
  .byte  15,194,248,4                        // cmpneqps      %xmm0,%xmm7
  .byte  68,15,84,215                        // andps         %xmm7,%xmm10
  .byte  68,15,84,223                        // andps         %xmm7,%xmm11
  .byte  68,15,84,199                        // andps         %xmm7,%xmm8
  .byte  15,40,21,200,53,0,0                 // movaps        0x35c8(%rip),%xmm2        # 4660 <_sk_callback_sse41+0x2bc>
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  15,40,13,203,53,0,0                 // movaps        0x35cb(%rip),%xmm1        # 4670 <_sk_callback_sse41+0x2cc>
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  68,15,40,45,202,53,0,0              // movaps        0x35ca(%rip),%xmm13        # 4680 <_sk_callback_sse41+0x2dc>
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  68,15,88,247                        // addps         %xmm7,%xmm14
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  65,15,89,221                        // mulps         %xmm13,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  68,15,92,243                        // subps         %xmm3,%xmm14
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,88,240                        // addps         %xmm8,%xmm14
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,93,198                        // minps         %xmm14,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,88,233                        // addps         %xmm1,%xmm13
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  65,15,40,253                        // movaps        %xmm13,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,92,253                        // subps         %xmm13,%xmm15
  .byte  69,15,89,253                        // mulps         %xmm13,%xmm15
  .byte  68,15,94,255                        // divps         %xmm7,%xmm15
  .byte  69,15,88,253                        // addps         %xmm13,%xmm15
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,250                 // blendvps      %xmm0,%xmm10,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,95,198                        // maxps         %xmm14,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,194,194,1                     // cmpltps       %xmm10,%xmm8
  .byte  65,15,40,223                        // movaps        %xmm15,%xmm3
  .byte  65,15,92,221                        // subps         %xmm13,%xmm3
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,92,205                        // subps         %xmm13,%xmm1
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,251                 // blendvps      %xmm0,%xmm3,%xmm15
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  68,15,94,231                        // divps         %xmm7,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,227                 // blendvps      %xmm0,%xmm11,%xmm12
  .byte  65,15,40,220                        // movaps        %xmm12,%xmm3
  .byte  65,15,92,221                        // subps         %xmm13,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,227                 // blendvps      %xmm0,%xmm3,%xmm12
  .byte  69,15,40,222                        // movaps        %xmm14,%xmm11
  .byte  69,15,92,221                        // subps         %xmm13,%xmm11
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  68,15,94,223                        // divps         %xmm7,%xmm11
  .byte  69,15,88,221                        // addps         %xmm13,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,222                 // blendvps      %xmm0,%xmm14,%xmm11
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  65,15,92,253                        // subps         %xmm13,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  65,15,94,250                        // divps         %xmm10,%xmm7
  .byte  65,15,88,253                        // addps         %xmm13,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,223                 // blendvps      %xmm0,%xmm7,%xmm11
  .byte  68,15,40,13,144,52,0,0              // movaps        0x3490(%rip),%xmm9        # 4690 <_sk_callback_sse41+0x2ec>
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,92,204                        // subps         %xmm4,%xmm9
  .byte  15,40,124,36,168                    // movaps        -0x58(%rsp),%xmm7
  .byte  15,88,231                           // addps         %xmm7,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,248                        // maxps         %xmm0,%xmm15
  .byte  68,15,95,224                        // maxps         %xmm0,%xmm12
  .byte  68,15,95,216                        // maxps         %xmm0,%xmm11
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,40,68,36,200                     // movaps        -0x38(%rsp),%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,40,84,36,216                     // movaps        -0x28(%rsp),%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,209                           // addps         %xmm1,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  68,15,89,68,36,232                  // mulps         -0x18(%rsp),%xmm8
  .byte  15,40,84,36,184                     // movaps        -0x48(%rsp),%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_sse41
.globl _sk_color_sse41
FUNCTION(_sk_color_sse41)
_sk_color_sse41:
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,41,100,36,200                 // movaps        %xmm12,-0x38(%rsp)
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,41,92,36,216                  // movaps        %xmm11,-0x28(%rsp)
  .byte  68,15,40,212                        // movaps        %xmm4,%xmm10
  .byte  68,15,41,84,36,232                  // movaps        %xmm10,-0x18(%rsp)
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,240                        // movaps        %xmm8,%xmm14
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,40,13,219,51,0,0              // movaps        0x33db(%rip),%xmm9        # 46a0 <_sk_callback_sse41+0x2fc>
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  65,15,89,249                        // mulps         %xmm9,%xmm7
  .byte  68,15,40,21,219,51,0,0              // movaps        0x33db(%rip),%xmm10        # 46b0 <_sk_callback_sse41+0x30c>
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,40,29,216,51,0,0              // movaps        0x33d8(%rip),%xmm11        # 46c0 <_sk_callback_sse41+0x31c>
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  68,15,88,235                        // addps         %xmm3,%xmm13
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,89,250                        // mulps         %xmm10,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,89,238                        // mulps         %xmm6,%xmm13
  .byte  68,15,92,235                        // subps         %xmm3,%xmm13
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,93,197                        // minps         %xmm13,%xmm0
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  69,15,89,206                        // mulps         %xmm14,%xmm9
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  69,15,40,230                        // movaps        %xmm14,%xmm12
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  68,15,94,231                        // divps         %xmm7,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,230                 // blendvps      %xmm0,%xmm14,%xmm12
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,95,197                        // maxps         %xmm13,%xmm0
  .byte  65,15,40,214                        // movaps        %xmm14,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,194,210,1                     // cmpltps       %xmm2,%xmm10
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  68,15,40,251                        // movaps        %xmm3,%xmm15
  .byte  69,15,92,251                        // subps         %xmm11,%xmm15
  .byte  69,15,89,247                        // mulps         %xmm15,%xmm14
  .byte  65,15,92,211                        // subps         %xmm11,%xmm2
  .byte  68,15,94,242                        // divps         %xmm2,%xmm14
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,230                 // blendvps      %xmm0,%xmm14,%xmm12
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  68,15,94,247                        // divps         %xmm7,%xmm14
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  65,15,40,206                        // movaps        %xmm14,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  65,15,40,205                        // movaps        %xmm13,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,94,207                           // divps         %xmm7,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,205                 // blendvps      %xmm0,%xmm13,%xmm1
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,92,251                        // subps         %xmm11,%xmm7
  .byte  65,15,89,255                        // mulps         %xmm15,%xmm7
  .byte  15,94,250                           // divps         %xmm2,%xmm7
  .byte  65,15,88,251                        // addps         %xmm11,%xmm7
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,15,56,20,207                    // blendvps      %xmm0,%xmm7,%xmm1
  .byte  68,15,40,13,148,50,0,0              // movaps        0x3294(%rip),%xmm9        # 46d0 <_sk_callback_sse41+0x32c>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,89,68,36,184                     // mulps         -0x48(%rsp),%xmm0
  .byte  68,15,92,206                        // subps         %xmm6,%xmm9
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  68,15,95,242                        // maxps         %xmm2,%xmm14
  .byte  15,95,202                           // maxps         %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,100,36,232                    // movaps        -0x18(%rsp),%xmm4
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,88,210                        // addps         %xmm2,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  15,40,84,36,200                     // movaps        -0x38(%rsp),%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_sse41
.globl _sk_luminosity_sse41
FUNCTION(_sk_luminosity_sse41)
_sk_luminosity_sse41:
  .byte  15,41,116,36,200                    // movaps        %xmm6,-0x38(%rsp)
  .byte  15,41,108,36,232                    // movaps        %xmm5,-0x18(%rsp)
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  68,15,41,68,36,216                  // movaps        %xmm8,-0x28(%rsp)
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,5,236,49,0,0               // movaps        0x31ec(%rip),%xmm8        # 46e0 <_sk_callback_sse41+0x33c>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  68,15,40,21,240,49,0,0              // movaps        0x31f0(%rip),%xmm10        # 46f0 <_sk_callback_sse41+0x34c>
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  65,15,89,234                        // mulps         %xmm10,%xmm5
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  68,15,40,37,238,49,0,0              // movaps        0x31ee(%rip),%xmm12        # 4700 <_sk_callback_sse41+0x35c>
  .byte  68,15,40,242                        // movaps        %xmm2,%xmm14
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  68,15,88,245                        // addps         %xmm5,%xmm14
  .byte  65,15,40,235                        // movaps        %xmm11,%xmm5
  .byte  65,15,89,232                        // mulps         %xmm8,%xmm5
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  15,88,213                           // addps         %xmm5,%xmm2
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  65,15,89,236                        // mulps         %xmm12,%xmm5
  .byte  15,88,234                           // addps         %xmm2,%xmm5
  .byte  68,15,89,247                        // mulps         %xmm7,%xmm14
  .byte  68,15,92,245                        // subps         %xmm5,%xmm14
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  68,15,88,240                        // addps         %xmm0,%xmm14
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,93,198                        // minps         %xmm14,%xmm0
  .byte  65,15,40,235                        // movaps        %xmm11,%xmm5
  .byte  15,93,232                           // minps         %xmm0,%xmm5
  .byte  69,15,89,195                        // mulps         %xmm11,%xmm8
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  69,15,88,226                        // addps         %xmm10,%xmm12
  .byte  69,15,87,210                        // xorps         %xmm10,%xmm10
  .byte  68,15,194,213,2                     // cmpleps       %xmm5,%xmm10
  .byte  69,15,40,235                        // movaps        %xmm11,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  65,15,40,244                        // movaps        %xmm12,%xmm6
  .byte  15,92,245                           // subps         %xmm5,%xmm6
  .byte  68,15,94,238                        // divps         %xmm6,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,235                 // blendvps      %xmm0,%xmm11,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,95,198                        // maxps         %xmm14,%xmm0
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,89,239                           // mulps         %xmm7,%xmm5
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,194,218,1                     // cmpltps       %xmm2,%xmm11
  .byte  69,15,40,197                        // movaps        %xmm13,%xmm8
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  69,15,92,252                        // subps         %xmm12,%xmm15
  .byte  69,15,89,199                        // mulps         %xmm15,%xmm8
  .byte  65,15,92,212                        // subps         %xmm12,%xmm2
  .byte  68,15,94,194                        // divps         %xmm2,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,69,15,56,20,232                 // blendvps      %xmm0,%xmm8,%xmm13
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,94,198                        // divps         %xmm6,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  68,15,94,202                        // divps         %xmm2,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  69,15,40,206                        // movaps        %xmm14,%xmm9
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,204                        // mulps         %xmm12,%xmm9
  .byte  68,15,94,206                        // divps         %xmm6,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,206                 // blendvps      %xmm0,%xmm14,%xmm9
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,92,244                        // subps         %xmm12,%xmm6
  .byte  65,15,89,247                        // mulps         %xmm15,%xmm6
  .byte  15,94,242                           // divps         %xmm2,%xmm6
  .byte  65,15,88,244                        // addps         %xmm12,%xmm6
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,68,15,56,20,206                 // blendvps      %xmm0,%xmm6,%xmm9
  .byte  15,40,5,164,48,0,0                  // movaps        0x30a4(%rip),%xmm0        # 4710 <_sk_callback_sse41+0x36c>
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,215                           // subps         %xmm7,%xmm2
  .byte  15,89,226                           // mulps         %xmm2,%xmm4
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,89,84,36,184                     // mulps         -0x48(%rsp),%xmm2
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  68,15,95,237                        // maxps         %xmm5,%xmm13
  .byte  68,15,95,197                        // maxps         %xmm5,%xmm8
  .byte  68,15,95,205                        // maxps         %xmm5,%xmm9
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  68,15,40,84,36,216                  // movaps        -0x28(%rsp),%xmm10
  .byte  65,15,89,234                        // mulps         %xmm10,%xmm5
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  65,15,88,229                        // addps         %xmm13,%xmm4
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,40,108,36,232                    // movaps        -0x18(%rsp),%xmm5
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,226                        // movaps        %xmm10,%xmm4
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_0_sse41
.globl _sk_clamp_0_sse41
FUNCTION(_sk_clamp_0_sse41)
_sk_clamp_0_sse41:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,95,200                        // maxps         %xmm8,%xmm1
  .byte  65,15,95,208                        // maxps         %xmm8,%xmm2
  .byte  65,15,95,216                        // maxps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_sse41
.globl _sk_clamp_1_sse41
FUNCTION(_sk_clamp_1_sse41)
_sk_clamp_1_sse41:
  .byte  68,15,40,5,39,48,0,0                // movaps        0x3027(%rip),%xmm8        # 4720 <_sk_callback_sse41+0x37c>
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  65,15,93,208                        // minps         %xmm8,%xmm2
  .byte  65,15,93,216                        // minps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_sse41
.globl _sk_clamp_a_sse41
FUNCTION(_sk_clamp_a_sse41)
_sk_clamp_a_sse41:
  .byte  15,93,29,28,48,0,0                  // minps         0x301c(%rip),%xmm3        # 4730 <_sk_callback_sse41+0x38c>
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_sse41
.globl _sk_set_rgb_sse41
FUNCTION(_sk_set_rgb_sse41)
_sk_set_rgb_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_sse41
.globl _sk_swap_rb_sse41
FUNCTION(_sk_swap_rb_sse41)
_sk_swap_rb_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_sse41
.globl _sk_swap_sse41
FUNCTION(_sk_swap_sse41)
_sk_swap_sse41:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,40,248                        // movaps        %xmm8,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_sse41
.globl _sk_move_src_dst_sse41
FUNCTION(_sk_move_src_dst_sse41)
_sk_move_src_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_sse41
.globl _sk_move_dst_src_sse41
FUNCTION(_sk_move_dst_src_sse41)
_sk_move_dst_src_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_sse41
.globl _sk_premul_sse41
FUNCTION(_sk_premul_sse41)
_sk_premul_sse41:
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_sse41
.globl _sk_unpremul_sse41
FUNCTION(_sk_unpremul_sse41)
_sk_unpremul_sse41:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,40,13,135,47,0,0              // movaps        0x2f87(%rip),%xmm9        # 4740 <_sk_callback_sse41+0x39c>
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  68,15,194,195,4                     // cmpneqps      %xmm3,%xmm8
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_sse41
.globl _sk_from_srgb_sse41
FUNCTION(_sk_from_srgb_sse41)
_sk_from_srgb_sse41:
  .byte  68,15,40,29,114,47,0,0              // movaps        0x2f72(%rip),%xmm11        # 4750 <_sk_callback_sse41+0x3ac>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  69,15,89,210                        // mulps         %xmm10,%xmm10
  .byte  68,15,40,37,106,47,0,0              // movaps        0x2f6a(%rip),%xmm12        # 4760 <_sk_callback_sse41+0x3bc>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,40,45,106,47,0,0              // movaps        0x2f6a(%rip),%xmm13        # 4770 <_sk_callback_sse41+0x3cc>
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  68,15,40,53,106,47,0,0              // movaps        0x2f6a(%rip),%xmm14        # 4780 <_sk_callback_sse41+0x3dc>
  .byte  69,15,88,198                        // addps         %xmm14,%xmm8
  .byte  68,15,40,61,110,47,0,0              // movaps        0x2f6e(%rip),%xmm15        # 4790 <_sk_callback_sse41+0x3ec>
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,211                        // mulps         %xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,89,204                        // mulps         %xmm12,%xmm9
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  65,15,194,207,1                     // cmpltps       %xmm15,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  102,69,15,56,20,202                 // blendvps      %xmm0,%xmm10,%xmm9
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  69,15,89,210                        // mulps         %xmm10,%xmm10
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  65,15,194,215,1                     // cmpltps       %xmm15,%xmm2
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_sse41
.globl _sk_to_srgb_sse41
FUNCTION(_sk_to_srgb_sse41)
_sk_to_srgb_sse41:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  68,15,82,192                        // rsqrtps       %xmm0,%xmm8
  .byte  69,15,83,200                        // rcpps         %xmm8,%xmm9
  .byte  69,15,82,208                        // rsqrtps       %xmm8,%xmm10
  .byte  68,15,40,29,222,46,0,0              // movaps        0x2ede(%rip),%xmm11        # 47a0 <_sk_callback_sse41+0x3fc>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  68,15,40,37,223,46,0,0              // movaps        0x2edf(%rip),%xmm12        # 47b0 <_sk_callback_sse41+0x40c>
  .byte  69,15,89,204                        // mulps         %xmm12,%xmm9
  .byte  68,15,40,45,227,46,0,0              // movaps        0x2ee3(%rip),%xmm13        # 47c0 <_sk_callback_sse41+0x41c>
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  68,15,40,53,231,46,0,0              // movaps        0x2ee7(%rip),%xmm14        # 47d0 <_sk_callback_sse41+0x42c>
  .byte  69,15,89,214                        // mulps         %xmm14,%xmm10
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  68,15,40,5,231,46,0,0               // movaps        0x2ee7(%rip),%xmm8        # 47e0 <_sk_callback_sse41+0x43c>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,93,202                        // minps         %xmm10,%xmm9
  .byte  68,15,40,61,231,46,0,0              // movaps        0x2ee7(%rip),%xmm15        # 47f0 <_sk_callback_sse41+0x44c>
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  102,68,15,56,20,201                 // blendvps      %xmm0,%xmm1,%xmm9
  .byte  15,82,194                           // rsqrtps       %xmm2,%xmm0
  .byte  15,83,200                           // rcpps         %xmm0,%xmm1
  .byte  15,82,192                           // rsqrtps       %xmm0,%xmm0
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  68,15,93,208                        // minps         %xmm0,%xmm10
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,194,215,1                     // cmpltps       %xmm15,%xmm2
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,68,15,56,20,209                 // blendvps      %xmm0,%xmm1,%xmm10
  .byte  15,82,195                           // rsqrtps       %xmm3,%xmm0
  .byte  15,83,200                           // rcpps         %xmm0,%xmm1
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  15,82,192                           // rsqrtps       %xmm0,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  68,15,93,192                        // minps         %xmm0,%xmm8
  .byte  68,15,89,219                        // mulps         %xmm3,%xmm11
  .byte  65,15,194,223,1                     // cmpltps       %xmm15,%xmm3
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  102,69,15,56,20,195                 // blendvps      %xmm0,%xmm11,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_sse41
.globl _sk_rgb_to_hsl_sse41
FUNCTION(_sk_rgb_to_hsl_sse41)
_sk_rgb_to_hsl_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,95,217                        // maxps         %xmm9,%xmm11
  .byte  68,15,95,218                        // maxps         %xmm2,%xmm11
  .byte  69,15,40,224                        // movaps        %xmm8,%xmm12
  .byte  69,15,93,225                        // minps         %xmm9,%xmm12
  .byte  68,15,93,226                        // minps         %xmm2,%xmm12
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,40,53,56,46,0,0               // movaps        0x2e38(%rip),%xmm14        # 4800 <_sk_callback_sse41+0x45c>
  .byte  68,15,94,241                        // divps         %xmm1,%xmm14
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  69,15,194,208,0                     // cmpeqps       %xmm8,%xmm10
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  68,15,194,250,1                     // cmpltps       %xmm2,%xmm15
  .byte  68,15,84,61,31,46,0,0               // andps         0x2e1f(%rip),%xmm15        # 4810 <_sk_callback_sse41+0x46c>
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  65,15,92,208                        // subps         %xmm8,%xmm2
  .byte  65,15,89,214                        // mulps         %xmm14,%xmm2
  .byte  68,15,40,45,18,46,0,0               // movaps        0x2e12(%rip),%xmm13        # 4820 <_sk_callback_sse41+0x47c>
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  69,15,92,193                        // subps         %xmm9,%xmm8
  .byte  69,15,89,198                        // mulps         %xmm14,%xmm8
  .byte  68,15,88,5,14,46,0,0                // addps         0x2e0e(%rip),%xmm8        # 4830 <_sk_callback_sse41+0x48c>
  .byte  102,68,15,56,20,194                 // blendvps      %xmm0,%xmm2,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,199                 // blendvps      %xmm0,%xmm15,%xmm8
  .byte  68,15,89,5,6,46,0,0                 // mulps         0x2e06(%rip),%xmm8        # 4840 <_sk_callback_sse41+0x49c>
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  69,15,194,204,4                     // cmpneqps      %xmm12,%xmm9
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  15,40,5,250,45,0,0                  // movaps        0x2dfa(%rip),%xmm0        # 4850 <_sk_callback_sse41+0x4ac>
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,194,194,1                        // cmpltps       %xmm2,%xmm0
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  102,69,15,56,20,221                 // blendvps      %xmm0,%xmm13,%xmm11
  .byte  65,15,94,203                        // divps         %xmm11,%xmm1
  .byte  65,15,84,201                        // andps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_sse41
.globl _sk_hsl_to_rgb_sse41
FUNCTION(_sk_hsl_to_rgb_sse41)
_sk_hsl_to_rgb_sse41:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,41,92,36,168                     // movaps        %xmm3,-0x58(%rsp)
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,40,13,192,45,0,0              // movaps        0x2dc0(%rip),%xmm9        # 4860 <_sk_callback_sse41+0x4bc>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,194,194,2                        // cmpleps       %xmm2,%xmm0
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  102,15,56,20,235                    // blendvps      %xmm0,%xmm3,%xmm5
  .byte  15,88,234                           // addps         %xmm2,%xmm5
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  15,41,84,36,152                     // movaps        %xmm2,-0x68(%rsp)
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  68,15,92,197                        // subps         %xmm5,%xmm8
  .byte  68,15,40,53,155,45,0,0              // movaps        0x2d9b(%rip),%xmm14        # 4870 <_sk_callback_sse41+0x4cc>
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  102,65,15,58,8,198,1                // roundps       $0x1,%xmm14,%xmm0
  .byte  68,15,92,240                        // subps         %xmm0,%xmm14
  .byte  68,15,40,29,148,45,0,0              // movaps        0x2d94(%rip),%xmm11        # 4880 <_sk_callback_sse41+0x4dc>
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  65,15,92,240                        // subps         %xmm8,%xmm6
  .byte  15,40,61,141,45,0,0                 // movaps        0x2d8d(%rip),%xmm7        # 4890 <_sk_callback_sse41+0x4ec>
  .byte  69,15,40,238                        // movaps        %xmm14,%xmm13
  .byte  68,15,89,239                        // mulps         %xmm7,%xmm13
  .byte  15,40,29,142,45,0,0                 // movaps        0x2d8e(%rip),%xmm3        # 48a0 <_sk_callback_sse41+0x4fc>
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  69,15,88,224                        // addps         %xmm8,%xmm12
  .byte  102,69,15,56,20,224                 // blendvps      %xmm0,%xmm8,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  102,69,15,56,20,252                 // blendvps      %xmm0,%xmm12,%xmm15
  .byte  68,15,40,37,109,45,0,0              // movaps        0x2d6d(%rip),%xmm12        # 48b0 <_sk_callback_sse41+0x50c>
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  68,15,89,238                        // mulps         %xmm6,%xmm13
  .byte  69,15,88,232                        // addps         %xmm8,%xmm13
  .byte  102,69,15,56,20,239                 // blendvps      %xmm0,%xmm15,%xmm13
  .byte  69,15,87,246                        // xorps         %xmm14,%xmm14
  .byte  68,15,194,241,0                     // cmpeqps       %xmm1,%xmm14
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  102,65,15,58,8,194,1                // roundps       $0x1,%xmm10,%xmm0
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  102,65,15,56,20,208                 // blendvps      %xmm0,%xmm8,%xmm2
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  102,15,56,20,226                    // blendvps      %xmm0,%xmm2,%xmm4
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  102,15,56,20,204                    // blendvps      %xmm0,%xmm4,%xmm1
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  15,40,84,36,152                     // movaps        -0x68(%rsp),%xmm2
  .byte  102,15,56,20,202                    // blendvps      %xmm0,%xmm2,%xmm1
  .byte  68,15,88,21,229,44,0,0              // addps         0x2ce5(%rip),%xmm10        # 48c0 <_sk_callback_sse41+0x51c>
  .byte  102,65,15,58,8,194,1                // roundps       $0x1,%xmm10,%xmm0
  .byte  68,15,92,208                        // subps         %xmm0,%xmm10
  .byte  69,15,194,218,2                     // cmpleps       %xmm10,%xmm11
  .byte  65,15,89,250                        // mulps         %xmm10,%xmm7
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,65,15,56,20,216                 // blendvps      %xmm0,%xmm8,%xmm3
  .byte  69,15,194,202,2                     // cmpleps       %xmm10,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,15,56,20,235                    // blendvps      %xmm0,%xmm3,%xmm5
  .byte  69,15,194,226,2                     // cmpleps       %xmm10,%xmm12
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  102,68,15,56,20,197                 // blendvps      %xmm0,%xmm5,%xmm8
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  102,68,15,56,20,194                 // blendvps      %xmm0,%xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  15,40,100,36,184                    // movaps        -0x48(%rsp),%xmm4
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_sse41
.globl _sk_scale_1_float_sse41
FUNCTION(_sk_scale_1_float_sse41)
_sk_scale_1_float_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_sse41
.globl _sk_scale_u8_sse41
FUNCTION(_sk_scale_u8_sse41)
_sk_scale_u8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,56,49,4,56                // pmovzxbd      (%rax,%rdi,1),%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,66,44,0,0                // mulps         0x2c42(%rip),%xmm8        # 48d0 <_sk_callback_sse41+0x52c>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_1_float_sse41
.globl _sk_lerp_1_float_sse41
FUNCTION(_sk_lerp_1_float_sse41)
_sk_lerp_1_float_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_sse41
.globl _sk_lerp_u8_sse41
FUNCTION(_sk_lerp_u8_sse41)
_sk_lerp_u8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,56,49,4,56                // pmovzxbd      (%rax,%rdi,1),%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,238,43,0,0               // mulps         0x2bee(%rip),%xmm8        # 48e0 <_sk_callback_sse41+0x53c>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_565_sse41
.globl _sk_lerp_565_sse41
FUNCTION(_sk_lerp_565_sse41)
_sk_lerp_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,56,51,20,120              // pmovzxwd      (%rax,%rdi,2),%xmm10
  .byte  102,68,15,111,5,189,43,0,0          // movdqa        0x2bbd(%rip),%xmm8        # 48f0 <_sk_callback_sse41+0x54c>
  .byte  102,69,15,219,194                   // pand          %xmm10,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,188,43,0,0               // mulps         0x2bbc(%rip),%xmm8        # 4900 <_sk_callback_sse41+0x55c>
  .byte  102,68,15,111,13,195,43,0,0         // movdqa        0x2bc3(%rip),%xmm9        # 4910 <_sk_callback_sse41+0x56c>
  .byte  102,69,15,219,202                   // pand          %xmm10,%xmm9
  .byte  69,15,91,201                        // cvtdq2ps      %xmm9,%xmm9
  .byte  68,15,89,13,194,43,0,0              // mulps         0x2bc2(%rip),%xmm9        # 4920 <_sk_callback_sse41+0x57c>
  .byte  102,68,15,219,21,201,43,0,0         // pand          0x2bc9(%rip),%xmm10        # 4930 <_sk_callback_sse41+0x58c>
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  68,15,89,21,205,43,0,0              // mulps         0x2bcd(%rip),%xmm10        # 4940 <_sk_callback_sse41+0x59c>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,88,207                        // addps         %xmm7,%xmm9
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,95,203                        // maxps         %xmm3,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_tables_sse41
.globl _sk_load_tables_sse41
FUNCTION(_sk_load_tables_sse41)
_sk_load_tables_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  243,69,15,111,4,184                 // movdqu        (%r8,%rdi,4),%xmm8
  .byte  102,15,111,5,126,43,0,0             // movdqa        0x2b7e(%rip),%xmm0        # 4950 <_sk_callback_sse41+0x5ac>
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,73,15,58,22,192,1               // pextrq        $0x1,%xmm0,%r8
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,15,182,216                       // movzbl        %r8b,%r11d
  .byte  73,193,232,30                       // shr           $0x1e,%r8
  .byte  243,67,15,16,4,145                  // movss         (%r9,%r10,4),%xmm0
  .byte  102,65,15,58,33,4,9,16              // insertps      $0x10,(%r9,%rcx,1),%xmm0
  .byte  102,67,15,58,33,4,153,32            // insertps      $0x20,(%r9,%r11,4),%xmm0
  .byte  243,67,15,16,12,1                   // movss         (%r9,%r8,1),%xmm1
  .byte  102,15,58,33,193,48                 // insertps      $0x30,%xmm1,%xmm0
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  102,65,15,111,200                   // movdqa        %xmm8,%xmm1
  .byte  102,15,56,0,13,57,43,0,0            // pshufb        0x2b39(%rip),%xmm1        # 4960 <_sk_callback_sse41+0x5bc>
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,144                 // movss         (%r8,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,8,16             // insertps      $0x10,(%r8,%rcx,1),%xmm1
  .byte  243,67,15,16,20,152                 // movss         (%r8,%r11,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,67,15,16,20,8                   // movss         (%r8,%r9,1),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  76,139,64,24                        // mov           0x18(%rax),%r8
  .byte  102,65,15,111,208                   // movdqa        %xmm8,%xmm2
  .byte  102,15,56,0,21,245,42,0,0           // pshufb        0x2af5(%rip),%xmm2        # 4970 <_sk_callback_sse41+0x5cc>
  .byte  102,72,15,58,22,209,1               // pextrq        $0x1,%xmm2,%rcx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,200                       // movzbl        %al,%r9d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  243,67,15,16,20,136                 // movss         (%r8,%r9,4),%xmm2
  .byte  102,65,15,58,33,20,0,16             // insertps      $0x10,(%r8,%rax,1),%xmm2
  .byte  243,67,15,16,28,144                 // movss         (%r8,%r10,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,8                   // movss         (%r8,%rcx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  102,65,15,114,208,24                // psrld         $0x18,%xmm8
  .byte  65,15,91,216                        // cvtdq2ps      %xmm8,%xmm3
  .byte  15,89,29,178,42,0,0                 // mulps         0x2ab2(%rip),%xmm3        # 4980 <_sk_callback_sse41+0x5dc>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_tables_u16_be_sse41
.globl _sk_load_tables_u16_be_sse41
FUNCTION(_sk_load_tables_u16_be_sse41)
_sk_load_tables_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,8                            // mov           (%rax),%rcx
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  243,15,111,4,249                    // movdqu        (%rcx,%rdi,8),%xmm0
  .byte  243,15,111,76,249,16                // movdqu        0x10(%rcx,%rdi,8),%xmm1
  .byte  102,68,15,111,200                   // movdqa        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,68,15,111,5,133,42,0,0          // movdqa        0x2a85(%rip),%xmm8        # 4990 <_sk_callback_sse41+0x5ec>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,4,144                  // movss         (%r8,%r10,4),%xmm0
  .byte  102,65,15,58,33,4,8,16              // insertps      $0x10,(%r8,%rcx,1),%xmm0
  .byte  243,67,15,16,20,152                 // movss         (%r8,%r11,4),%xmm2
  .byte  102,15,58,33,194,32                 // insertps      $0x20,%xmm2,%xmm0
  .byte  243,67,15,16,20,8                   // movss         (%r8,%r9,1),%xmm2
  .byte  102,15,58,33,194,48                 // insertps      $0x30,%xmm2,%xmm0
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  102,15,56,0,13,56,42,0,0            // pshufb        0x2a38(%rip),%xmm1        # 49a0 <_sk_callback_sse41+0x5fc>
  .byte  102,15,56,51,201                    // pmovzxwd      %xmm1,%xmm1
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,144                 // movss         (%r8,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,8,16             // insertps      $0x10,(%r8,%rcx,1),%xmm1
  .byte  243,67,15,16,20,152                 // movss         (%r8,%r11,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,67,15,16,20,8                   // movss         (%r8,%r9,1),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  76,139,64,24                        // mov           0x18(%rax),%r8
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,65,15,56,51,208                 // pmovzxwd      %xmm8,%xmm2
  .byte  102,72,15,58,22,209,1               // pextrq        $0x1,%xmm2,%rcx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,200                       // movzbl        %al,%r9d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  243,67,15,16,20,136                 // movss         (%r8,%r9,4),%xmm2
  .byte  102,65,15,58,33,20,0,16             // insertps      $0x10,(%r8,%rax,1),%xmm2
  .byte  243,67,15,16,28,144                 // movss         (%r8,%r10,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,8                   // movss         (%r8,%rcx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  102,65,15,112,217,78                // pshufd        $0x4e,%xmm9,%xmm3
  .byte  102,68,15,111,195                   // movdqa        %xmm3,%xmm8
  .byte  102,65,15,113,240,8                 // psllw         $0x8,%xmm8
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,216                   // por           %xmm8,%xmm3
  .byte  102,15,56,51,219                    // pmovzxwd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,134,41,0,0                 // mulps         0x2986(%rip),%xmm3        # 49b0 <_sk_callback_sse41+0x60c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_tables_rgb_u16_be_sse41
.globl _sk_load_tables_rgb_u16_be_sse41
FUNCTION(_sk_load_tables_rgb_u16_be_sse41)
_sk_load_tables_rgb_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,12,127                       // lea           (%rdi,%rdi,2),%r9
  .byte  72,139,8                            // mov           (%rax),%rcx
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  243,66,15,111,20,73                 // movdqu        (%rcx,%r9,2),%xmm2
  .byte  243,66,15,111,68,73,8               // movdqu        0x8(%rcx,%r9,2),%xmm0
  .byte  102,15,115,216,4                    // psrldq        $0x4,%xmm0
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,65,15,115,217,6                 // psrldq        $0x6,%xmm9
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,68,15,97,200                    // punpcklwd     %xmm0,%xmm9
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  102,68,15,111,5,72,41,0,0           // movdqa        0x2948(%rip),%xmm8        # 49c0 <_sk_callback_sse41+0x61c>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,4,144                  // movss         (%r8,%r10,4),%xmm0
  .byte  102,65,15,58,33,4,8,16              // insertps      $0x10,(%r8,%rcx,1),%xmm0
  .byte  243,67,15,16,28,152                 // movss         (%r8,%r11,4),%xmm3
  .byte  102,15,58,33,195,32                 // insertps      $0x20,%xmm3,%xmm0
  .byte  243,67,15,16,28,8                   // movss         (%r8,%r9,1),%xmm3
  .byte  102,15,58,33,195,48                 // insertps      $0x30,%xmm3,%xmm0
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  102,15,56,0,13,251,40,0,0           // pshufb        0x28fb(%rip),%xmm1        # 49d0 <_sk_callback_sse41+0x62c>
  .byte  102,15,56,51,201                    // pmovzxwd      %xmm1,%xmm1
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,144                 // movss         (%r8,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,8,16             // insertps      $0x10,(%r8,%rcx,1),%xmm1
  .byte  243,67,15,16,28,152                 // movss         (%r8,%r11,4),%xmm3
  .byte  102,15,58,33,203,32                 // insertps      $0x20,%xmm3,%xmm1
  .byte  243,67,15,16,28,8                   // movss         (%r8,%r9,1),%xmm3
  .byte  102,15,58,33,203,48                 // insertps      $0x30,%xmm3,%xmm1
  .byte  76,139,64,24                        // mov           0x18(%rax),%r8
  .byte  102,65,15,105,209                   // punpckhwd     %xmm9,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  102,72,15,58,22,209,1               // pextrq        $0x1,%xmm2,%rcx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,200                       // movzbl        %al,%r9d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  243,67,15,16,20,136                 // movss         (%r8,%r9,4),%xmm2
  .byte  102,65,15,58,33,20,0,16             // insertps      $0x10,(%r8,%rax,1),%xmm2
  .byte  243,67,15,16,28,144                 // movss         (%r8,%r10,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,8                   // movss         (%r8,%rcx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,102,40,0,0                 // movaps        0x2866(%rip),%xmm3        # 49e0 <_sk_callback_sse41+0x63c>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_sse41
.globl _sk_byte_tables_sse41
FUNCTION(_sk_byte_tables_sse41)
_sk_byte_tables_sse41:
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,103,40,0,0               // movaps        0x2867(%rip),%xmm8        # 49f0 <_sk_callback_sse41+0x64c>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,72,15,58,22,193,1               // pextrq        $0x1,%xmm0,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  76,139,112,8                        // mov           0x8(%rax),%r14
  .byte  102,67,15,58,32,4,19,0              // pinsrb        $0x0,(%r11,%r10,1),%xmm0
  .byte  102,67,15,58,32,4,11,1              // pinsrb        $0x1,(%r11,%r9,1),%xmm0
  .byte  67,15,182,28,3                      // movzbl        (%r11,%r8,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  65,15,182,12,11                     // movzbl        (%r11,%rcx,1),%ecx
  .byte  102,15,58,32,193,3                  // pinsrb        $0x3,%ecx,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,13,24,40,0,0               // movaps        0x2818(%rip),%xmm9        # 4a00 <_sk_callback_sse41+0x65c>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,58,22,201,1               // pextrq        $0x1,%xmm1,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,67,15,58,32,12,14,0             // pinsrb        $0x0,(%r14,%r9,1),%xmm1
  .byte  102,65,15,58,32,12,30,1             // pinsrb        $0x1,(%r14,%rbx,1),%xmm1
  .byte  67,15,182,28,6                      // movzbl        (%r14,%r8,1),%ebx
  .byte  102,15,58,32,203,2                  // pinsrb        $0x2,%ebx,%xmm1
  .byte  65,15,182,12,14                     // movzbl        (%r14,%rcx,1),%ecx
  .byte  102,15,58,32,201,3                  // pinsrb        $0x3,%ecx,%xmm1
  .byte  102,15,56,49,201                    // pmovzxbd      %xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  65,137,216                          // mov           %ebx,%r8d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,72,15,126,209                   // movq          %xmm2,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,58,32,20,17,0             // pinsrb        $0x0,(%r9,%r10,1),%xmm2
  .byte  102,65,15,58,32,20,9,1              // pinsrb        $0x1,(%r9,%rcx,1),%xmm2
  .byte  67,15,182,12,1                      // movzbl        (%r9,%r8,1),%ecx
  .byte  102,15,58,32,209,2                  // pinsrb        $0x2,%ecx,%xmm2
  .byte  65,15,182,12,25                     // movzbl        (%r9,%rbx,1),%ecx
  .byte  102,15,58,32,209,3                  // pinsrb        $0x3,%ecx,%xmm2
  .byte  102,15,56,49,210                    // pmovzxbd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  102,15,91,219                       // cvtps2dq      %xmm3,%xmm3
  .byte  102,72,15,58,22,217,1               // pextrq        $0x1,%xmm3,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,72,15,126,219                   // movq          %xmm3,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,66,15,58,32,28,8,0              // pinsrb        $0x0,(%rax,%r9,1),%xmm3
  .byte  102,15,58,32,28,24,1                // pinsrb        $0x1,(%rax,%rbx,1),%xmm3
  .byte  66,15,182,28,0                      // movzbl        (%rax,%r8,1),%ebx
  .byte  102,15,58,32,219,2                  // pinsrb        $0x2,%ebx,%xmm3
  .byte  15,182,4,8                          // movzbl        (%rax,%rcx,1),%eax
  .byte  102,15,58,32,216,3                  // pinsrb        $0x3,%eax,%xmm3
  .byte  102,15,56,49,219                    // pmovzxbd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_sse41
.globl _sk_byte_tables_rgb_sse41
FUNCTION(_sk_byte_tables_rgb_sse41)
_sk_byte_tables_rgb_sse41:
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  139,72,24                           // mov           0x18(%rax),%ecx
  .byte  255,201                             // dec           %ecx
  .byte  102,68,15,110,193                   // movd          %ecx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,72,15,58,22,193,1               // pextrq        $0x1,%xmm0,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  76,139,48                           // mov           (%rax),%r14
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  102,67,15,58,32,4,22,0              // pinsrb        $0x0,(%r14,%r10,1),%xmm0
  .byte  102,67,15,58,32,4,30,1              // pinsrb        $0x1,(%r14,%r11,1),%xmm0
  .byte  67,15,182,28,6                      // movzbl        (%r14,%r8,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  65,15,182,12,14                     // movzbl        (%r14,%rcx,1),%ecx
  .byte  102,15,58,32,193,3                  // pinsrb        $0x3,%ecx,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,13,160,38,0,0              // movaps        0x26a0(%rip),%xmm9        # 4a10 <_sk_callback_sse41+0x66c>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,58,22,201,1               // pextrq        $0x1,%xmm1,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,67,15,58,32,12,17,0             // pinsrb        $0x0,(%r9,%r10,1),%xmm1
  .byte  102,65,15,58,32,12,25,1             // pinsrb        $0x1,(%r9,%rbx,1),%xmm1
  .byte  67,15,182,28,1                      // movzbl        (%r9,%r8,1),%ebx
  .byte  102,15,58,32,203,2                  // pinsrb        $0x2,%ebx,%xmm1
  .byte  65,15,182,12,9                      // movzbl        (%r9,%rcx,1),%ecx
  .byte  102,15,58,32,201,3                  // pinsrb        $0x3,%ecx,%xmm1
  .byte  102,15,56,49,201                    // pmovzxbd      %xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  72,139,64,16                        // mov           0x10(%rax),%rax
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,58,22,209,1               // pextrq        $0x1,%xmm2,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,66,15,58,32,20,8,0              // pinsrb        $0x0,(%rax,%r9,1),%xmm2
  .byte  102,15,58,32,20,24,1                // pinsrb        $0x1,(%rax,%rbx,1),%xmm2
  .byte  66,15,182,28,0                      // movzbl        (%rax,%r8,1),%ebx
  .byte  102,15,58,32,211,2                  // pinsrb        $0x2,%ebx,%xmm2
  .byte  15,182,4,8                          // movzbl        (%rax,%rcx,1),%eax
  .byte  102,15,58,32,208,3                  // pinsrb        $0x3,%eax,%xmm2
  .byte  102,15,56,49,210                    // pmovzxbd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_sse41
.globl _sk_table_r_sse41
FUNCTION(_sk_table_r_sse41)
_sk_table_r_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  102,65,15,91,192                    // cvtps2dq      %xmm8,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,67,15,16,4,145                  // movss         (%r9,%r10,4),%xmm0
  .byte  102,65,15,58,33,4,137,16            // insertps      $0x10,(%r9,%rcx,4),%xmm0
  .byte  243,71,15,16,4,129                  // movss         (%r9,%r8,4),%xmm8
  .byte  102,65,15,58,33,192,32              // insertps      $0x20,%xmm8,%xmm0
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,192,48              // insertps      $0x30,%xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_sse41
.globl _sk_table_g_sse41
FUNCTION(_sk_table_g_sse41)
_sk_table_g_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  102,65,15,91,200                    // cvtps2dq      %xmm8,%xmm1
  .byte  102,72,15,58,22,200,1               // pextrq        $0x1,%xmm1,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,67,15,16,12,145                 // movss         (%r9,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,137,16           // insertps      $0x10,(%r9,%rcx,4),%xmm1
  .byte  243,71,15,16,4,129                  // movss         (%r9,%r8,4),%xmm8
  .byte  102,65,15,58,33,200,32              // insertps      $0x20,%xmm8,%xmm1
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,200,48              // insertps      $0x30,%xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_sse41
.globl _sk_table_b_sse41
FUNCTION(_sk_table_b_sse41)
_sk_table_b_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,65,15,91,208                    // cvtps2dq      %xmm8,%xmm2
  .byte  102,72,15,58,22,208,1               // pextrq        $0x1,%xmm2,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,209                   // movq          %xmm2,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  102,65,15,58,33,20,137,16           // insertps      $0x10,(%r9,%rcx,4),%xmm2
  .byte  243,71,15,16,4,129                  // movss         (%r9,%r8,4),%xmm8
  .byte  102,65,15,58,33,208,32              // insertps      $0x20,%xmm8,%xmm2
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,208,48              // insertps      $0x30,%xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_sse41
.globl _sk_table_a_sse41
FUNCTION(_sk_table_a_sse41)
_sk_table_a_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,65,15,91,216                    // cvtps2dq      %xmm8,%xmm3
  .byte  102,72,15,58,22,216,1               // pextrq        $0x1,%xmm3,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,217                   // movq          %xmm3,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,67,15,16,28,145                 // movss         (%r9,%r10,4),%xmm3
  .byte  102,65,15,58,33,28,137,16           // insertps      $0x10,(%r9,%rcx,4),%xmm3
  .byte  243,71,15,16,4,129                  // movss         (%r9,%r8,4),%xmm8
  .byte  102,65,15,58,33,216,32              // insertps      $0x20,%xmm8,%xmm3
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,216,48              // insertps      $0x30,%xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_sse41
.globl _sk_parametric_r_sse41
FUNCTION(_sk_parametric_r_sse41)
_sk_parametric_r_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,64,16                  // movss         0x10(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  65,15,194,192,2                     // cmpleps       %xmm8,%xmm0
  .byte  243,68,15,16,64,24                  // movss         0x18(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,64,8                   // movss         0x8(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,194                        // cvtdq2ps      %xmm10,%xmm8
  .byte  68,15,89,5,247,35,0,0               // mulps         0x23f7(%rip),%xmm8        # 4a20 <_sk_callback_sse41+0x67c>
  .byte  68,15,84,21,255,35,0,0              // andps         0x23ff(%rip),%xmm10        # 4a30 <_sk_callback_sse41+0x68c>
  .byte  68,15,86,21,7,36,0,0                // orps          0x2407(%rip),%xmm10        # 4a40 <_sk_callback_sse41+0x69c>
  .byte  68,15,88,5,15,36,0,0                // addps         0x240f(%rip),%xmm8        # 4a50 <_sk_callback_sse41+0x6ac>
  .byte  68,15,40,37,23,36,0,0               // movaps        0x2417(%rip),%xmm12        # 4a60 <_sk_callback_sse41+0x6bc>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  68,15,88,21,23,36,0,0               // addps         0x2417(%rip),%xmm10        # 4a70 <_sk_callback_sse41+0x6cc>
  .byte  68,15,40,37,31,36,0,0               // movaps        0x241f(%rip),%xmm12        # 4a80 <_sk_callback_sse41+0x6dc>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  69,15,89,195                        // mulps         %xmm11,%xmm8
  .byte  102,69,15,58,8,208,1                // roundps       $0x1,%xmm8,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,5,12,36,0,0                // addps         0x240c(%rip),%xmm8        # 4a90 <_sk_callback_sse41+0x6ec>
  .byte  68,15,40,21,20,36,0,0               // movaps        0x2414(%rip),%xmm10        # 4aa0 <_sk_callback_sse41+0x6fc>
  .byte  69,15,89,211                        // mulps         %xmm11,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  68,15,40,21,20,36,0,0               // movaps        0x2414(%rip),%xmm10        # 4ab0 <_sk_callback_sse41+0x70c>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  68,15,40,29,24,36,0,0               // movaps        0x2418(%rip),%xmm11        # 4ac0 <_sk_callback_sse41+0x71c>
  .byte  69,15,94,218                        // divps         %xmm10,%xmm11
  .byte  69,15,88,216                        // addps         %xmm8,%xmm11
  .byte  68,15,89,29,24,36,0,0               // mulps         0x2418(%rip),%xmm11        # 4ad0 <_sk_callback_sse41+0x72c>
  .byte  102,69,15,91,211                    // cvtps2dq      %xmm11,%xmm10
  .byte  243,68,15,16,64,20                  // movss         0x14(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,194                        // addps         %xmm10,%xmm8
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  68,15,93,5,255,35,0,0               // minps         0x23ff(%rip),%xmm8        # 4ae0 <_sk_callback_sse41+0x73c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_sse41
.globl _sk_parametric_g_sse41
FUNCTION(_sk_parametric_g_sse41)
_sk_parametric_g_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,72,24                     // movss         0x18(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,72,8                      // movss         0x8(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  68,15,88,217                        // addps         %xmm1,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,160,35,0,0              // mulps         0x23a0(%rip),%xmm12        # 4af0 <_sk_callback_sse41+0x74c>
  .byte  68,15,84,29,168,35,0,0              // andps         0x23a8(%rip),%xmm11        # 4b00 <_sk_callback_sse41+0x75c>
  .byte  68,15,86,29,176,35,0,0              // orps          0x23b0(%rip),%xmm11        # 4b10 <_sk_callback_sse41+0x76c>
  .byte  68,15,88,37,184,35,0,0              // addps         0x23b8(%rip),%xmm12        # 4b20 <_sk_callback_sse41+0x77c>
  .byte  15,40,13,193,35,0,0                 // movaps        0x23c1(%rip),%xmm1        # 4b30 <_sk_callback_sse41+0x78c>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  68,15,88,29,193,35,0,0              // addps         0x23c1(%rip),%xmm11        # 4b40 <_sk_callback_sse41+0x79c>
  .byte  15,40,13,202,35,0,0                 // movaps        0x23ca(%rip),%xmm1        # 4b50 <_sk_callback_sse41+0x7ac>
  .byte  65,15,94,203                        // divps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,183,35,0,0              // addps         0x23b7(%rip),%xmm12        # 4b60 <_sk_callback_sse41+0x7bc>
  .byte  15,40,13,192,35,0,0                 // movaps        0x23c0(%rip),%xmm1        # 4b70 <_sk_callback_sse41+0x7cc>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  68,15,40,21,192,35,0,0              // movaps        0x23c0(%rip),%xmm10        # 4b80 <_sk_callback_sse41+0x7dc>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,13,197,35,0,0                 // movaps        0x23c5(%rip),%xmm1        # 4b90 <_sk_callback_sse41+0x7ec>
  .byte  65,15,94,202                        // divps         %xmm10,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  15,89,13,198,35,0,0                 // mulps         0x23c6(%rip),%xmm1        # 4ba0 <_sk_callback_sse41+0x7fc>
  .byte  102,68,15,91,209                    // cvtps2dq      %xmm1,%xmm10
  .byte  243,15,16,72,20                     // movss         0x14(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  102,65,15,56,20,201                 // blendvps      %xmm0,%xmm9,%xmm1
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,200                           // maxps         %xmm0,%xmm1
  .byte  15,93,13,177,35,0,0                 // minps         0x23b1(%rip),%xmm1        # 4bb0 <_sk_callback_sse41+0x80c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_sse41
.globl _sk_parametric_b_sse41
FUNCTION(_sk_parametric_b_sse41)
_sk_parametric_b_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,80,24                     // movss         0x18(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,82,35,0,0               // mulps         0x2352(%rip),%xmm12        # 4bc0 <_sk_callback_sse41+0x81c>
  .byte  68,15,84,29,90,35,0,0               // andps         0x235a(%rip),%xmm11        # 4bd0 <_sk_callback_sse41+0x82c>
  .byte  68,15,86,29,98,35,0,0               // orps          0x2362(%rip),%xmm11        # 4be0 <_sk_callback_sse41+0x83c>
  .byte  68,15,88,37,106,35,0,0              // addps         0x236a(%rip),%xmm12        # 4bf0 <_sk_callback_sse41+0x84c>
  .byte  15,40,21,115,35,0,0                 // movaps        0x2373(%rip),%xmm2        # 4c00 <_sk_callback_sse41+0x85c>
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  68,15,88,29,115,35,0,0              // addps         0x2373(%rip),%xmm11        # 4c10 <_sk_callback_sse41+0x86c>
  .byte  15,40,21,124,35,0,0                 // movaps        0x237c(%rip),%xmm2        # 4c20 <_sk_callback_sse41+0x87c>
  .byte  65,15,94,211                        // divps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,105,35,0,0              // addps         0x2369(%rip),%xmm12        # 4c30 <_sk_callback_sse41+0x88c>
  .byte  15,40,21,114,35,0,0                 // movaps        0x2372(%rip),%xmm2        # 4c40 <_sk_callback_sse41+0x89c>
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  68,15,40,21,114,35,0,0              // movaps        0x2372(%rip),%xmm10        # 4c50 <_sk_callback_sse41+0x8ac>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,21,119,35,0,0                 // movaps        0x2377(%rip),%xmm2        # 4c60 <_sk_callback_sse41+0x8bc>
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,89,21,120,35,0,0                 // mulps         0x2378(%rip),%xmm2        # 4c70 <_sk_callback_sse41+0x8cc>
  .byte  102,68,15,91,210                    // cvtps2dq      %xmm2,%xmm10
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  102,65,15,56,20,209                 // blendvps      %xmm0,%xmm9,%xmm2
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,93,21,99,35,0,0                  // minps         0x2363(%rip),%xmm2        # 4c80 <_sk_callback_sse41+0x8dc>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_sse41
.globl _sk_parametric_a_sse41
FUNCTION(_sk_parametric_a_sse41)
_sk_parametric_a_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,219                        // mulps         %xmm3,%xmm11
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,88,8                      // movss         0x8(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  68,15,88,219                        // addps         %xmm3,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,4,35,0,0                // mulps         0x2304(%rip),%xmm12        # 4c90 <_sk_callback_sse41+0x8ec>
  .byte  68,15,84,29,12,35,0,0               // andps         0x230c(%rip),%xmm11        # 4ca0 <_sk_callback_sse41+0x8fc>
  .byte  68,15,86,29,20,35,0,0               // orps          0x2314(%rip),%xmm11        # 4cb0 <_sk_callback_sse41+0x90c>
  .byte  68,15,88,37,28,35,0,0               // addps         0x231c(%rip),%xmm12        # 4cc0 <_sk_callback_sse41+0x91c>
  .byte  15,40,29,37,35,0,0                  // movaps        0x2325(%rip),%xmm3        # 4cd0 <_sk_callback_sse41+0x92c>
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  68,15,88,29,37,35,0,0               // addps         0x2325(%rip),%xmm11        # 4ce0 <_sk_callback_sse41+0x93c>
  .byte  15,40,29,46,35,0,0                  // movaps        0x232e(%rip),%xmm3        # 4cf0 <_sk_callback_sse41+0x94c>
  .byte  65,15,94,219                        // divps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,27,35,0,0               // addps         0x231b(%rip),%xmm12        # 4d00 <_sk_callback_sse41+0x95c>
  .byte  15,40,29,36,35,0,0                  // movaps        0x2324(%rip),%xmm3        # 4d10 <_sk_callback_sse41+0x96c>
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  68,15,40,21,36,35,0,0               // movaps        0x2324(%rip),%xmm10        # 4d20 <_sk_callback_sse41+0x97c>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,29,41,35,0,0                  // movaps        0x2329(%rip),%xmm3        # 4d30 <_sk_callback_sse41+0x98c>
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  15,89,29,42,35,0,0                  // mulps         0x232a(%rip),%xmm3        # 4d40 <_sk_callback_sse41+0x99c>
  .byte  102,68,15,91,211                    // cvtps2dq      %xmm3,%xmm10
  .byte  243,15,16,88,20                     // movss         0x14(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  102,65,15,56,20,217                 // blendvps      %xmm0,%xmm9,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  15,93,29,21,35,0,0                  // minps         0x2315(%rip),%xmm3        # 4d50 <_sk_callback_sse41+0x9ac>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_sse41
.globl _sk_lab_to_xyz_sse41
FUNCTION(_sk_lab_to_xyz_sse41)
_sk_lab_to_xyz_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,89,5,17,35,0,0                // mulps         0x2311(%rip),%xmm8        # 4d60 <_sk_callback_sse41+0x9bc>
  .byte  68,15,40,13,25,35,0,0               // movaps        0x2319(%rip),%xmm9        # 4d70 <_sk_callback_sse41+0x9cc>
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  15,40,5,30,35,0,0                   // movaps        0x231e(%rip),%xmm0        # 4d80 <_sk_callback_sse41+0x9dc>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,88,5,28,35,0,0                // addps         0x231c(%rip),%xmm8        # 4d90 <_sk_callback_sse41+0x9ec>
  .byte  68,15,89,5,36,35,0,0                // mulps         0x2324(%rip),%xmm8        # 4da0 <_sk_callback_sse41+0x9fc>
  .byte  15,89,13,45,35,0,0                  // mulps         0x232d(%rip),%xmm1        # 4db0 <_sk_callback_sse41+0xa0c>
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  15,89,21,50,35,0,0                  // mulps         0x2332(%rip),%xmm2        # 4dc0 <_sk_callback_sse41+0xa1c>
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  68,15,92,210                        // subps         %xmm2,%xmm10
  .byte  68,15,40,217                        // movaps        %xmm1,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  68,15,40,13,38,35,0,0               // movaps        0x2326(%rip),%xmm9        # 4dd0 <_sk_callback_sse41+0xa2c>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  15,40,21,38,35,0,0                  // movaps        0x2326(%rip),%xmm2        # 4de0 <_sk_callback_sse41+0xa3c>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  68,15,40,37,43,35,0,0               // movaps        0x232b(%rip),%xmm12        # 4df0 <_sk_callback_sse41+0xa4c>
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  102,65,15,56,20,203                 // blendvps      %xmm0,%xmm11,%xmm1
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  102,69,15,56,20,195                 // blendvps      %xmm0,%xmm11,%xmm8
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  69,15,89,218                        // mulps         %xmm10,%xmm11
  .byte  69,15,194,203,1                     // cmpltps       %xmm11,%xmm9
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  15,89,13,228,34,0,0                 // mulps         0x22e4(%rip),%xmm1        # 4e00 <_sk_callback_sse41+0xa5c>
  .byte  15,89,21,237,34,0,0                 // mulps         0x22ed(%rip),%xmm2        # 4e10 <_sk_callback_sse41+0xa6c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_sse41
.globl _sk_load_a8_sse41
FUNCTION(_sk_load_a8_sse41)
_sk_load_a8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,15,56,49,4,56                   // pmovzxbd      (%rax,%rdi,1),%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,221,34,0,0                 // mulps         0x22dd(%rip),%xmm3        # 4e20 <_sk_callback_sse41+0xa7c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_a8_sse41
.globl _sk_gather_a8_sse41
FUNCTION(_sk_gather_a8_sse41)
_sk_gather_a8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,58,32,4,17,0              // pinsrb        $0x0,(%r9,%r10,1),%xmm0
  .byte  102,65,15,58,32,4,9,1               // pinsrb        $0x1,(%r9,%rcx,1),%xmm0
  .byte  67,15,182,12,1                      // movzbl        (%r9,%r8,1),%ecx
  .byte  102,15,58,32,193,2                  // pinsrb        $0x2,%ecx,%xmm0
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  102,15,58,32,192,3                  // pinsrb        $0x3,%eax,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,113,34,0,0                 // mulps         0x2271(%rip),%xmm3        # 4e30 <_sk_callback_sse41+0xa8c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_sse41
.globl _sk_store_a8_sse41
FUNCTION(_sk_store_a8_sse41)
_sk_store_a8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,101,34,0,0               // movaps        0x2265(%rip),%xmm8        # 4e40 <_sk_callback_sse41+0xa9c>
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  102,68,15,126,4,56                  // movd          %xmm8,(%rax,%rdi,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_g8_sse41
.globl _sk_load_g8_sse41
FUNCTION(_sk_load_g8_sse41)
_sk_load_g8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,15,56,49,4,56                   // pmovzxbd      (%rax,%rdi,1),%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,66,34,0,0                   // mulps         0x2242(%rip),%xmm0        # 4e50 <_sk_callback_sse41+0xaac>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,73,34,0,0                  // movaps        0x2249(%rip),%xmm3        # 4e60 <_sk_callback_sse41+0xabc>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_g8_sse41
.globl _sk_gather_g8_sse41
FUNCTION(_sk_gather_g8_sse41)
_sk_gather_g8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,58,32,4,17,0              // pinsrb        $0x0,(%r9,%r10,1),%xmm0
  .byte  102,65,15,58,32,4,9,1               // pinsrb        $0x1,(%r9,%rcx,1),%xmm0
  .byte  67,15,182,12,1                      // movzbl        (%r9,%r8,1),%ecx
  .byte  102,15,58,32,193,2                  // pinsrb        $0x2,%ecx,%xmm0
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  102,15,58,32,192,3                  // pinsrb        $0x3,%eax,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,226,33,0,0                  // mulps         0x21e2(%rip),%xmm0        # 4e70 <_sk_callback_sse41+0xacc>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,233,33,0,0                 // movaps        0x21e9(%rip),%xmm3        # 4e80 <_sk_callback_sse41+0xadc>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_sse41
.globl _sk_gather_i8_sse41
FUNCTION(_sk_gather_i8_sse41)
_sk_gather_i8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,192                          // mov           %rax,%r8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  116,5                               // je            2cae <_sk_gather_i8_sse41+0xf>
  .byte  76,137,192                          // mov           %r8,%rax
  .byte  235,2                               // jmp           2cb0 <_sk_gather_i8_sse41+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,203                          // mov           %ecx,%r11d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,58,32,4,26,0              // pinsrb        $0x0,(%r10,%r11,1),%xmm0
  .byte  102,65,15,58,32,4,10,1              // pinsrb        $0x1,(%r10,%rcx,1),%xmm0
  .byte  102,67,15,58,32,4,10,2              // pinsrb        $0x2,(%r10,%r9,1),%xmm0
  .byte  102,65,15,58,32,4,2,3               // pinsrb        $0x3,(%r10,%rax,1),%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  73,139,64,8                         // mov           0x8(%r8),%rax
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  102,66,15,110,28,128                // movd          (%rax,%r8,4),%xmm3
  .byte  102,15,58,34,28,8,1                 // pinsrd        $0x1,(%rax,%rcx,1),%xmm3
  .byte  102,66,15,58,34,28,144,2            // pinsrd        $0x2,(%rax,%r10,4),%xmm3
  .byte  102,66,15,58,34,28,8,3              // pinsrd        $0x3,(%rax,%r9,1),%xmm3
  .byte  102,15,111,5,64,33,0,0              // movdqa        0x2140(%rip),%xmm0        # 4e90 <_sk_callback_sse41+0xaec>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,65,33,0,0                // movaps        0x2141(%rip),%xmm8        # 4ea0 <_sk_callback_sse41+0xafc>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,56,0,13,64,33,0,0            // pshufb        0x2140(%rip),%xmm1        # 4eb0 <_sk_callback_sse41+0xb0c>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,56,0,21,60,33,0,0            // pshufb        0x213c(%rip),%xmm2        # 4ec0 <_sk_callback_sse41+0xb1c>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_sse41
.globl _sk_load_565_sse41
FUNCTION(_sk_load_565_sse41)
_sk_load_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,15,56,51,20,120                 // pmovzxwd      (%rax,%rdi,2),%xmm2
  .byte  102,15,111,5,34,33,0,0              // movdqa        0x2122(%rip),%xmm0        # 4ed0 <_sk_callback_sse41+0xb2c>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,36,33,0,0                   // mulps         0x2124(%rip),%xmm0        # 4ee0 <_sk_callback_sse41+0xb3c>
  .byte  102,15,111,13,44,33,0,0             // movdqa        0x212c(%rip),%xmm1        # 4ef0 <_sk_callback_sse41+0xb4c>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,46,33,0,0                  // mulps         0x212e(%rip),%xmm1        # 4f00 <_sk_callback_sse41+0xb5c>
  .byte  102,15,219,21,54,33,0,0             // pand          0x2136(%rip),%xmm2        # 4f10 <_sk_callback_sse41+0xb6c>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,60,33,0,0                  // mulps         0x213c(%rip),%xmm2        # 4f20 <_sk_callback_sse41+0xb7c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,67,33,0,0                  // movaps        0x2143(%rip),%xmm3        # 4f30 <_sk_callback_sse41+0xb8c>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_565_sse41
.globl _sk_gather_565_sse41
FUNCTION(_sk_gather_565_sse41)
_sk_gather_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,196,4,81,0                // pinsrw        $0x0,(%r9,%r10,2),%xmm0
  .byte  102,65,15,196,4,73,1                // pinsrw        $0x1,(%r9,%rcx,2),%xmm0
  .byte  67,15,183,12,65                     // movzwl        (%r9,%r8,2),%ecx
  .byte  102,15,196,193,2                    // pinsrw        $0x2,%ecx,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,192,3                    // pinsrw        $0x3,%eax,%xmm0
  .byte  102,15,56,51,208                    // pmovzxwd      %xmm0,%xmm2
  .byte  102,15,111,5,232,32,0,0             // movdqa        0x20e8(%rip),%xmm0        # 4f40 <_sk_callback_sse41+0xb9c>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,234,32,0,0                  // mulps         0x20ea(%rip),%xmm0        # 4f50 <_sk_callback_sse41+0xbac>
  .byte  102,15,111,13,242,32,0,0            // movdqa        0x20f2(%rip),%xmm1        # 4f60 <_sk_callback_sse41+0xbbc>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,244,32,0,0                 // mulps         0x20f4(%rip),%xmm1        # 4f70 <_sk_callback_sse41+0xbcc>
  .byte  102,15,219,21,252,32,0,0            // pand          0x20fc(%rip),%xmm2        # 4f80 <_sk_callback_sse41+0xbdc>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,2,33,0,0                   // mulps         0x2102(%rip),%xmm2        # 4f90 <_sk_callback_sse41+0xbec>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,9,33,0,0                   // movaps        0x2109(%rip),%xmm3        # 4fa0 <_sk_callback_sse41+0xbfc>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_sse41
.globl _sk_store_565_sse41
FUNCTION(_sk_store_565_sse41)
_sk_store_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,10,33,0,0                // movaps        0x210a(%rip),%xmm8        # 4fb0 <_sk_callback_sse41+0xc0c>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,11                // pslld         $0xb,%xmm9
  .byte  68,15,40,21,255,32,0,0              // movaps        0x20ff(%rip),%xmm10        # 4fc0 <_sk_callback_sse41+0xc1c>
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,5                 // pslld         $0x5,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,68,15,214,4,120                 // movq          %xmm8,(%rax,%rdi,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_4444_sse41
.globl _sk_load_4444_sse41
FUNCTION(_sk_load_4444_sse41)
_sk_load_4444_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,15,56,51,28,120                 // pmovzxwd      (%rax,%rdi,2),%xmm3
  .byte  102,15,111,5,202,32,0,0             // movdqa        0x20ca(%rip),%xmm0        # 4fd0 <_sk_callback_sse41+0xc2c>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,204,32,0,0                  // mulps         0x20cc(%rip),%xmm0        # 4fe0 <_sk_callback_sse41+0xc3c>
  .byte  102,15,111,13,212,32,0,0            // movdqa        0x20d4(%rip),%xmm1        # 4ff0 <_sk_callback_sse41+0xc4c>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,214,32,0,0                 // mulps         0x20d6(%rip),%xmm1        # 5000 <_sk_callback_sse41+0xc5c>
  .byte  102,15,111,21,222,32,0,0            // movdqa        0x20de(%rip),%xmm2        # 5010 <_sk_callback_sse41+0xc6c>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,224,32,0,0                 // mulps         0x20e0(%rip),%xmm2        # 5020 <_sk_callback_sse41+0xc7c>
  .byte  102,15,219,29,232,32,0,0            // pand          0x20e8(%rip),%xmm3        # 5030 <_sk_callback_sse41+0xc8c>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,238,32,0,0                 // mulps         0x20ee(%rip),%xmm3        # 5040 <_sk_callback_sse41+0xc9c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_4444_sse41
.globl _sk_gather_4444_sse41
FUNCTION(_sk_gather_4444_sse41)
_sk_gather_4444_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,196,4,81,0                // pinsrw        $0x0,(%r9,%r10,2),%xmm0
  .byte  102,65,15,196,4,73,1                // pinsrw        $0x1,(%r9,%rcx,2),%xmm0
  .byte  67,15,183,12,65                     // movzwl        (%r9,%r8,2),%ecx
  .byte  102,15,196,193,2                    // pinsrw        $0x2,%ecx,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,192,3                    // pinsrw        $0x3,%eax,%xmm0
  .byte  102,15,56,51,216                    // pmovzxwd      %xmm0,%xmm3
  .byte  102,15,111,5,145,32,0,0             // movdqa        0x2091(%rip),%xmm0        # 5050 <_sk_callback_sse41+0xcac>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,147,32,0,0                  // mulps         0x2093(%rip),%xmm0        # 5060 <_sk_callback_sse41+0xcbc>
  .byte  102,15,111,13,155,32,0,0            // movdqa        0x209b(%rip),%xmm1        # 5070 <_sk_callback_sse41+0xccc>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,157,32,0,0                 // mulps         0x209d(%rip),%xmm1        # 5080 <_sk_callback_sse41+0xcdc>
  .byte  102,15,111,21,165,32,0,0            // movdqa        0x20a5(%rip),%xmm2        # 5090 <_sk_callback_sse41+0xcec>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,167,32,0,0                 // mulps         0x20a7(%rip),%xmm2        # 50a0 <_sk_callback_sse41+0xcfc>
  .byte  102,15,219,29,175,32,0,0            // pand          0x20af(%rip),%xmm3        # 50b0 <_sk_callback_sse41+0xd0c>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,181,32,0,0                 // mulps         0x20b5(%rip),%xmm3        # 50c0 <_sk_callback_sse41+0xd1c>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_sse41
.globl _sk_store_4444_sse41
FUNCTION(_sk_store_4444_sse41)
_sk_store_4444_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,180,32,0,0               // movaps        0x20b4(%rip),%xmm8        # 50d0 <_sk_callback_sse41+0xd2c>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,12                // pslld         $0xc,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,4                 // pslld         $0x4,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,193                    // orpd          %xmm9,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,68,15,214,4,120                 // movq          %xmm8,(%rax,%rdi,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_8888_sse41
.globl _sk_load_8888_sse41
FUNCTION(_sk_load_8888_sse41)
_sk_load_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  15,16,28,184                        // movups        (%rax,%rdi,4),%xmm3
  .byte  15,40,5,83,32,0,0                   // movaps        0x2053(%rip),%xmm0        # 50e0 <_sk_callback_sse41+0xd3c>
  .byte  15,84,195                           // andps         %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,85,32,0,0                // movaps        0x2055(%rip),%xmm8        # 50f0 <_sk_callback_sse41+0xd4c>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  102,15,56,0,13,85,32,0,0            // pshufb        0x2055(%rip),%xmm1        # 5100 <_sk_callback_sse41+0xd5c>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  102,15,56,0,21,82,32,0,0            // pshufb        0x2052(%rip),%xmm2        # 5110 <_sk_callback_sse41+0xd6c>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_8888_sse41
.globl _sk_gather_8888_sse41
FUNCTION(_sk_gather_8888_sse41)
_sk_gather_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,58,22,193,1               // pextrq        $0x1,%xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,110,28,129                // movd          (%r9,%r8,4),%xmm3
  .byte  102,65,15,58,34,28,129,1            // pinsrd        $0x1,(%r9,%rax,4),%xmm3
  .byte  102,67,15,58,34,28,145,2            // pinsrd        $0x2,(%r9,%r10,4),%xmm3
  .byte  102,65,15,58,34,28,137,3            // pinsrd        $0x3,(%r9,%rcx,4),%xmm3
  .byte  102,15,111,5,235,31,0,0             // movdqa        0x1feb(%rip),%xmm0        # 5120 <_sk_callback_sse41+0xd7c>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,236,31,0,0               // movaps        0x1fec(%rip),%xmm8        # 5130 <_sk_callback_sse41+0xd8c>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,56,0,13,235,31,0,0           // pshufb        0x1feb(%rip),%xmm1        # 5140 <_sk_callback_sse41+0xd9c>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,56,0,21,231,31,0,0           // pshufb        0x1fe7(%rip),%xmm2        # 5150 <_sk_callback_sse41+0xdac>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_sse41
.globl _sk_store_8888_sse41
FUNCTION(_sk_store_8888_sse41)
_sk_store_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,211,31,0,0               // movaps        0x1fd3(%rip),%xmm8        # 5160 <_sk_callback_sse41+0xdbc>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,24                // pslld         $0x18,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  102,69,15,235,194                   // por           %xmm10,%xmm8
  .byte  243,68,15,127,4,184                 // movdqu        %xmm8,(%rax,%rdi,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_f16_sse41
.globl _sk_load_f16_sse41
FUNCTION(_sk_load_f16_sse41)
_sk_load_f16_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  243,15,111,4,248                    // movdqu        (%rax,%rdi,8),%xmm0
  .byte  243,15,111,76,248,16                // movdqu        0x10(%rax,%rdi,8),%xmm1
  .byte  102,68,15,111,200                   // movdqa        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,68,15,97,216                    // punpcklwd     %xmm0,%xmm11
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,65,15,56,51,203                 // pmovzxwd      %xmm11,%xmm1
  .byte  102,68,15,111,5,76,31,0,0           // movdqa        0x1f4c(%rip),%xmm8        # 5170 <_sk_callback_sse41+0xdcc>
  .byte  102,15,111,209                      // movdqa        %xmm1,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,239,202                      // pxor          %xmm2,%xmm1
  .byte  102,15,111,29,71,31,0,0             // movdqa        0x1f47(%rip),%xmm3        # 5180 <_sk_callback_sse41+0xddc>
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,56,63,195                    // pmaxud        %xmm3,%xmm0
  .byte  102,15,118,193                      // pcmpeqd       %xmm1,%xmm0
  .byte  102,15,114,241,13                   // pslld         $0xd,%xmm1
  .byte  102,15,235,202                      // por           %xmm2,%xmm1
  .byte  102,68,15,111,21,51,31,0,0          // movdqa        0x1f33(%rip),%xmm10        # 5190 <_sk_callback_sse41+0xdec>
  .byte  102,65,15,254,202                   // paddd         %xmm10,%xmm1
  .byte  102,15,219,193                      // pand          %xmm1,%xmm0
  .byte  102,65,15,115,219,8                 // psrldq        $0x8,%xmm11
  .byte  102,69,15,56,51,219                 // pmovzxwd      %xmm11,%xmm11
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,68,15,239,218                   // pxor          %xmm2,%xmm11
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,111,203                   // movdqa        %xmm11,%xmm1
  .byte  102,15,56,63,203                    // pmaxud        %xmm3,%xmm1
  .byte  102,65,15,118,203                   // pcmpeqd       %xmm11,%xmm1
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,68,15,235,218                   // por           %xmm2,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,203                   // pand          %xmm11,%xmm1
  .byte  102,69,15,56,51,217                 // pmovzxwd      %xmm9,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,69,15,219,224                   // pand          %xmm8,%xmm12
  .byte  102,69,15,239,220                   // pxor          %xmm12,%xmm11
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,15,56,63,211                    // pmaxud        %xmm3,%xmm2
  .byte  102,65,15,118,211                   // pcmpeqd       %xmm11,%xmm2
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,211                   // pand          %xmm11,%xmm2
  .byte  102,65,15,115,217,8                 // psrldq        $0x8,%xmm9
  .byte  102,69,15,56,51,201                 // pmovzxwd      %xmm9,%xmm9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,69,15,239,200                   // pxor          %xmm8,%xmm9
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,56,63,217                 // pmaxud        %xmm9,%xmm3
  .byte  102,65,15,118,217                   // pcmpeqd       %xmm9,%xmm3
  .byte  102,65,15,114,241,13                // pslld         $0xd,%xmm9
  .byte  102,69,15,235,200                   // por           %xmm8,%xmm9
  .byte  102,69,15,254,202                   // paddd         %xmm10,%xmm9
  .byte  102,65,15,219,217                   // pand          %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_f16_sse41
.globl _sk_gather_f16_sse41
FUNCTION(_sk_gather_f16_sse41)
_sk_gather_f16_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,58,22,193,1               // pextrq        $0x1,%xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,65,15,126,4,201                 // movq          (%r9,%rcx,8),%xmm0
  .byte  243,67,15,126,12,209                // movq          (%r9,%r10,8),%xmm1
  .byte  102,15,108,200                      // punpcklqdq    %xmm0,%xmm1
  .byte  243,65,15,126,4,193                 // movq          (%r9,%rax,8),%xmm0
  .byte  243,67,15,126,20,193                // movq          (%r9,%r8,8),%xmm2
  .byte  102,15,108,208                      // punpcklqdq    %xmm0,%xmm2
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,209                      // punpckhwd     %xmm1,%xmm2
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,68,15,97,218                    // punpcklwd     %xmm2,%xmm11
  .byte  102,68,15,105,202                   // punpckhwd     %xmm2,%xmm9
  .byte  102,65,15,56,51,203                 // pmovzxwd      %xmm11,%xmm1
  .byte  102,68,15,111,5,241,29,0,0          // movdqa        0x1df1(%rip),%xmm8        # 51a0 <_sk_callback_sse41+0xdfc>
  .byte  102,15,111,209                      // movdqa        %xmm1,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,239,202                      // pxor          %xmm2,%xmm1
  .byte  102,15,111,29,236,29,0,0            // movdqa        0x1dec(%rip),%xmm3        # 51b0 <_sk_callback_sse41+0xe0c>
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,56,63,195                    // pmaxud        %xmm3,%xmm0
  .byte  102,15,118,193                      // pcmpeqd       %xmm1,%xmm0
  .byte  102,15,114,241,13                   // pslld         $0xd,%xmm1
  .byte  102,15,235,202                      // por           %xmm2,%xmm1
  .byte  102,68,15,111,21,216,29,0,0         // movdqa        0x1dd8(%rip),%xmm10        # 51c0 <_sk_callback_sse41+0xe1c>
  .byte  102,65,15,254,202                   // paddd         %xmm10,%xmm1
  .byte  102,15,219,193                      // pand          %xmm1,%xmm0
  .byte  102,65,15,115,219,8                 // psrldq        $0x8,%xmm11
  .byte  102,69,15,56,51,219                 // pmovzxwd      %xmm11,%xmm11
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,68,15,239,218                   // pxor          %xmm2,%xmm11
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,111,203                   // movdqa        %xmm11,%xmm1
  .byte  102,15,56,63,203                    // pmaxud        %xmm3,%xmm1
  .byte  102,65,15,118,203                   // pcmpeqd       %xmm11,%xmm1
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,68,15,235,218                   // por           %xmm2,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,203                   // pand          %xmm11,%xmm1
  .byte  102,69,15,56,51,217                 // pmovzxwd      %xmm9,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,69,15,219,224                   // pand          %xmm8,%xmm12
  .byte  102,69,15,239,220                   // pxor          %xmm12,%xmm11
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,15,56,63,211                    // pmaxud        %xmm3,%xmm2
  .byte  102,65,15,118,211                   // pcmpeqd       %xmm11,%xmm2
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,211                   // pand          %xmm11,%xmm2
  .byte  102,65,15,115,217,8                 // psrldq        $0x8,%xmm9
  .byte  102,69,15,56,51,201                 // pmovzxwd      %xmm9,%xmm9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,69,15,239,200                   // pxor          %xmm8,%xmm9
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,56,63,217                 // pmaxud        %xmm9,%xmm3
  .byte  102,65,15,118,217                   // pcmpeqd       %xmm9,%xmm3
  .byte  102,65,15,114,241,13                // pslld         $0xd,%xmm9
  .byte  102,69,15,235,200                   // por           %xmm8,%xmm9
  .byte  102,69,15,254,202                   // paddd         %xmm10,%xmm9
  .byte  102,65,15,219,217                   // pand          %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_sse41
.globl _sk_store_f16_sse41
FUNCTION(_sk_store_f16_sse41)
_sk_store_f16_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,111,21,14,29,0,0          // movdqa        0x1d0e(%rip),%xmm10        # 51d0 <_sk_callback_sse41+0xe2c>
  .byte  102,68,15,111,224                   // movdqa        %xmm0,%xmm12
  .byte  102,68,15,111,232                   // movdqa        %xmm0,%xmm13
  .byte  102,69,15,219,234                   // pand          %xmm10,%xmm13
  .byte  102,69,15,239,229                   // pxor          %xmm13,%xmm12
  .byte  102,68,15,111,13,1,29,0,0           // movdqa        0x1d01(%rip),%xmm9        # 51e0 <_sk_callback_sse41+0xe3c>
  .byte  102,65,15,114,213,16                // psrld         $0x10,%xmm13
  .byte  102,69,15,111,193                   // movdqa        %xmm9,%xmm8
  .byte  102,69,15,102,196                   // pcmpgtd       %xmm12,%xmm8
  .byte  102,65,15,114,212,13                // psrld         $0xd,%xmm12
  .byte  102,68,15,111,29,242,28,0,0         // movdqa        0x1cf2(%rip),%xmm11        # 51f0 <_sk_callback_sse41+0xe4c>
  .byte  102,69,15,235,235                   // por           %xmm11,%xmm13
  .byte  102,69,15,254,236                   // paddd         %xmm12,%xmm13
  .byte  102,69,15,223,197                   // pandn         %xmm13,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,68,15,111,233                   // movdqa        %xmm1,%xmm13
  .byte  102,68,15,111,241                   // movdqa        %xmm1,%xmm14
  .byte  102,69,15,219,242                   // pand          %xmm10,%xmm14
  .byte  102,69,15,239,238                   // pxor          %xmm14,%xmm13
  .byte  102,65,15,114,214,16                // psrld         $0x10,%xmm14
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,69,15,102,229                   // pcmpgtd       %xmm13,%xmm12
  .byte  102,65,15,114,213,13                // psrld         $0xd,%xmm13
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,254,245                   // paddd         %xmm13,%xmm14
  .byte  102,69,15,223,230                   // pandn         %xmm14,%xmm12
  .byte  102,69,15,56,43,228                 // packusdw      %xmm12,%xmm12
  .byte  102,68,15,111,242                   // movdqa        %xmm2,%xmm14
  .byte  102,68,15,111,250                   // movdqa        %xmm2,%xmm15
  .byte  102,69,15,219,250                   // pand          %xmm10,%xmm15
  .byte  102,69,15,239,247                   // pxor          %xmm15,%xmm14
  .byte  102,65,15,114,215,16                // psrld         $0x10,%xmm15
  .byte  102,69,15,111,233                   // movdqa        %xmm9,%xmm13
  .byte  102,69,15,102,238                   // pcmpgtd       %xmm14,%xmm13
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,251                   // por           %xmm11,%xmm15
  .byte  102,69,15,254,254                   // paddd         %xmm14,%xmm15
  .byte  102,69,15,223,239                   // pandn         %xmm15,%xmm13
  .byte  102,69,15,56,43,237                 // packusdw      %xmm13,%xmm13
  .byte  102,68,15,219,211                   // pand          %xmm3,%xmm10
  .byte  102,68,15,111,243                   // movdqa        %xmm3,%xmm14
  .byte  102,69,15,239,242                   // pxor          %xmm10,%xmm14
  .byte  102,65,15,114,210,16                // psrld         $0x10,%xmm10
  .byte  102,69,15,102,206                   // pcmpgtd       %xmm14,%xmm9
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,211                   // por           %xmm11,%xmm10
  .byte  102,69,15,254,214                   // paddd         %xmm14,%xmm10
  .byte  102,69,15,223,202                   // pandn         %xmm10,%xmm9
  .byte  102,69,15,56,43,201                 // packusdw      %xmm9,%xmm9
  .byte  102,69,15,97,196                    // punpcklwd     %xmm12,%xmm8
  .byte  102,69,15,97,233                    // punpcklwd     %xmm9,%xmm13
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,69,15,98,205                    // punpckldq     %xmm13,%xmm9
  .byte  243,68,15,127,12,248                // movdqu        %xmm9,(%rax,%rdi,8)
  .byte  102,69,15,106,197                   // punpckhdq     %xmm13,%xmm8
  .byte  243,68,15,127,68,248,16             // movdqu        %xmm8,0x10(%rax,%rdi,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_u16_be_sse41
.globl _sk_load_u16_be_sse41
FUNCTION(_sk_load_u16_be_sse41)
_sk_load_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  243,15,111,4,248                    // movdqu        (%rax,%rdi,8),%xmm0
  .byte  243,15,111,76,248,16                // movdqu        0x10(%rax,%rdi,8),%xmm1
  .byte  102,15,111,208                      // movdqa        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,15,56,51,193                    // pmovzxwd      %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,193,27,0,0               // movaps        0x1bc1(%rip),%xmm8        # 5200 <_sk_callback_sse41+0xe5c>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,15,56,51,203                    // pmovzxwd      %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,65,15,235,209                   // por           %xmm9,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,68,15,111,203                   // movdqa        %xmm3,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,217                   // por           %xmm9,%xmm3
  .byte  102,15,56,51,219                    // pmovzxwd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgb_u16_be_sse41
.globl _sk_load_rgb_u16_be_sse41
FUNCTION(_sk_load_rgb_u16_be_sse41)
_sk_load_rgb_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,141,12,127                       // lea           (%rdi,%rdi,2),%rcx
  .byte  243,15,111,20,72                    // movdqu        (%rax,%rcx,2),%xmm2
  .byte  243,15,111,68,72,8                  // movdqu        0x8(%rax,%rcx,2),%xmm0
  .byte  102,15,115,216,4                    // psrldq        $0x4,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,115,217,6                    // psrldq        $0x6,%xmm1
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,111,194                      // movdqa        %xmm2,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,112,216,78                   // pshufd        $0x4e,%xmm0,%xmm3
  .byte  102,15,105,209                      // punpckhwd     %xmm1,%xmm2
  .byte  102,15,111,200                      // movdqa        %xmm0,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,208,8                    // psrlw         $0x8,%xmm0
  .byte  102,15,235,193                      // por           %xmm1,%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,2,27,0,0                 // movaps        0x1b02(%rip),%xmm8        # 5210 <_sk_callback_sse41+0xe6c>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,15,56,51,203                    // pmovzxwd      %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,218                      // movdqa        %xmm2,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,15,235,211                      // por           %xmm3,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,201,26,0,0                 // movaps        0x1ac9(%rip),%xmm3        # 5220 <_sk_callback_sse41+0xe7c>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_u16_be_sse41
.globl _sk_store_u16_be_sse41
FUNCTION(_sk_store_u16_be_sse41)
_sk_store_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,13,202,26,0,0              // movaps        0x1aca(%rip),%xmm9        # 5230 <_sk_callback_sse41+0xe8c>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,113,242,8                 // psllw         $0x8,%xmm10
  .byte  102,65,15,113,208,8                 // psrlw         $0x8,%xmm8
  .byte  102,69,15,235,194                   // por           %xmm10,%xmm8
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,69,15,56,43,210                 // packusdw      %xmm10,%xmm10
  .byte  102,69,15,111,218                   // movdqa        %xmm10,%xmm11
  .byte  102,65,15,113,243,8                 // psllw         $0x8,%xmm11
  .byte  102,65,15,113,210,8                 // psrlw         $0x8,%xmm10
  .byte  102,69,15,235,211                   // por           %xmm11,%xmm10
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  102,69,15,91,219                    // cvtps2dq      %xmm11,%xmm11
  .byte  102,69,15,56,43,219                 // packusdw      %xmm11,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,211,8                 // psrlw         $0x8,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,69,15,56,43,201                 // packusdw      %xmm9,%xmm9
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,209,8                 // psrlw         $0x8,%xmm9
  .byte  102,69,15,235,204                   // por           %xmm12,%xmm9
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,97,217                    // punpcklwd     %xmm9,%xmm11
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,69,15,98,203                    // punpckldq     %xmm11,%xmm9
  .byte  243,68,15,127,12,248                // movdqu        %xmm9,(%rax,%rdi,8)
  .byte  102,69,15,106,195                   // punpckhdq     %xmm11,%xmm8
  .byte  243,68,15,127,68,248,16             // movdqu        %xmm8,0x10(%rax,%rdi,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_f32_sse41
.globl _sk_load_f32_sse41
FUNCTION(_sk_load_f32_sse41)
_sk_load_f32_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,137,249                          // mov           %rdi,%rcx
  .byte  72,193,225,4                        // shl           $0x4,%rcx
  .byte  68,15,16,4,8                        // movups        (%rax,%rcx,1),%xmm8
  .byte  15,16,68,8,16                       // movups        0x10(%rax,%rcx,1),%xmm0
  .byte  15,16,92,8,32                       // movups        0x20(%rax,%rcx,1),%xmm3
  .byte  68,15,16,76,8,48                    // movups        0x30(%rax,%rcx,1),%xmm9
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,20,208                           // unpcklps      %xmm0,%xmm2
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  68,15,21,192                        // unpckhps      %xmm0,%xmm8
  .byte  65,15,21,217                        // unpckhps      %xmm9,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,202                           // movhlps       %xmm2,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  65,15,18,216                        // movhlps       %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f32_sse41
.globl _sk_store_f32_sse41
FUNCTION(_sk_store_f32_sse41)
_sk_store_f32_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,137,249                          // mov           %rdi,%rcx
  .byte  72,193,225,4                        // shl           $0x4,%rcx
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  68,15,20,219                        // unpcklps      %xmm3,%xmm11
  .byte  68,15,21,193                        // unpckhps      %xmm1,%xmm8
  .byte  68,15,21,211                        // unpckhps      %xmm3,%xmm10
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  102,69,15,20,227                    // unpcklpd      %xmm11,%xmm12
  .byte  69,15,18,217                        // movhlps       %xmm9,%xmm11
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  102,69,15,20,202                    // unpcklpd      %xmm10,%xmm9
  .byte  69,15,18,208                        // movhlps       %xmm8,%xmm10
  .byte  102,68,15,17,36,8                   // movupd        %xmm12,(%rax,%rcx,1)
  .byte  68,15,17,92,8,16                    // movups        %xmm11,0x10(%rax,%rcx,1)
  .byte  102,68,15,17,76,8,32                // movupd        %xmm9,0x20(%rax,%rcx,1)
  .byte  68,15,17,84,8,48                    // movups        %xmm10,0x30(%rax,%rcx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_sse41
.globl _sk_clamp_x_sse41
FUNCTION(_sk_clamp_x_sse41)
_sk_clamp_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  68,15,93,192                        // minps         %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_sse41
.globl _sk_clamp_y_sse41
FUNCTION(_sk_clamp_y_sse41)
_sk_clamp_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,193                        // maxps         %xmm1,%xmm8
  .byte  243,15,16,8                         // movss         (%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  68,15,93,193                        // minps         %xmm1,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_sse41
.globl _sk_repeat_x_sse41
FUNCTION(_sk_repeat_x_sse41)
_sk_repeat_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,94,200                        // divps         %xmm8,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_sse41
.globl _sk_repeat_y_sse41
FUNCTION(_sk_repeat_y_sse41)
_sk_repeat_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,94,200                        // divps         %xmm8,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_sse41
.globl _sk_mirror_x_sse41
FUNCTION(_sk_mirror_x_sse41)
_sk_mirror_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  243,69,15,88,192                    // addss         %xmm8,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  69,15,94,208                        // divps         %xmm8,%xmm10
  .byte  102,69,15,58,8,210,1                // roundps       $0x1,%xmm10,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  65,15,93,193                        // minps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_sse41
.globl _sk_mirror_y_sse41
FUNCTION(_sk_mirror_y_sse41)
_sk_mirror_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  243,69,15,88,192                    // addss         %xmm8,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,94,208                        // divps         %xmm8,%xmm10
  .byte  102,69,15,58,8,210,1                // roundps       $0x1,%xmm10,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  65,15,84,200                        // andps         %xmm8,%xmm1
  .byte  65,15,93,201                        // minps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_sse41
.globl _sk_luminance_to_alpha_sse41
FUNCTION(_sk_luminance_to_alpha_sse41)
_sk_luminance_to_alpha_sse41:
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,89,5,38,24,0,0                   // mulps         0x1826(%rip),%xmm0        # 5240 <_sk_callback_sse41+0xe9c>
  .byte  15,89,13,47,24,0,0                  // mulps         0x182f(%rip),%xmm1        # 5250 <_sk_callback_sse41+0xeac>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,29,53,24,0,0                  // mulps         0x1835(%rip),%xmm3        # 5260 <_sk_callback_sse41+0xebc>
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_sse41
.globl _sk_matrix_2x3_sse41
FUNCTION(_sk_matrix_2x3_sse41)
_sk_matrix_2x3_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,16                  // movss         0x10(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_sse41
.globl _sk_matrix_3x4_sse41
FUNCTION(_sk_matrix_3x4_sse41)
_sk_matrix_3x4_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,36                  // movss         0x24(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_sse41
.globl _sk_matrix_4x5_sse41
FUNCTION(_sk_matrix_4x5_sse41)
_sk_matrix_4x5_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,32                  // movss         0x20(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,48                  // movss         0x30(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,64                 // movss         0x40(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,20                  // movss         0x14(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,36                  // movss         0x24(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,52                  // movss         0x34(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,68                 // movss         0x44(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,56                 // movss         0x38(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,72                 // movss         0x48(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  243,68,15,16,88,12                  // movss         0xc(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,28                  // movss         0x1c(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,60                 // movss         0x3c(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  243,68,15,16,120,76                 // movss         0x4c(%rax),%xmm15
  .byte  69,15,198,255,0                     // shufps        $0x0,%xmm15,%xmm15
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,247                        // addps         %xmm15,%xmm14
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_sse41
.globl _sk_matrix_perspective_sse41
FUNCTION(_sk_matrix_perspective_sse41)
_sk_matrix_perspective_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  243,68,15,16,80,24                  // movss         0x18(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,83,202                        // rcpps         %xmm10,%xmm1
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_sse41
.globl _sk_gradient_sse41
FUNCTION(_sk_gradient_sse41)
_sk_gradient_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,24                  // movss         0x18(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,28                 // movss         0x1c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  72,139,8                            // mov           (%rax),%rcx
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,132,254,0,0,0                    // je            3ecd <_sk_gradient_sse41+0x138>
  .byte  15,41,100,36,168                    // movaps        %xmm4,-0x58(%rsp)
  .byte  15,41,108,36,184                    // movaps        %xmm5,-0x48(%rsp)
  .byte  15,41,116,36,200                    // movaps        %xmm6,-0x38(%rsp)
  .byte  15,41,124,36,216                    // movaps        %xmm7,-0x28(%rsp)
  .byte  72,139,64,8                         // mov           0x8(%rax),%rax
  .byte  72,131,192,32                       // add           $0x20,%rax
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  69,15,40,243                        // movaps        %xmm11,%xmm14
  .byte  69,15,40,252                        // movaps        %xmm12,%xmm15
  .byte  68,15,41,108,36,232                 // movaps        %xmm13,-0x18(%rsp)
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  243,15,16,80,224                    // movss         -0x20(%rax),%xmm2
  .byte  243,68,15,16,72,228                 // movss         -0x1c(%rax),%xmm9
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,194,194,1                        // cmpltps       %xmm2,%xmm0
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,68,15,56,20,201                 // blendvps      %xmm0,%xmm1,%xmm9
  .byte  243,15,16,72,232                    // movss         -0x18(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  102,15,56,20,205                    // blendvps      %xmm0,%xmm5,%xmm1
  .byte  243,15,16,80,236                    // movss         -0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  102,15,56,20,214                    // blendvps      %xmm0,%xmm6,%xmm2
  .byte  243,15,16,88,240                    // movss         -0x10(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  102,15,56,20,223                    // blendvps      %xmm0,%xmm7,%xmm3
  .byte  243,68,15,16,80,244                 // movss         -0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  102,69,15,56,20,208                 // blendvps      %xmm0,%xmm8,%xmm10
  .byte  243,68,15,16,88,248                 // movss         -0x8(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  102,69,15,56,20,222                 // blendvps      %xmm0,%xmm14,%xmm11
  .byte  243,68,15,16,96,252                 // movss         -0x4(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  102,69,15,56,20,231                 // blendvps      %xmm0,%xmm15,%xmm12
  .byte  243,68,15,16,40                     // movss         (%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  102,68,15,56,20,108,36,232          // blendvps      %xmm0,-0x18(%rsp),%xmm13
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  72,131,192,36                       // add           $0x24,%rax
  .byte  72,255,201                          // dec           %rcx
  .byte  15,133,65,255,255,255               // jne           3df8 <_sk_gradient_sse41+0x63>
  .byte  15,40,124,36,216                    // movaps        -0x28(%rsp),%xmm7
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,40,108,36,184                    // movaps        -0x48(%rsp),%xmm5
  .byte  15,40,100,36,168                    // movaps        -0x58(%rsp),%xmm4
  .byte  235,13                              // jmp           3eda <_sk_gradient_sse41+0x145>
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_sse41
.globl _sk_evenly_spaced_2_stop_gradient_sse41
FUNCTION(_sk_evenly_spaced_2_stop_gradient_sse41)
_sk_evenly_spaced_2_stop_gradient_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,72,28                  // movss         0x1c(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_sse41
.globl _sk_xy_to_unit_angle_sse41
FUNCTION(_sk_xy_to_unit_angle_sse41)
_sk_xy_to_unit_angle_sse41:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  68,15,92,217                        // subps         %xmm1,%xmm11
  .byte  68,15,84,217                        // andps         %xmm1,%xmm11
  .byte  68,15,40,224                        // movaps        %xmm0,%xmm12
  .byte  69,15,93,227                        // minps         %xmm11,%xmm12
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  69,15,95,211                        // maxps         %xmm11,%xmm10
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,89,237                        // mulps         %xmm13,%xmm13
  .byte  68,15,40,21,190,18,0,0              // movaps        0x12be(%rip),%xmm10        # 5270 <_sk_callback_sse41+0xecc>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,194,18,0,0              // addps         0x12c2(%rip),%xmm10        # 5280 <_sk_callback_sse41+0xedc>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,198,18,0,0              // addps         0x12c6(%rip),%xmm10        # 5290 <_sk_callback_sse41+0xeec>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,202,18,0,0              // addps         0x12ca(%rip),%xmm10        # 52a0 <_sk_callback_sse41+0xefc>
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  68,15,40,29,201,18,0,0              // movaps        0x12c9(%rip),%xmm11        # 52b0 <_sk_callback_sse41+0xf0c>
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  69,15,194,200,1                     // cmpltps       %xmm8,%xmm9
  .byte  68,15,40,29,194,18,0,0              // movaps        0x12c2(%rip),%xmm11        # 52c0 <_sk_callback_sse41+0xf1c>
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,192,1                     // cmpltps       %xmm8,%xmm0
  .byte  68,15,40,13,180,18,0,0              // movaps        0x12b4(%rip),%xmm9        # 52d0 <_sk_callback_sse41+0xf2c>
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  102,69,15,56,20,209                 // blendvps      %xmm0,%xmm9,%xmm10
  .byte  69,15,194,194,7                     // cmpordps      %xmm10,%xmm8
  .byte  69,15,84,194                        // andps         %xmm10,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_sse41
.globl _sk_xy_to_radius_sse41
FUNCTION(_sk_xy_to_radius_sse41)
_sk_xy_to_radius_sse41:
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  65,15,82,192                        // rsqrtps       %xmm8,%xmm0
  .byte  15,83,192                           // rcpps         %xmm0,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_sse41
.globl _sk_save_xy_sse41
FUNCTION(_sk_save_xy_sse41)
_sk_save_xy_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,133,18,0,0               // movaps        0x1285(%rip),%xmm8        # 52e0 <_sk_callback_sse41+0xf3c>
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  102,69,15,58,8,209,1                // roundps       $0x1,%xmm9,%xmm10
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  102,69,15,58,8,208,1                // roundps       $0x1,%xmm8,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  15,17,72,32                         // movups        %xmm1,0x20(%rax)
  .byte  68,15,17,72,64                      // movups        %xmm9,0x40(%rax)
  .byte  68,15,17,64,96                      // movups        %xmm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_sse41
.globl _sk_accumulate_sse41
FUNCTION(_sk_accumulate_sse41)
_sk_accumulate_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,16,128,128,0,0,0              // movups        0x80(%rax),%xmm8
  .byte  68,15,16,136,160,0,0,0              // movups        0xa0(%rax),%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  65,15,88,224                        // addps         %xmm8,%xmm4
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  65,15,88,232                        // addps         %xmm8,%xmm5
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,88,240                        // addps         %xmm8,%xmm6
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_sse41
.globl _sk_bilinear_nx_sse41
FUNCTION(_sk_bilinear_nx_sse41)
_sk_bilinear_nx_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,7,18,0,0                    // addps         0x1207(%rip),%xmm0        # 52f0 <_sk_callback_sse41+0xf4c>
  .byte  68,15,40,13,15,18,0,0               // movaps        0x120f(%rip),%xmm9        # 5300 <_sk_callback_sse41+0xf5c>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_sse41
.globl _sk_bilinear_px_sse41
FUNCTION(_sk_bilinear_px_sse41)
_sk_bilinear_px_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,254,17,0,0                  // addps         0x11fe(%rip),%xmm0        # 5310 <_sk_callback_sse41+0xf6c>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_sse41
.globl _sk_bilinear_ny_sse41
FUNCTION(_sk_bilinear_ny_sse41)
_sk_bilinear_ny_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,240,17,0,0                 // addps         0x11f0(%rip),%xmm1        # 5320 <_sk_callback_sse41+0xf7c>
  .byte  68,15,40,13,248,17,0,0              // movaps        0x11f8(%rip),%xmm9        # 5330 <_sk_callback_sse41+0xf8c>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_sse41
.globl _sk_bilinear_py_sse41
FUNCTION(_sk_bilinear_py_sse41)
_sk_bilinear_py_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,230,17,0,0                 // addps         0x11e6(%rip),%xmm1        # 5340 <_sk_callback_sse41+0xf9c>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_sse41
.globl _sk_bicubic_n3x_sse41
FUNCTION(_sk_bicubic_n3x_sse41)
_sk_bicubic_n3x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,217,17,0,0                  // addps         0x11d9(%rip),%xmm0        # 5350 <_sk_callback_sse41+0xfac>
  .byte  68,15,40,13,225,17,0,0              // movaps        0x11e1(%rip),%xmm9        # 5360 <_sk_callback_sse41+0xfbc>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,221,17,0,0              // mulps         0x11dd(%rip),%xmm9        # 5370 <_sk_callback_sse41+0xfcc>
  .byte  68,15,88,13,229,17,0,0              // addps         0x11e5(%rip),%xmm9        # 5380 <_sk_callback_sse41+0xfdc>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_sse41
.globl _sk_bicubic_n1x_sse41
FUNCTION(_sk_bicubic_n1x_sse41)
_sk_bicubic_n1x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,212,17,0,0                  // addps         0x11d4(%rip),%xmm0        # 5390 <_sk_callback_sse41+0xfec>
  .byte  68,15,40,13,220,17,0,0              // movaps        0x11dc(%rip),%xmm9        # 53a0 <_sk_callback_sse41+0xffc>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,224,17,0,0               // movaps        0x11e0(%rip),%xmm8        # 53b0 <_sk_callback_sse41+0x100c>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,228,17,0,0               // addps         0x11e4(%rip),%xmm8        # 53c0 <_sk_callback_sse41+0x101c>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,232,17,0,0               // addps         0x11e8(%rip),%xmm8        # 53d0 <_sk_callback_sse41+0x102c>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,236,17,0,0               // addps         0x11ec(%rip),%xmm8        # 53e0 <_sk_callback_sse41+0x103c>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_sse41
.globl _sk_bicubic_p1x_sse41
FUNCTION(_sk_bicubic_p1x_sse41)
_sk_bicubic_p1x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,230,17,0,0               // movaps        0x11e6(%rip),%xmm8        # 53f0 <_sk_callback_sse41+0x104c>
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,72,64                      // movups        0x40(%rax),%xmm9
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,21,226,17,0,0              // movaps        0x11e2(%rip),%xmm10        # 5400 <_sk_callback_sse41+0x105c>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,230,17,0,0              // addps         0x11e6(%rip),%xmm10        # 5410 <_sk_callback_sse41+0x106c>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,226,17,0,0              // addps         0x11e2(%rip),%xmm10        # 5420 <_sk_callback_sse41+0x107c>
  .byte  68,15,17,144,128,0,0,0              // movups        %xmm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_sse41
.globl _sk_bicubic_p3x_sse41
FUNCTION(_sk_bicubic_p3x_sse41)
_sk_bicubic_p3x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,213,17,0,0                  // addps         0x11d5(%rip),%xmm0        # 5430 <_sk_callback_sse41+0x108c>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,213,17,0,0               // mulps         0x11d5(%rip),%xmm8        # 5440 <_sk_callback_sse41+0x109c>
  .byte  68,15,88,5,221,17,0,0               // addps         0x11dd(%rip),%xmm8        # 5450 <_sk_callback_sse41+0x10ac>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_sse41
.globl _sk_bicubic_n3y_sse41
FUNCTION(_sk_bicubic_n3y_sse41)
_sk_bicubic_n3y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,203,17,0,0                 // addps         0x11cb(%rip),%xmm1        # 5460 <_sk_callback_sse41+0x10bc>
  .byte  68,15,40,13,211,17,0,0              // movaps        0x11d3(%rip),%xmm9        # 5470 <_sk_callback_sse41+0x10cc>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,207,17,0,0              // mulps         0x11cf(%rip),%xmm9        # 5480 <_sk_callback_sse41+0x10dc>
  .byte  68,15,88,13,215,17,0,0              // addps         0x11d7(%rip),%xmm9        # 5490 <_sk_callback_sse41+0x10ec>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_sse41
.globl _sk_bicubic_n1y_sse41
FUNCTION(_sk_bicubic_n1y_sse41)
_sk_bicubic_n1y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,197,17,0,0                 // addps         0x11c5(%rip),%xmm1        # 54a0 <_sk_callback_sse41+0x10fc>
  .byte  68,15,40,13,205,17,0,0              // movaps        0x11cd(%rip),%xmm9        # 54b0 <_sk_callback_sse41+0x110c>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,209,17,0,0               // movaps        0x11d1(%rip),%xmm8        # 54c0 <_sk_callback_sse41+0x111c>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,213,17,0,0               // addps         0x11d5(%rip),%xmm8        # 54d0 <_sk_callback_sse41+0x112c>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,217,17,0,0               // addps         0x11d9(%rip),%xmm8        # 54e0 <_sk_callback_sse41+0x113c>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,221,17,0,0               // addps         0x11dd(%rip),%xmm8        # 54f0 <_sk_callback_sse41+0x114c>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_sse41
.globl _sk_bicubic_p1y_sse41
FUNCTION(_sk_bicubic_p1y_sse41)
_sk_bicubic_p1y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,215,17,0,0               // movaps        0x11d7(%rip),%xmm8        # 5500 <_sk_callback_sse41+0x115c>
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,72,96                      // movups        0x60(%rax),%xmm9
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,21,210,17,0,0              // movaps        0x11d2(%rip),%xmm10        # 5510 <_sk_callback_sse41+0x116c>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,214,17,0,0              // addps         0x11d6(%rip),%xmm10        # 5520 <_sk_callback_sse41+0x117c>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,210,17,0,0              // addps         0x11d2(%rip),%xmm10        # 5530 <_sk_callback_sse41+0x118c>
  .byte  68,15,17,144,160,0,0,0              // movups        %xmm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_sse41
.globl _sk_bicubic_p3y_sse41
FUNCTION(_sk_bicubic_p3y_sse41)
_sk_bicubic_p3y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,196,17,0,0                 // addps         0x11c4(%rip),%xmm1        # 5540 <_sk_callback_sse41+0x119c>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,196,17,0,0               // mulps         0x11c4(%rip),%xmm8        # 5550 <_sk_callback_sse41+0x11ac>
  .byte  68,15,88,5,204,17,0,0               // addps         0x11cc(%rip),%xmm8        # 5560 <_sk_callback_sse41+0x11bc>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_sse41
.globl _sk_callback_sse41
FUNCTION(_sk_callback_sse41)
_sk_callback_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,236,72                       // sub           $0x48,%rsp
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%rsp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%rsp)
  .byte  15,41,108,36,16                     // movaps        %xmm5,0x10(%rsp)
  .byte  15,41,36,36                         // movaps        %xmm4,(%rsp)
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  73,137,255                          // mov           %rdi,%r15
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,137,195                          // mov           %rax,%rbx
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,20,225                           // unpcklps      %xmm1,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,20,235                           // unpcklps      %xmm3,%xmm5
  .byte  15,21,193                           // unpckhps      %xmm1,%xmm0
  .byte  15,21,211                           // unpckhps      %xmm3,%xmm2
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  102,15,20,205                       // unpcklpd      %xmm5,%xmm1
  .byte  15,18,236                           // movhlps       %xmm4,%xmm5
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  102,15,20,218                       // unpcklpd      %xmm2,%xmm3
  .byte  15,18,208                           // movhlps       %xmm0,%xmm2
  .byte  102,15,17,75,8                      // movupd        %xmm1,0x8(%rbx)
  .byte  15,17,107,24                        // movups        %xmm5,0x18(%rbx)
  .byte  102,15,17,91,40                     // movupd        %xmm3,0x28(%rbx)
  .byte  15,17,83,56                         // movups        %xmm2,0x38(%rbx)
  .byte  190,4,0,0,0                         // mov           $0x4,%esi
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  255,19                              // callq         *(%rbx)
  .byte  72,139,131,136,0,0,0                // mov           0x88(%rbx),%rax
  .byte  15,16,32                            // movups        (%rax),%xmm4
  .byte  15,16,64,16                         // movups        0x10(%rax),%xmm0
  .byte  15,16,88,32                         // movups        0x20(%rax),%xmm3
  .byte  15,16,80,48                         // movups        0x30(%rax),%xmm2
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,20,232                           // unpcklps      %xmm0,%xmm5
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  15,21,224                           // unpckhps      %xmm0,%xmm4
  .byte  15,21,218                           // unpckhps      %xmm2,%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,205                           // movhlps       %xmm5,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  15,18,220                           // movhlps       %xmm4,%xmm3
  .byte  76,137,230                          // mov           %r12,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,255                          // mov           %r15,%rdi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  15,40,36,36                         // movaps        (%rsp),%xmm4
  .byte  15,40,108,36,16                     // movaps        0x10(%rsp),%xmm5
  .byte  15,40,116,36,32                     // movaps        0x20(%rsp),%xmm6
  .byte  15,40,124,36,48                     // movaps        0x30(%rsp),%xmm7
  .byte  72,131,196,72                       // add           $0x48,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

BALIGN16
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%rdi)
  .byte  0,224                               // add           %ah,%al
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  224,64                              // loopne        4658 <.literal16+0x1d8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        465c <.literal16+0x1dc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        4660 <.literal16+0x1e0>
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4681 <.literal16+0x201>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4685 <.literal16+0x205>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4689 <.literal16+0x209>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 468d <.literal16+0x20d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 46c1 <.literal16+0x241>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 46c5 <.literal16+0x245>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 46c9 <.literal16+0x249>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 46cd <.literal16+0x24d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4701 <.literal16+0x281>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4705 <.literal16+0x285>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4709 <.literal16+0x289>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 470d <.literal16+0x28d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4741 <.literal16+0x2c1>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4745 <.literal16+0x2c5>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4749 <.literal16+0x2c9>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 474d <.literal16+0x2cd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,145                          // cmpb          $0x91,(%rdi)
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  41,92,71,65                         // sub           %ebx,0x41(%rdi,%rax,2)
  .byte  41,92,71,65                         // sub           %ebx,0x41(%rdi,%rax,2)
  .byte  41,92,71,65                         // sub           %ebx,0x41(%rdi,%rax,2)
  .byte  41,92,71,65                         // sub           %ebx,0x41(%rdi,%rax,2)
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  168,87                              // test          $0x57,%al
  .byte  202,189,168                         // lret          $0xa8bd
  .byte  87                                  // push          %rdi
  .byte  202,189,168                         // lret          $0xa8bd
  .byte  87                                  // push          %rdi
  .byte  202,189,168                         // lret          $0xa8bd
  .byte  87                                  // push          %rdi
  .byte  202,189,194                         // lret          $0xc2bd
  .byte  135,210                             // xchg          %edx,%edx
  .byte  62,194,135,210                      // ds            retq $0xd287
  .byte  62,194,135,210                      // ds            retq $0xd287
  .byte  62,194,135,210                      // ds            retq $0xd287
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,4                            // cmpb          $0x4,(%rdi)
  .byte  231,140                             // out           %eax,$0x8c
  .byte  59,4,231                            // cmp           (%rdi,%riz,8),%eax
  .byte  140,59                              // mov           %?,(%rbx)
  .byte  4,231                               // add           $0xe7,%al
  .byte  140,59                              // mov           %?,(%rbx)
  .byte  4,231                               // add           $0xe7,%al
  .byte  140,59                              // mov           %?,(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4919 <.literal16+0x499>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        491d <.literal16+0x49d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4921 <.literal16+0x4a1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4925 <.literal16+0x4a5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a004968 <_sk_callback_sse41+0xa0005c4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3004970 <_sk_callback_sse41+0x30005cc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,129,128,128,59,129              // incl          -0x7ec47f80(%rcx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,255,0,255,0,255,0    // addl          $0xff00ff,0xff3b80(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,255                               // or            %bh,%bh
  .byte  10,255                              // or            %bh,%bh
  .byte  12,255                              // or            $0xff,%al
  .byte  14                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,128,55,128                  // add           %al,-0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,128,10,128,12,128                 // or            %al,-0x7ff37ff6(%rax)
  .byte  14                                  // (bad)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4a3b <.literal16+0x5bb>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4a3f <.literal16+0x5bf>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4a43 <.literal16+0x5c3>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4a34 <.literal16+0x5b4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4a38 <.literal16+0x5b8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4a3c <.literal16+0x5bc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4a40 <.literal16+0x5c0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4ac5 <.literal16+0x645>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           4a29 <.literal16+0x5a9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a38a6a <_sk_callback_sse41+0xffffffffe9a346c6>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4b04 <.literal16+0x684>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4b08 <.literal16+0x688>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4b0c <.literal16+0x68c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4b10 <.literal16+0x690>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4b95 <.literal16+0x715>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           4af9 <.literal16+0x679>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a38b3a <_sk_callback_sse41+0xffffffffe9a34796>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4bd4 <.literal16+0x754>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4bd8 <.literal16+0x758>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4bdc <.literal16+0x75c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4be0 <.literal16+0x760>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4c65 <.literal16+0x7e5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           4bc9 <.literal16+0x749>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a38c0a <_sk_callback_sse41+0xffffffffe9a34866>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4ca4 <.literal16+0x824>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4ca8 <.literal16+0x828>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4cac <.literal16+0x82c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4cb0 <.literal16+0x830>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4d35 <.literal16+0x8b5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           4c99 <.literal16+0x819>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a38cda <_sk_callback_sse41+0xffffffffe9a34936>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,200                               // add           %cl,%al
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  127,67                              // jg            4db7 <.literal16+0x937>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4dbb <.literal16+0x93b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4dbf <.literal16+0x93f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4dc3 <.literal16+0x943>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,203,61,13                     // or            $0xd3dcb3c,%eax
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,60,203,61                     // cmp           $0x3dcb3c0d,%eax
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  18,3                                // adc           (%rbx),%al
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  163,59,10,215,163,59,10,215,163     // movabs        %eax,0xa3d70a3ba3d70a3b
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,194,24,17       // movabs        %eax,0x1118c23c1118c23b
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,190,203,61                    // cmp           $0x3dcbbe0d,%eax
  .byte  13,190,203,61,13                    // or            $0xd3dcbbe,%eax
  .byte  190,203,61,13,190                   // mov           $0xbe0d3dcb,%esi
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           4e43 <.literal16+0x9c3>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           4e47 <.literal16+0x9c7>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           4e4b <.literal16+0x9cb>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           4e4f <.literal16+0x9cf>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4e8b <.literal16+0xa0b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4e8f <.literal16+0xa0f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4e93 <.literal16+0xa13>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3004ec0 <_sk_callback_sse41+0x3000b1c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4ef9 <.literal16+0xa79>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4efd <.literal16+0xa7d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4f01 <.literal16+0xa81>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4f05 <.literal16+0xa85>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4f69 <.literal16+0xae9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4f6d <.literal16+0xaed>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4f71 <.literal16+0xaf1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4f75 <.literal16+0xaf5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,248                               // add           %bh,%al
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            5006 <.literal16+0xb86>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            500a <.literal16+0xb8a>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            500e <.literal16+0xb8e>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            5012 <.literal16+0xb92>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5115 <.literal16+0xc95>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5119 <.literal16+0xc99>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            511d <.literal16+0xc9d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5121 <.literal16+0xca1>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3005110 <_sk_callback_sse41+0x3000d6c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3005150 <_sk_callback_sse41+0x3000dac>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            51ab <.literal16+0xd2b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            51af <.literal16+0xd2f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            51b3 <.literal16+0xd33>
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,4                       // add           %al,0x4000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,128,56                    // add           %al,0x38800000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,56,0                            // cmpb          $0x0,(%rax)
  .byte  0,128,56,0,0,128                    // add           %al,-0x7fffffc8(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            527b <.literal16+0xdfb>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            527f <.literal16+0xdff>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            5283 <.literal16+0xe03>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            5287 <.literal16+0xe07>
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,152,221,147              // fstl          -0x6c2267c3(%rbx)
  .byte  61,152,221,147,61                   // cmp           $0x3d93dd98,%eax
  .byte  152                                 // cwtl
  .byte  221,147,61,111,43,231               // fstl          -0x18d490c3(%rbx)
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  159                                 // lahf
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,212                          // lret          $0xd43c
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,128,62,0,0,128                    // add           %al,-0x7fffffc2(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         5392 <.literal16+0xf12>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5396 <.literal16+0xf16>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         539a <.literal16+0xf1a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63e225 <_sk_callback_sse41+0x3d639e81>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63e265 <_sk_callback_sse41+0x3d639ec1>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            545e <.literal16+0xfde>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5462 <.literal16+0xfe2>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5466 <.literal16+0xfe6>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         546a <.literal16+0xfea>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         54a2 <.literal16+0x1022>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         54a6 <.literal16+0x1026>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         54aa <.literal16+0x102a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63e335 <_sk_callback_sse41+0x3d639f91>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63e375 <_sk_callback_sse41+0x3d639fd1>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            556e <.literal16+0x10ee>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5572 <_sk_callback_sse41+0x11ce>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5576 <_sk_callback_sse41+0x11d2>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         557a <_sk_callback_sse41+0x11d6>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
BALIGN32

HIDDEN _sk_start_pipeline_sse2
.globl _sk_start_pipeline_sse2
FUNCTION(_sk_start_pipeline_sse2)
_sk_start_pipeline_sse2:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  73,137,207                          // mov           %rcx,%r15
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,196                          // mov           %rax,%r12
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  72,141,67,4                         // lea           0x4(%rbx),%rax
  .byte  76,57,248                           // cmp           %r15,%rax
  .byte  118,5                               // jbe           28 <_sk_start_pipeline_sse2+0x28>
  .byte  72,137,216                          // mov           %rbx,%rax
  .byte  235,52                              // jmp           5c <_sk_start_pipeline_sse2+0x5c>
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  65,255,212                          // callq         *%r12
  .byte  72,141,67,4                         // lea           0x4(%rbx),%rax
  .byte  72,131,195,8                        // add           $0x8,%rbx
  .byte  76,57,251                           // cmp           %r15,%rbx
  .byte  72,137,195                          // mov           %rax,%rbx
  .byte  118,204                             // jbe           28 <_sk_start_pipeline_sse2+0x28>
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  195                                 // retq

HIDDEN _sk_just_return_sse2
.globl _sk_just_return_sse2
FUNCTION(_sk_just_return_sse2)
_sk_just_return_sse2:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_sse2
.globl _sk_seed_shader_sse2
FUNCTION(_sk_seed_shader_sse2)
_sk_seed_shader_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,15,110,199                      // movd          %edi,%xmm0
  .byte  102,15,112,192,0                    // pshufd        $0x0,%xmm0,%xmm0
  .byte  15,91,200                           // cvtdq2ps      %xmm0,%xmm1
  .byte  15,40,21,196,72,0,0                 // movaps        0x48c4(%rip),%xmm2        # 4940 <_sk_callback_sse2+0xd7>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,16,2                             // movups        (%rdx),%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  102,15,110,8                        // movd          (%rax),%xmm1
  .byte  102,15,112,201,0                    // pshufd        $0x0,%xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,21,179,72,0,0                 // movaps        0x48b3(%rip),%xmm2        # 4950 <_sk_callback_sse2+0xe7>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_sse2
.globl _sk_dither_sse2
FUNCTION(_sk_dither_sse2)
_sk_dither_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,68,15,110,199                   // movd          %edi,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,16,10                         // movups        (%rdx),%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  243,69,15,91,201                    // cvttps2dq     %xmm9,%xmm9
  .byte  72,139,8                            // mov           (%rax),%rcx
  .byte  102,68,15,110,1                     // movd          (%rcx),%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,68,15,111,21,120,72,0,0         // movdqa        0x4878(%rip),%xmm10        # 4960 <_sk_callback_sse2+0xf7>
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,65,15,114,243,5                 // pslld         $0x5,%xmm11
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,65,15,114,242,4                 // pslld         $0x4,%xmm10
  .byte  102,68,15,111,37,100,72,0,0         // movdqa        0x4864(%rip),%xmm12        # 4970 <_sk_callback_sse2+0x107>
  .byte  102,68,15,111,45,107,72,0,0         // movdqa        0x486b(%rip),%xmm13        # 4980 <_sk_callback_sse2+0x117>
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,69,15,219,245                   // pand          %xmm13,%xmm14
  .byte  102,65,15,114,246,2                 // pslld         $0x2,%xmm14
  .byte  102,69,15,219,233                   // pand          %xmm9,%xmm13
  .byte  102,69,15,254,237                   // paddd         %xmm13,%xmm13
  .byte  102,69,15,219,196                   // pand          %xmm12,%xmm8
  .byte  102,65,15,114,208,1                 // psrld         $0x1,%xmm8
  .byte  102,69,15,219,204                   // pand          %xmm12,%xmm9
  .byte  102,65,15,114,209,2                 // psrld         $0x2,%xmm9
  .byte  102,69,15,235,234                   // por           %xmm10,%xmm13
  .byte  102,69,15,235,233                   // por           %xmm9,%xmm13
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,235,245                   // por           %xmm13,%xmm14
  .byte  102,69,15,235,240                   // por           %xmm8,%xmm14
  .byte  69,15,91,198                        // cvtdq2ps      %xmm14,%xmm8
  .byte  68,15,89,5,38,72,0,0                // mulps         0x4826(%rip),%xmm8        # 4990 <_sk_callback_sse2+0x127>
  .byte  68,15,88,5,46,72,0,0                // addps         0x482e(%rip),%xmm8        # 49a0 <_sk_callback_sse2+0x137>
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_sse2
.globl _sk_constant_color_sse2
FUNCTION(_sk_constant_color_sse2)
_sk_constant_color_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_sse2
.globl _sk_clear_sse2
FUNCTION(_sk_clear_sse2)
_sk_clear_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_sse2
.globl _sk_srcatop_sse2
FUNCTION(_sk_srcatop_sse2)
_sk_srcatop_sse2:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  68,15,40,5,219,71,0,0               // movaps        0x47db(%rip),%xmm8        # 49b0 <_sk_callback_sse2+0x147>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_sse2
.globl _sk_dstatop_sse2
FUNCTION(_sk_dstatop_sse2)
_sk_dstatop_sse2:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,40,13,158,71,0,0              // movaps        0x479e(%rip),%xmm9        # 49c0 <_sk_callback_sse2+0x157>
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_sse2
.globl _sk_srcin_sse2
FUNCTION(_sk_srcin_sse2)
_sk_srcin_sse2:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_sse2
.globl _sk_dstin_sse2
FUNCTION(_sk_dstin_sse2)
_sk_dstin_sse2:
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_sse2
.globl _sk_srcout_sse2
FUNCTION(_sk_srcout_sse2)
_sk_srcout_sse2:
  .byte  68,15,40,5,66,71,0,0                // movaps        0x4742(%rip),%xmm8        # 49d0 <_sk_callback_sse2+0x167>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_sse2
.globl _sk_dstout_sse2
FUNCTION(_sk_dstout_sse2)
_sk_dstout_sse2:
  .byte  68,15,40,5,50,71,0,0                // movaps        0x4732(%rip),%xmm8        # 49e0 <_sk_callback_sse2+0x177>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_sse2
.globl _sk_srcover_sse2
FUNCTION(_sk_srcover_sse2)
_sk_srcover_sse2:
  .byte  68,15,40,5,21,71,0,0                // movaps        0x4715(%rip),%xmm8        # 49f0 <_sk_callback_sse2+0x187>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_sse2
.globl _sk_dstover_sse2
FUNCTION(_sk_dstover_sse2)
_sk_dstover_sse2:
  .byte  68,15,40,5,233,70,0,0               // movaps        0x46e9(%rip),%xmm8        # 4a00 <_sk_callback_sse2+0x197>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_sse2
.globl _sk_modulate_sse2
FUNCTION(_sk_modulate_sse2)
_sk_modulate_sse2:
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_sse2
.globl _sk_multiply_sse2
FUNCTION(_sk_multiply_sse2)
_sk_multiply_sse2:
  .byte  68,15,40,5,189,70,0,0               // movaps        0x46bd(%rip),%xmm8        # 4a10 <_sk_callback_sse2+0x1a7>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,221                        // mulps         %xmm5,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__sse2
.globl _sk_plus__sse2
FUNCTION(_sk_plus__sse2)
_sk_plus__sse2:
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_sse2
.globl _sk_screen_sse2
FUNCTION(_sk_screen_sse2)
_sk_screen_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,88,196                        // addps         %xmm4,%xmm8
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,88,205                        // addps         %xmm5,%xmm9
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,201                        // subps         %xmm1,%xmm9
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  68,15,88,214                        // addps         %xmm6,%xmm10
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,92,210                        // subps         %xmm2,%xmm10
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  68,15,88,223                        // addps         %xmm7,%xmm11
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__sse2
.globl _sk_xor__sse2
FUNCTION(_sk_xor__sse2)
_sk_xor__sse2:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,40,29,238,69,0,0                 // movaps        0x45ee(%rip),%xmm3        # 4a20 <_sk_callback_sse2+0x1b7>
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_sse2
.globl _sk_darken_sse2
FUNCTION(_sk_darken_sse2)
_sk_darken_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,95,209                        // maxps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,89,69,0,0                  // movaps        0x4559(%rip),%xmm2        # 4a30 <_sk_callback_sse2+0x1c7>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_sse2
.globl _sk_lighten_sse2
FUNCTION(_sk_lighten_sse2)
_sk_lighten_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,254,68,0,0                 // movaps        0x44fe(%rip),%xmm2        # 4a40 <_sk_callback_sse2+0x1d7>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_sse2
.globl _sk_difference_sse2
FUNCTION(_sk_difference_sse2)
_sk_difference_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,152,68,0,0                 // movaps        0x4498(%rip),%xmm2        # 4a50 <_sk_callback_sse2+0x1e7>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_sse2
.globl _sk_exclusion_sse2
FUNCTION(_sk_exclusion_sse2)
_sk_exclusion_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  15,40,13,89,68,0,0                  // movaps        0x4459(%rip),%xmm1        # 4a60 <_sk_callback_sse2+0x1f7>
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_sse2
.globl _sk_colorburn_sse2
FUNCTION(_sk_colorburn_sse2)
_sk_colorburn_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,72,68,0,0               // movaps        0x4448(%rip),%xmm10        # 4a70 <_sk_callback_sse2+0x207>
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,94,192                        // divps         %xmm8,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,40,224                        // movaps        %xmm8,%xmm12
  .byte  69,15,194,227,0                     // cmpeqps       %xmm11,%xmm12
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,84,196                        // andps         %xmm12,%xmm8
  .byte  69,15,85,229                        // andnps        %xmm13,%xmm12
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  68,15,89,236                        // mulps         %xmm4,%xmm13
  .byte  69,15,86,224                        // orps          %xmm8,%xmm12
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  68,15,194,199,0                     // cmpeqps       %xmm7,%xmm8
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,85,196                        // andnps        %xmm12,%xmm8
  .byte  65,15,86,192                        // orps          %xmm8,%xmm0
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,92,229                        // subps         %xmm5,%xmm12
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  68,15,94,225                        // divps         %xmm1,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,233                        // movaps        %xmm1,%xmm13
  .byte  69,15,194,235,0                     // cmpeqps       %xmm11,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,224                        // addps         %xmm8,%xmm12
  .byte  65,15,84,205                        // andps         %xmm13,%xmm1
  .byte  69,15,85,236                        // andnps        %xmm12,%xmm13
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  68,15,86,233                        // orps          %xmm1,%xmm13
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,88,233                        // addps         %xmm1,%xmm13
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,194,207,0                        // cmpeqps       %xmm7,%xmm1
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  68,15,86,193                        // orps          %xmm1,%xmm8
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,92,206                           // subps         %xmm6,%xmm1
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,225                        // minps         %xmm1,%xmm12
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  68,15,194,218,0                     // cmpeqps       %xmm2,%xmm11
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  65,15,84,211                        // andps         %xmm11,%xmm2
  .byte  68,15,85,217                        // andnps        %xmm1,%xmm11
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  68,15,86,218                        // orps          %xmm2,%xmm11
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  68,15,88,217                        // addps         %xmm1,%xmm11
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,194,207,0                        // cmpeqps       %xmm7,%xmm1
  .byte  68,15,84,201                        // andps         %xmm1,%xmm9
  .byte  65,15,85,203                        // andnps        %xmm11,%xmm1
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_sse2
.globl _sk_colordodge_sse2
FUNCTION(_sk_colordodge_sse2)
_sk_colordodge_sse2:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,40,21,254,66,0,0              // movaps        0x42fe(%rip),%xmm10        # 4a80 <_sk_callback_sse2+0x217>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  68,15,94,192                        // divps         %xmm0,%xmm8
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,194,243,0                     // cmpeqps       %xmm3,%xmm14
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  69,15,84,206                        // andps         %xmm14,%xmm9
  .byte  68,15,85,240                        // andnps        %xmm0,%xmm14
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,86,241                        // orps          %xmm9,%xmm14
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  69,15,88,241                        // addps         %xmm9,%xmm14
  .byte  68,15,40,204                        // movaps        %xmm4,%xmm9
  .byte  69,15,194,200,0                     // cmpeqps       %xmm8,%xmm9
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  69,15,85,206                        // andnps        %xmm14,%xmm9
  .byte  65,15,86,193                        // orps          %xmm9,%xmm0
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  69,15,94,204                        // divps         %xmm12,%xmm9
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  69,15,93,233                        // minps         %xmm9,%xmm13
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  68,15,194,243,0                     // cmpeqps       %xmm3,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  65,15,84,206                        // andps         %xmm14,%xmm1
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  69,15,40,204                        // movaps        %xmm12,%xmm9
  .byte  68,15,88,205                        // addps         %xmm5,%xmm9
  .byte  68,15,86,241                        // orps          %xmm1,%xmm14
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,88,241                        // addps         %xmm1,%xmm14
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  65,15,194,200,0                     // cmpeqps       %xmm8,%xmm1
  .byte  68,15,84,201                        // andps         %xmm1,%xmm9
  .byte  65,15,85,206                        // andnps        %xmm14,%xmm1
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,92,202                           // subps         %xmm2,%xmm1
  .byte  68,15,94,225                        // divps         %xmm1,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,194,203,0                        // cmpeqps       %xmm3,%xmm1
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  15,84,209                           // andps         %xmm1,%xmm2
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  15,86,202                           // orps          %xmm2,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  68,15,194,198,0                     // cmpeqps       %xmm6,%xmm8
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  69,15,84,216                        // andps         %xmm8,%xmm11
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,195                        // orps          %xmm11,%xmm8
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_sse2
.globl _sk_hardlight_sse2
FUNCTION(_sk_hardlight_sse2)
_sk_hardlight_sse2:
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  68,15,40,29,179,65,0,0              // movaps        0x41b3(%rip),%xmm11        # 4a90 <_sk_callback_sse2+0x227>
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  68,15,92,215                        // subps         %xmm7,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,40,255                        // movaps        %xmm7,%xmm15
  .byte  68,15,92,253                        // subps         %xmm5,%xmm15
  .byte  69,15,89,248                        // mulps         %xmm8,%xmm15
  .byte  69,15,88,255                        // addps         %xmm15,%xmm15
  .byte  68,15,40,228                        // movaps        %xmm4,%xmm12
  .byte  69,15,92,231                        // subps         %xmm15,%xmm12
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  68,15,194,195,2                     // cmpleps       %xmm3,%xmm8
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,85,196                        // andnps        %xmm12,%xmm8
  .byte  68,15,86,192                        // orps          %xmm0,%xmm8
  .byte  69,15,40,251                        // movaps        %xmm11,%xmm15
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,254                        // mulps         %xmm6,%xmm15
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,92,238                        // subps         %xmm6,%xmm13
  .byte  68,15,89,232                        // mulps         %xmm0,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,92,197                        // subps         %xmm13,%xmm0
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  65,15,84,201                        // andps         %xmm9,%xmm1
  .byte  68,15,85,200                        // andnps        %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  69,15,88,207                        // addps         %xmm15,%xmm9
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,40,108,36,232                 // movaps        -0x18(%rsp),%xmm13
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,88,226                        // addps         %xmm10,%xmm12
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  68,15,194,211,2                     // cmpleps       %xmm3,%xmm10
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  68,15,89,240                        // mulps         %xmm0,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  65,15,92,230                        // subps         %xmm14,%xmm4
  .byte  65,15,84,210                        // andps         %xmm10,%xmm2
  .byte  68,15,85,212                        // andnps        %xmm4,%xmm10
  .byte  68,15,86,210                        // orps          %xmm2,%xmm10
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  65,15,40,245                        // movaps        %xmm13,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_sse2
.globl _sk_overlay_sse2
FUNCTION(_sk_overlay_sse2)
_sk_overlay_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,232                        // movaps        %xmm0,%xmm13
  .byte  68,15,40,13,129,64,0,0              // movaps        0x4081(%rip),%xmm9        # 4aa0 <_sk_callback_sse2+0x237>
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,92,215                        // subps         %xmm7,%xmm10
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  68,15,92,203                        // subps         %xmm3,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,89,236                        // mulps         %xmm4,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,92,244                        // subps         %xmm4,%xmm14
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,230                        // subps         %xmm14,%xmm12
  .byte  68,15,84,233                        // andps         %xmm1,%xmm13
  .byte  65,15,85,204                        // andnps        %xmm12,%xmm1
  .byte  65,15,86,205                        // orps          %xmm13,%xmm1
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  69,15,89,224                        // mulps         %xmm8,%xmm12
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,224                        // subps         %xmm8,%xmm12
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,92,237                        // subps         %xmm5,%xmm13
  .byte  68,15,40,245                        // movaps        %xmm5,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  68,15,194,247,2                     // cmpleps       %xmm7,%xmm14
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,84,198                        // andps         %xmm14,%xmm8
  .byte  69,15,85,244                        // andnps        %xmm12,%xmm14
  .byte  69,15,86,240                        // orps          %xmm8,%xmm14
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  69,15,88,194                        // addps         %xmm10,%xmm8
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,92,210                        // subps         %xmm2,%xmm10
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,92,230                        // subps         %xmm6,%xmm12
  .byte  68,15,40,238                        // movaps        %xmm6,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,194,239,2                     // cmpleps       %xmm7,%xmm13
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,88,228                        // addps         %xmm12,%xmm12
  .byte  69,15,92,220                        // subps         %xmm12,%xmm11
  .byte  65,15,84,213                        // andps         %xmm13,%xmm2
  .byte  69,15,85,235                        // andnps        %xmm11,%xmm13
  .byte  68,15,86,234                        // orps          %xmm2,%xmm13
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_sse2
.globl _sk_softlight_sse2
FUNCTION(_sk_softlight_sse2)
_sk_softlight_sse2:
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  68,15,194,231,1                     // cmpltps       %xmm7,%xmm12
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  69,15,84,212                        // andps         %xmm12,%xmm10
  .byte  68,15,40,13,62,63,0,0               // movaps        0x3f3e(%rip),%xmm9        # 4ab0 <_sk_callback_sse2+0x247>
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  69,15,92,250                        // subps         %xmm10,%xmm15
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  65,15,82,194                        // rsqrtps       %xmm10,%xmm0
  .byte  15,83,200                           // rcpps         %xmm0,%xmm1
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  68,15,40,53,24,63,0,0               // movaps        0x3f18(%rip),%xmm14        # 4ac0 <_sk_callback_sse2+0x257>
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  68,15,89,216                        // mulps         %xmm0,%xmm11
  .byte  68,15,40,21,24,63,0,0               // movaps        0x3f18(%rip),%xmm10        # 4ad0 <_sk_callback_sse2+0x267>
  .byte  69,15,89,234                        // mulps         %xmm10,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,194,231,2                        // cmpleps       %xmm7,%xmm4
  .byte  68,15,84,236                        // andps         %xmm4,%xmm13
  .byte  15,85,225                           // andnps        %xmm1,%xmm4
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  65,15,86,229                        // orps          %xmm13,%xmm4
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  68,15,89,249                        // mulps         %xmm1,%xmm15
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,225                           // mulps         %xmm1,%xmm4
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  68,15,92,239                        // subps         %xmm7,%xmm13
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,253                        // mulps         %xmm5,%xmm15
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  68,15,84,248                        // andps         %xmm0,%xmm15
  .byte  15,85,196                           // andnps        %xmm4,%xmm0
  .byte  65,15,86,199                        // orps          %xmm15,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  68,15,94,199                        // divps         %xmm7,%xmm8
  .byte  69,15,84,196                        // andps         %xmm12,%xmm8
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  69,15,92,248                        // subps         %xmm8,%xmm15
  .byte  65,15,82,224                        // rsqrtps       %xmm8,%xmm4
  .byte  15,83,228                           // rcpps         %xmm4,%xmm4
  .byte  65,15,92,224                        // subps         %xmm8,%xmm4
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  15,85,204                           // andnps        %xmm4,%xmm1
  .byte  65,15,86,200                        // orps          %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  68,15,89,252                        // mulps         %xmm4,%xmm15
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,254                        // mulps         %xmm6,%xmm15
  .byte  68,15,194,195,2                     // cmpleps       %xmm3,%xmm8
  .byte  69,15,84,248                        // andps         %xmm8,%xmm15
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,199                        // orps          %xmm15,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  68,15,40,124,36,216                 // movaps        -0x28(%rsp),%xmm15
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,94,207                           // divps         %xmm7,%xmm1
  .byte  65,15,84,204                        // andps         %xmm12,%xmm1
  .byte  68,15,92,201                        // subps         %xmm1,%xmm9
  .byte  68,15,88,241                        // addps         %xmm1,%xmm14
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  15,82,209                           // rsqrtps       %xmm1,%xmm2
  .byte  15,83,210                           // rcpps         %xmm2,%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  68,15,84,209                        // andps         %xmm1,%xmm10
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  15,40,84,36,232                     // movaps        -0x18(%rsp),%xmm2
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  65,15,86,202                        // orps          %xmm10,%xmm1
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  65,15,88,229                        // addps         %xmm13,%xmm4
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  69,15,40,215                        // movaps        %xmm15,%xmm10
  .byte  15,194,211,2                        // cmpleps       %xmm3,%xmm2
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,209                        // orps          %xmm9,%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  65,15,40,242                        // movaps        %xmm10,%xmm6
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_sse2
.globl _sk_hue_sse2
FUNCTION(_sk_hue_sse2)
_sk_hue_sse2:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  68,15,40,5,91,61,0,0                // movaps        0x3d5b(%rip),%xmm8        # 4b10 <_sk_callback_sse2+0x2a7>
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  68,15,92,217                        // subps         %xmm1,%xmm11
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  15,41,68,36,232                     // movaps        %xmm0,-0x18(%rsp)
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  68,15,41,100,36,216                 // movaps        %xmm12,-0x28(%rsp)
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  68,15,40,237                        // movaps        %xmm5,%xmm13
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  68,15,95,239                        // maxps         %xmm7,%xmm13
  .byte  15,41,100,36,200                    // movaps        %xmm4,-0x38(%rsp)
  .byte  68,15,40,244                        // movaps        %xmm4,%xmm14
  .byte  68,15,40,252                        // movaps        %xmm4,%xmm15
  .byte  69,15,95,253                        // maxps         %xmm13,%xmm15
  .byte  68,15,93,231                        // minps         %xmm7,%xmm12
  .byte  69,15,93,244                        // minps         %xmm12,%xmm14
  .byte  69,15,92,254                        // subps         %xmm14,%xmm15
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  68,15,93,226                        // minps         %xmm2,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,95,244                        // maxps         %xmm12,%xmm14
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  69,15,92,205                        // subps         %xmm13,%xmm9
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  65,15,92,213                        // subps         %xmm13,%xmm2
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  68,15,89,251                        // mulps         %xmm3,%xmm15
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  69,15,89,215                        // mulps         %xmm15,%xmm10
  .byte  65,15,89,215                        // mulps         %xmm15,%xmm2
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,94,214                        // divps         %xmm14,%xmm10
  .byte  65,15,94,214                        // divps         %xmm14,%xmm2
  .byte  68,15,194,240,4                     // cmpneqps      %xmm0,%xmm14
  .byte  69,15,84,206                        // andps         %xmm14,%xmm9
  .byte  69,15,84,214                        // andps         %xmm14,%xmm10
  .byte  65,15,84,214                        // andps         %xmm14,%xmm2
  .byte  68,15,40,61,111,60,0,0              // movaps        0x3c6f(%rip),%xmm15        # 4ae0 <_sk_callback_sse2+0x277>
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  15,40,5,116,60,0,0                  // movaps        0x3c74(%rip),%xmm0        # 4af0 <_sk_callback_sse2+0x287>
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  68,15,40,53,118,60,0,0              // movaps        0x3c76(%rip),%xmm14        # 4b00 <_sk_callback_sse2+0x297>
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,88,238                        // addps         %xmm6,%xmm13
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  65,15,40,242                        // movaps        %xmm10,%xmm6
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  65,15,89,230                        // mulps         %xmm14,%xmm4
  .byte  15,88,230                           // addps         %xmm6,%xmm4
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  68,15,92,236                        // subps         %xmm4,%xmm13
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  69,15,88,213                        // addps         %xmm13,%xmm10
  .byte  68,15,88,234                        // addps         %xmm2,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,93,213                        // minps         %xmm13,%xmm2
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  15,93,242                           // minps         %xmm2,%xmm6
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,95,213                        // maxps         %xmm13,%xmm2
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  15,95,226                           // maxps         %xmm2,%xmm4
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  68,15,88,240                        // addps         %xmm0,%xmm14
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,194,214,2                        // cmpleps       %xmm6,%xmm2
  .byte  69,15,40,254                        // movaps        %xmm14,%xmm15
  .byte  68,15,92,254                        // subps         %xmm6,%xmm15
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,92,246                        // subps         %xmm14,%xmm6
  .byte  65,15,89,246                        // mulps         %xmm14,%xmm6
  .byte  65,15,94,247                        // divps         %xmm15,%xmm6
  .byte  65,15,88,246                        // addps         %xmm14,%xmm6
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  15,41,76,36,184                     // movaps        %xmm1,-0x48(%rsp)
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  68,15,88,225                        // addps         %xmm1,%xmm12
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,194,196,1                        // cmpltps       %xmm4,%xmm0
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,201                        // andnps        %xmm9,%xmm1
  .byte  69,15,92,206                        // subps         %xmm14,%xmm9
  .byte  65,15,92,246                        // subps         %xmm14,%xmm6
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,92,230                        // subps         %xmm14,%xmm4
  .byte  68,15,94,204                        // divps         %xmm4,%xmm9
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  68,15,84,200                        // andps         %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,94,207                        // divps         %xmm15,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,85,217                           // andnps        %xmm1,%xmm3
  .byte  68,15,84,210                        // andps         %xmm2,%xmm10
  .byte  68,15,86,211                        // orps          %xmm3,%xmm10
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,202                        // andnps        %xmm10,%xmm1
  .byte  69,15,92,214                        // subps         %xmm14,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  68,15,94,212                        // divps         %xmm4,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  65,15,40,205                        // movaps        %xmm13,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,94,207                        // divps         %xmm15,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  68,15,84,234                        // andps         %xmm2,%xmm13
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,213                        // orps          %xmm13,%xmm2
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,94,212                           // divps         %xmm4,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,84,208                           // andps         %xmm0,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,100,36,200                    // movaps        -0x38(%rsp),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,76,36,232                     // movaps        -0x18(%rsp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  15,40,76,36,216                     // movaps        -0x28(%rsp),%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,195                        // addps         %xmm11,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  65,15,40,220                        // movaps        %xmm12,%xmm3
  .byte  15,40,124,36,184                    // movaps        -0x48(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_sse2
.globl _sk_saturation_sse2
FUNCTION(_sk_saturation_sse2)
_sk_saturation_sse2:
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  68,15,40,215                        // movaps        %xmm7,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,116,36,184                    // movaps        %xmm6,-0x48(%rsp)
  .byte  68,15,40,207                        // movaps        %xmm7,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  69,15,40,232                        // movaps        %xmm8,%xmm13
  .byte  68,15,41,108,36,168                 // movaps        %xmm13,-0x58(%rsp)
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,41,100,36,216                    // movaps        %xmm4,-0x28(%rsp)
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,95,218                           // maxps         %xmm2,%xmm3
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  15,95,203                           // maxps         %xmm3,%xmm1
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,93,218                           // minps         %xmm2,%xmm3
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  15,92,202                           // subps         %xmm2,%xmm1
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  65,15,40,228                        // movaps        %xmm12,%xmm4
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,93,208                           // minps         %xmm0,%xmm2
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,93,194                        // minps         %xmm2,%xmm8
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,95,218                           // maxps         %xmm2,%xmm3
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  69,15,92,208                        // subps         %xmm8,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  68,15,94,211                        // divps         %xmm3,%xmm10
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,94,195                           // divps         %xmm3,%xmm0
  .byte  15,194,218,4                        // cmpneqps      %xmm2,%xmm3
  .byte  68,15,84,211                        // andps         %xmm3,%xmm10
  .byte  68,15,84,203                        // andps         %xmm3,%xmm9
  .byte  15,84,195                           // andps         %xmm3,%xmm0
  .byte  68,15,40,5,11,58,0,0                // movaps        0x3a0b(%rip),%xmm8        # 4b20 <_sk_callback_sse2+0x2b7>
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,40,13,13,58,0,0                  // movaps        0x3a0d(%rip),%xmm1        # 4b30 <_sk_callback_sse2+0x2c7>
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  68,15,40,37,12,58,0,0               // movaps        0x3a0c(%rip),%xmm12        # 4b40 <_sk_callback_sse2+0x2d7>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,235                        // addps         %xmm3,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,40,217                        // movaps        %xmm9,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  68,15,89,239                        // mulps         %xmm7,%xmm13
  .byte  68,15,92,234                        // subps         %xmm2,%xmm13
  .byte  69,15,88,213                        // addps         %xmm13,%xmm10
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,93,197                        // minps         %xmm13,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,95,197                        // maxps         %xmm13,%xmm0
  .byte  69,15,40,242                        // movaps        %xmm10,%xmm14
  .byte  68,15,95,240                        // maxps         %xmm0,%xmm14
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  68,15,88,225                        // addps         %xmm1,%xmm12
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,194,211,2                        // cmpleps       %xmm3,%xmm2
  .byte  65,15,40,244                        // movaps        %xmm12,%xmm6
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  68,15,84,210                        // andps         %xmm2,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  68,15,40,5,113,57,0,0               // movaps        0x3971(%rip),%xmm8        # 4b50 <_sk_callback_sse2+0x2e7>
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,88,253                           // addps         %xmm5,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,194,222,1                     // cmpltps       %xmm14,%xmm3
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,85,194                        // andnps        %xmm10,%xmm0
  .byte  69,15,92,212                        // subps         %xmm12,%xmm10
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,92,244                        // subps         %xmm12,%xmm14
  .byte  69,15,94,214                        // divps         %xmm14,%xmm10
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  68,15,84,211                        // andps         %xmm3,%xmm10
  .byte  68,15,86,208                        // orps          %xmm0,%xmm10
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  68,15,40,250                        // movaps        %xmm2,%xmm15
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  69,15,86,207                        // orps          %xmm15,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,85,193                        // andnps        %xmm9,%xmm0
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  68,15,84,203                        // andps         %xmm3,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  68,15,84,234                        // andps         %xmm2,%xmm13
  .byte  15,85,208                           // andnps        %xmm0,%xmm2
  .byte  65,15,86,213                        // orps          %xmm13,%xmm2
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,85,194                           // andnps        %xmm2,%xmm0
  .byte  65,15,92,212                        // subps         %xmm12,%xmm2
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  65,15,94,214                        // divps         %xmm14,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,84,211                           // andps         %xmm3,%xmm2
  .byte  15,86,208                           // orps          %xmm0,%xmm2
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,92,36,184                     // movaps        -0x48(%rsp),%xmm3
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  65,15,92,228                        // subps         %xmm12,%xmm4
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  68,15,88,216                        // addps         %xmm0,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,76,36,216                     // movaps        -0x28(%rsp),%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,100,36,232                    // mulps         -0x18(%rsp),%xmm4
  .byte  15,40,68,36,168                     // movaps        -0x58(%rsp),%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,88,196                        // addps         %xmm4,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  65,15,40,252                        // movaps        %xmm12,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_sse2
.globl _sk_color_sse2
FUNCTION(_sk_color_sse2)
_sk_color_sse2:
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,41,100,36,216                 // movaps        %xmm12,-0x28(%rsp)
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,41,92,36,232                  // movaps        %xmm11,-0x18(%rsp)
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  68,15,40,207                        // movaps        %xmm7,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  68,15,40,45,15,56,0,0               // movaps        0x380f(%rip),%xmm13        # 4b60 <_sk_callback_sse2+0x2f7>
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,40,53,15,56,0,0               // movaps        0x380f(%rip),%xmm14        # 4b70 <_sk_callback_sse2+0x307>
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,29,11,56,0,0               // movaps        0x380b(%rip),%xmm11        # 4b80 <_sk_callback_sse2+0x317>
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  68,15,88,224                        // addps         %xmm0,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,89,197                        // mulps         %xmm13,%xmm0
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  68,15,40,5,247,55,0,0               // movaps        0x37f7(%rip),%xmm8        # 4b90 <_sk_callback_sse2+0x327>
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,40,76,36,184                     // movaps        -0x48(%rsp),%xmm1
  .byte  15,89,225                           // mulps         %xmm1,%xmm4
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  68,15,88,225                        // addps         %xmm1,%xmm12
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,93,196                        // minps         %xmm12,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,93,200                           // minps         %xmm0,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,95,196                        // maxps         %xmm12,%xmm0
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  68,15,95,248                        // maxps         %xmm0,%xmm15
  .byte  69,15,89,233                        // mulps         %xmm9,%xmm13
  .byte  69,15,89,242                        // mulps         %xmm10,%xmm14
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  69,15,89,220                        // mulps         %xmm12,%xmm11
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,87,237                        // xorps         %xmm13,%xmm13
  .byte  68,15,194,233,2                     // cmpleps       %xmm1,%xmm13
  .byte  69,15,40,243                        // movaps        %xmm11,%xmm14
  .byte  68,15,92,241                        // subps         %xmm1,%xmm14
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  15,85,193                           // andnps        %xmm1,%xmm0
  .byte  69,15,84,205                        // andps         %xmm13,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,41,84,36,200                     // movaps        %xmm2,-0x38(%rsp)
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,41,92,36,184                     // movaps        %xmm3,-0x48(%rsp)
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,201                        // andnps        %xmm9,%xmm1
  .byte  69,15,92,203                        // subps         %xmm11,%xmm9
  .byte  65,15,92,219                        // subps         %xmm11,%xmm3
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  69,15,92,251                        // subps         %xmm11,%xmm15
  .byte  69,15,94,207                        // divps         %xmm15,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,84,200                        // andps         %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,213                        // movaps        %xmm13,%xmm2
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  69,15,84,213                        // andps         %xmm13,%xmm10
  .byte  68,15,86,210                        // orps          %xmm2,%xmm10
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,202                        // andnps        %xmm10,%xmm1
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  69,15,94,215                        // divps         %xmm15,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,84,229                        // andps         %xmm13,%xmm12
  .byte  68,15,85,233                        // andnps        %xmm1,%xmm13
  .byte  69,15,86,236                        // orps          %xmm12,%xmm13
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,94,239                        // divps         %xmm15,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  68,15,86,233                        // orps          %xmm1,%xmm13
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  68,15,95,232                        // maxps         %xmm0,%xmm13
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,84,36,232                     // movaps        -0x18(%rsp),%xmm2
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  65,15,88,234                        // addps         %xmm10,%xmm5
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,68,36,216                     // movaps        -0x28(%rsp),%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,88,196                        // addps         %xmm4,%xmm8
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,92,36,184                     // movaps        -0x48(%rsp),%xmm3
  .byte  15,40,124,36,200                    // movaps        -0x38(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_sse2
.globl _sk_luminosity_sse2
FUNCTION(_sk_luminosity_sse2)
_sk_luminosity_sse2:
  .byte  68,15,40,215                        // movaps        %xmm7,%xmm10
  .byte  15,41,116,36,200                    // movaps        %xmm6,-0x38(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  15,41,100,36,216                    // movaps        %xmm4,-0x28(%rsp)
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  68,15,40,205                        // movaps        %xmm5,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  68,15,40,37,14,54,0,0               // movaps        0x360e(%rip),%xmm12        # 4ba0 <_sk_callback_sse2+0x337>
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,40,45,14,54,0,0               // movaps        0x360e(%rip),%xmm13        # 4bb0 <_sk_callback_sse2+0x347>
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  69,15,88,240                        // addps         %xmm8,%xmm14
  .byte  68,15,40,29,10,54,0,0               // movaps        0x360a(%rip),%xmm11        # 4bc0 <_sk_callback_sse2+0x357>
  .byte  68,15,40,5,18,54,0,0                // movaps        0x3612(%rip),%xmm8        # 4bd0 <_sk_callback_sse2+0x367>
  .byte  69,15,40,248                        // movaps        %xmm8,%xmm15
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,89,255                        // mulps         %xmm15,%xmm7
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  15,41,76,36,184                     // movaps        %xmm1,-0x48(%rsp)
  .byte  68,15,89,250                        // mulps         %xmm2,%xmm15
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  68,15,40,244                        // movaps        %xmm4,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,93,210                        // minps         %xmm2,%xmm10
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,93,226                        // minps         %xmm10,%xmm4
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,95,210                        // maxps         %xmm2,%xmm10
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,95,242                        // maxps         %xmm10,%xmm14
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,221                        // addps         %xmm13,%xmm11
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  68,15,194,228,2                     // cmpleps       %xmm4,%xmm12
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  68,15,92,212                        // subps         %xmm4,%xmm10
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,92,227                        // subps         %xmm11,%xmm4
  .byte  65,15,89,227                        // mulps         %xmm11,%xmm4
  .byte  65,15,94,226                        // divps         %xmm10,%xmm4
  .byte  65,15,88,227                        // addps         %xmm11,%xmm4
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  68,15,85,236                        // andnps        %xmm4,%xmm13
  .byte  69,15,84,204                        // andps         %xmm12,%xmm9
  .byte  69,15,86,205                        // orps          %xmm13,%xmm9
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,41,68,36,168                     // movaps        %xmm0,-0x58(%rsp)
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  68,15,92,197                        // subps         %xmm5,%xmm8
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  68,15,40,236                        // movaps        %xmm4,%xmm13
  .byte  65,15,194,230,1                     // cmpltps       %xmm14,%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,85,193                        // andnps        %xmm9,%xmm0
  .byte  69,15,92,203                        // subps         %xmm11,%xmm9
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,84,204                        // andps         %xmm4,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,94,194                        // divps         %xmm10,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  65,15,84,220                        // andps         %xmm12,%xmm3
  .byte  15,86,217                           // orps          %xmm1,%xmm3
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,85,195                           // andnps        %xmm3,%xmm0
  .byte  65,15,92,219                        // subps         %xmm11,%xmm3
  .byte  65,15,89,221                        // mulps         %xmm13,%xmm3
  .byte  65,15,94,222                        // divps         %xmm14,%xmm3
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  15,84,220                           // andps         %xmm4,%xmm3
  .byte  15,86,216                           // orps          %xmm0,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,94,194                        // divps         %xmm10,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,84,212                        // andps         %xmm12,%xmm2
  .byte  68,15,85,224                        // andnps        %xmm0,%xmm12
  .byte  68,15,86,226                        // orps          %xmm2,%xmm12
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,85,196                        // andnps        %xmm12,%xmm0
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,94,230                        // divps         %xmm14,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  68,15,84,228                        // andps         %xmm4,%xmm12
  .byte  68,15,86,224                        // orps          %xmm0,%xmm12
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  68,15,95,224                        // maxps         %xmm0,%xmm12
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,100,36,216                    // movaps        -0x28(%rsp),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  68,15,40,84,36,232                  // movaps        -0x18(%rsp),%xmm10
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  15,40,76,36,184                     // movaps        -0x48(%rsp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  69,15,88,199                        // addps         %xmm15,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  15,40,124,36,168                    // movaps        -0x58(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_0_sse2
.globl _sk_clamp_0_sse2
FUNCTION(_sk_clamp_0_sse2)
_sk_clamp_0_sse2:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,95,200                        // maxps         %xmm8,%xmm1
  .byte  65,15,95,208                        // maxps         %xmm8,%xmm2
  .byte  65,15,95,216                        // maxps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_sse2
.globl _sk_clamp_1_sse2
FUNCTION(_sk_clamp_1_sse2)
_sk_clamp_1_sse2:
  .byte  68,15,40,5,27,52,0,0                // movaps        0x341b(%rip),%xmm8        # 4be0 <_sk_callback_sse2+0x377>
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  65,15,93,208                        // minps         %xmm8,%xmm2
  .byte  65,15,93,216                        // minps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_sse2
.globl _sk_clamp_a_sse2
FUNCTION(_sk_clamp_a_sse2)
_sk_clamp_a_sse2:
  .byte  15,93,29,16,52,0,0                  // minps         0x3410(%rip),%xmm3        # 4bf0 <_sk_callback_sse2+0x387>
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_sse2
.globl _sk_set_rgb_sse2
FUNCTION(_sk_set_rgb_sse2)
_sk_set_rgb_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_sse2
.globl _sk_swap_rb_sse2
FUNCTION(_sk_swap_rb_sse2)
_sk_swap_rb_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_sse2
.globl _sk_swap_sse2
FUNCTION(_sk_swap_sse2)
_sk_swap_sse2:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,40,248                        // movaps        %xmm8,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_sse2
.globl _sk_move_src_dst_sse2
FUNCTION(_sk_move_src_dst_sse2)
_sk_move_src_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_sse2
.globl _sk_move_dst_src_sse2
FUNCTION(_sk_move_dst_src_sse2)
_sk_move_dst_src_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_sse2
.globl _sk_premul_sse2
FUNCTION(_sk_premul_sse2)
_sk_premul_sse2:
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_sse2
.globl _sk_unpremul_sse2
FUNCTION(_sk_unpremul_sse2)
_sk_unpremul_sse2:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,40,13,123,51,0,0              // movaps        0x337b(%rip),%xmm9        # 4c00 <_sk_callback_sse2+0x397>
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  68,15,194,195,4                     // cmpneqps      %xmm3,%xmm8
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_sse2
.globl _sk_from_srgb_sse2
FUNCTION(_sk_from_srgb_sse2)
_sk_from_srgb_sse2:
  .byte  68,15,40,5,102,51,0,0               // movaps        0x3366(%rip),%xmm8        # 4c10 <_sk_callback_sse2+0x3a7>
  .byte  68,15,40,232                        // movaps        %xmm0,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  68,15,40,13,94,51,0,0               // movaps        0x335e(%rip),%xmm9        # 4c20 <_sk_callback_sse2+0x3b7>
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  69,15,89,241                        // mulps         %xmm9,%xmm14
  .byte  68,15,40,21,94,51,0,0               // movaps        0x335e(%rip),%xmm10        # 4c30 <_sk_callback_sse2+0x3c7>
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  68,15,40,29,94,51,0,0               // movaps        0x335e(%rip),%xmm11        # 4c40 <_sk_callback_sse2+0x3d7>
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  68,15,40,37,98,51,0,0               // movaps        0x3362(%rip),%xmm12        # 4c50 <_sk_callback_sse2+0x3e7>
  .byte  65,15,194,196,1                     // cmpltps       %xmm12,%xmm0
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  65,15,85,198                        // andnps        %xmm14,%xmm0
  .byte  65,15,86,197                        // orps          %xmm13,%xmm0
  .byte  68,15,40,233                        // movaps        %xmm1,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,246                        // mulps         %xmm14,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  69,15,88,250                        // addps         %xmm10,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  69,15,88,251                        // addps         %xmm11,%xmm15
  .byte  65,15,194,204,1                     // cmpltps       %xmm12,%xmm1
  .byte  68,15,84,233                        // andps         %xmm1,%xmm13
  .byte  65,15,85,207                        // andnps        %xmm15,%xmm1
  .byte  65,15,86,205                        // orps          %xmm13,%xmm1
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  68,15,40,234                        // movaps        %xmm2,%xmm13
  .byte  69,15,89,237                        // mulps         %xmm13,%xmm13
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  65,15,194,212,1                     // cmpltps       %xmm12,%xmm2
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,209                        // andnps        %xmm9,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_sse2
.globl _sk_to_srgb_sse2
FUNCTION(_sk_to_srgb_sse2)
_sk_to_srgb_sse2:
  .byte  68,15,82,192                        // rsqrtps       %xmm0,%xmm8
  .byte  69,15,83,200                        // rcpps         %xmm8,%xmm9
  .byte  69,15,82,232                        // rsqrtps       %xmm8,%xmm13
  .byte  68,15,40,5,231,50,0,0               // movaps        0x32e7(%rip),%xmm8        # 4c60 <_sk_callback_sse2+0x3f7>
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  69,15,89,240                        // mulps         %xmm8,%xmm14
  .byte  68,15,40,21,231,50,0,0              // movaps        0x32e7(%rip),%xmm10        # 4c70 <_sk_callback_sse2+0x407>
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  68,15,40,29,235,50,0,0              // movaps        0x32eb(%rip),%xmm11        # 4c80 <_sk_callback_sse2+0x417>
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,40,37,239,50,0,0              // movaps        0x32ef(%rip),%xmm12        # 4c90 <_sk_callback_sse2+0x427>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,40,13,239,50,0,0              // movaps        0x32ef(%rip),%xmm9        # 4ca0 <_sk_callback_sse2+0x437>
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  69,15,93,253                        // minps         %xmm13,%xmm15
  .byte  68,15,40,45,239,50,0,0              // movaps        0x32ef(%rip),%xmm13        # 4cb0 <_sk_callback_sse2+0x447>
  .byte  65,15,194,197,1                     // cmpltps       %xmm13,%xmm0
  .byte  68,15,84,240                        // andps         %xmm0,%xmm14
  .byte  65,15,85,199                        // andnps        %xmm15,%xmm0
  .byte  65,15,86,198                        // orps          %xmm14,%xmm0
  .byte  68,15,82,241                        // rsqrtps       %xmm1,%xmm14
  .byte  69,15,83,254                        // rcpps         %xmm14,%xmm15
  .byte  69,15,82,246                        // rsqrtps       %xmm14,%xmm14
  .byte  69,15,89,250                        // mulps         %xmm10,%xmm15
  .byte  69,15,88,251                        // addps         %xmm11,%xmm15
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  69,15,88,247                        // addps         %xmm15,%xmm14
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  69,15,93,254                        // minps         %xmm14,%xmm15
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,240                        // mulps         %xmm8,%xmm14
  .byte  65,15,194,205,1                     // cmpltps       %xmm13,%xmm1
  .byte  68,15,84,241                        // andps         %xmm1,%xmm14
  .byte  65,15,85,207                        // andnps        %xmm15,%xmm1
  .byte  65,15,86,206                        // orps          %xmm14,%xmm1
  .byte  68,15,82,242                        // rsqrtps       %xmm2,%xmm14
  .byte  69,15,83,254                        // rcpps         %xmm14,%xmm15
  .byte  69,15,89,250                        // mulps         %xmm10,%xmm15
  .byte  69,15,88,251                        // addps         %xmm11,%xmm15
  .byte  69,15,82,214                        // rsqrtps       %xmm14,%xmm10
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  69,15,88,215                        // addps         %xmm15,%xmm10
  .byte  69,15,93,202                        // minps         %xmm10,%xmm9
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,194,213,1                     // cmpltps       %xmm13,%xmm2
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,209                        // andnps        %xmm9,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_sse2
.globl _sk_rgb_to_hsl_sse2
FUNCTION(_sk_rgb_to_hsl_sse2)
_sk_rgb_to_hsl_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  69,15,95,209                        // maxps         %xmm9,%xmm10
  .byte  68,15,95,210                        // maxps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,93,217                        // minps         %xmm9,%xmm11
  .byte  68,15,93,218                        // minps         %xmm2,%xmm11
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  68,15,40,45,72,50,0,0               // movaps        0x3248(%rip),%xmm13        # 4cc0 <_sk_callback_sse2+0x457>
  .byte  68,15,94,233                        // divps         %xmm1,%xmm13
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,194,192,0                     // cmpeqps       %xmm8,%xmm0
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,194,242,1                     // cmpltps       %xmm2,%xmm14
  .byte  68,15,84,53,46,50,0,0               // andps         0x322e(%rip),%xmm14        # 4cd0 <_sk_callback_sse2+0x467>
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,194,249,0                     // cmpeqps       %xmm9,%xmm15
  .byte  65,15,92,208                        // subps         %xmm8,%xmm2
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  68,15,40,37,33,50,0,0               // movaps        0x3221(%rip),%xmm12        # 4ce0 <_sk_callback_sse2+0x477>
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  69,15,92,193                        // subps         %xmm9,%xmm8
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,88,5,29,50,0,0                // addps         0x321d(%rip),%xmm8        # 4cf0 <_sk_callback_sse2+0x487>
  .byte  65,15,84,215                        // andps         %xmm15,%xmm2
  .byte  69,15,85,248                        // andnps        %xmm8,%xmm15
  .byte  68,15,86,250                        // orps          %xmm2,%xmm15
  .byte  68,15,84,240                        // andps         %xmm0,%xmm14
  .byte  65,15,85,199                        // andnps        %xmm15,%xmm0
  .byte  65,15,86,198                        // orps          %xmm14,%xmm0
  .byte  15,89,5,14,50,0,0                   // mulps         0x320e(%rip),%xmm0        # 4d00 <_sk_callback_sse2+0x497>
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  69,15,194,195,4                     // cmpneqps      %xmm11,%xmm8
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,92,226                        // subps         %xmm10,%xmm12
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  68,15,40,13,1,50,0,0                // movaps        0x3201(%rip),%xmm9        # 4d10 <_sk_callback_sse2+0x4a7>
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,194,202,1                     // cmpltps       %xmm2,%xmm9
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,84,225                        // andps         %xmm9,%xmm12
  .byte  69,15,85,202                        // andnps        %xmm10,%xmm9
  .byte  69,15,86,204                        // orps          %xmm12,%xmm9
  .byte  65,15,94,201                        // divps         %xmm9,%xmm1
  .byte  65,15,84,200                        // andps         %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_sse2
.globl _sk_hsl_to_rgb_sse2
FUNCTION(_sk_hsl_to_rgb_sse2)
_sk_hsl_to_rgb_sse2:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,41,92,36,168                     // movaps        %xmm3,-0x58(%rsp)
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  68,15,40,13,192,49,0,0              // movaps        0x31c0(%rip),%xmm9        # 4d20 <_sk_callback_sse2+0x4b7>
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  69,15,194,211,2                     // cmpleps       %xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,194,217,0                        // cmpeqps       %xmm1,%xmm3
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  15,41,124,36,136                    // movaps        %xmm7,-0x78(%rsp)
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  65,15,84,194                        // andps         %xmm10,%xmm0
  .byte  68,15,85,209                        // andnps        %xmm1,%xmm10
  .byte  68,15,86,208                        // orps          %xmm0,%xmm10
  .byte  68,15,41,92,36,152                  // movaps        %xmm11,-0x68(%rsp)
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,88,219                        // addps         %xmm11,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  15,40,5,137,49,0,0                  // movaps        0x3189(%rip),%xmm0        # 4d30 <_sk_callback_sse2+0x4c7>
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  243,15,91,200                       // cvttps2dq     %xmm0,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  15,194,217,1                        // cmpltps       %xmm1,%xmm3
  .byte  15,84,29,129,49,0,0                 // andps         0x3181(%rip),%xmm3        # 4d40 <_sk_callback_sse2+0x4d7>
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,40,45,131,49,0,0              // movaps        0x3183(%rip),%xmm13        # 4d50 <_sk_callback_sse2+0x4e7>
  .byte  69,15,40,197                        // movaps        %xmm13,%xmm8
  .byte  68,15,194,192,2                     // cmpleps       %xmm0,%xmm8
  .byte  69,15,40,242                        // movaps        %xmm10,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  65,15,40,217                        // movaps        %xmm9,%xmm3
  .byte  15,194,216,2                        // cmpleps       %xmm0,%xmm3
  .byte  15,40,21,147,49,0,0                 // movaps        0x3193(%rip),%xmm2        # 4d80 <_sk_callback_sse2+0x517>
  .byte  68,15,40,250                        // movaps        %xmm2,%xmm15
  .byte  68,15,194,248,2                     // cmpleps       %xmm0,%xmm15
  .byte  15,40,13,99,49,0,0                  // movaps        0x3163(%rip),%xmm1        # 4d60 <_sk_callback_sse2+0x4f7>
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,40,45,105,49,0,0                 // movaps        0x3169(%rip),%xmm5        # 4d70 <_sk_callback_sse2+0x507>
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  65,15,89,230                        // mulps         %xmm14,%xmm4
  .byte  65,15,88,227                        // addps         %xmm11,%xmm4
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,84,224                        // andps         %xmm8,%xmm12
  .byte  68,15,85,196                        // andnps        %xmm4,%xmm8
  .byte  69,15,86,196                        // orps          %xmm12,%xmm8
  .byte  68,15,84,195                        // andps         %xmm3,%xmm8
  .byte  65,15,85,218                        // andnps        %xmm10,%xmm3
  .byte  65,15,86,216                        // orps          %xmm8,%xmm3
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,84,223                        // andps         %xmm15,%xmm3
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,86,251                        // orps          %xmm3,%xmm15
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  69,15,85,199                        // andnps        %xmm15,%xmm8
  .byte  243,15,91,198                       // cvttps2dq     %xmm6,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,194,216,1                        // cmpltps       %xmm0,%xmm3
  .byte  15,84,29,222,48,0,0                 // andps         0x30de(%rip),%xmm3        # 4d40 <_sk_callback_sse2+0x4d7>
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  69,15,40,253                        // movaps        %xmm13,%xmm15
  .byte  69,15,194,252,2                     // cmpleps       %xmm12,%xmm15
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,194,228,2                     // cmpleps       %xmm12,%xmm4
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  65,15,194,220,2                     // cmpleps       %xmm12,%xmm3
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  65,15,84,255                        // andps         %xmm15,%xmm7
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,86,255                        // orps          %xmm7,%xmm15
  .byte  68,15,84,252                        // andps         %xmm4,%xmm15
  .byte  65,15,85,226                        // andnps        %xmm10,%xmm4
  .byte  65,15,86,231                        // orps          %xmm15,%xmm4
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  15,84,227                           // andps         %xmm3,%xmm4
  .byte  65,15,85,220                        // andnps        %xmm12,%xmm3
  .byte  15,86,220                           // orps          %xmm4,%xmm3
  .byte  15,40,124,36,136                    // movaps        -0x78(%rsp),%xmm7
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  15,85,227                           // andnps        %xmm3,%xmm4
  .byte  15,88,53,182,48,0,0                 // addps         0x30b6(%rip),%xmm6        # 4d90 <_sk_callback_sse2+0x527>
  .byte  243,15,91,198                       // cvttps2dq     %xmm6,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,194,216,1                        // cmpltps       %xmm0,%xmm3
  .byte  15,84,29,81,48,0,0                  // andps         0x3051(%rip),%xmm3        # 4d40 <_sk_callback_sse2+0x4d7>
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,92,240                           // subps         %xmm0,%xmm6
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,92,233                           // subps         %xmm1,%xmm5
  .byte  65,15,89,238                        // mulps         %xmm14,%xmm5
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,88,235                        // addps         %xmm11,%xmm5
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  68,15,194,238,2                     // cmpleps       %xmm6,%xmm13
  .byte  69,15,84,221                        // andps         %xmm13,%xmm11
  .byte  68,15,85,237                        // andnps        %xmm5,%xmm13
  .byte  69,15,86,235                        // orps          %xmm11,%xmm13
  .byte  68,15,194,206,2                     // cmpleps       %xmm6,%xmm9
  .byte  69,15,84,233                        // andps         %xmm9,%xmm13
  .byte  69,15,85,202                        // andnps        %xmm10,%xmm9
  .byte  69,15,86,205                        // orps          %xmm13,%xmm9
  .byte  15,194,214,2                        // cmpleps       %xmm6,%xmm2
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,209                        // orps          %xmm9,%xmm2
  .byte  15,40,68,36,152                     // movaps        -0x68(%rsp),%xmm0
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,84,193                           // andps         %xmm1,%xmm0
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  68,15,86,192                        // orps          %xmm0,%xmm8
  .byte  15,86,224                           // orps          %xmm0,%xmm4
  .byte  15,86,193                           // orps          %xmm1,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  15,40,100,36,184                    // movaps        -0x48(%rsp),%xmm4
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_sse2
.globl _sk_scale_1_float_sse2
FUNCTION(_sk_scale_1_float_sse2)
_sk_scale_1_float_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_sse2
.globl _sk_scale_u8_sse2
FUNCTION(_sk_scale_u8_sse2)
_sk_scale_u8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,110,4,56                  // movd          (%rax,%rdi,1),%xmm8
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,69,15,96,193                    // punpcklbw     %xmm9,%xmm8
  .byte  102,69,15,97,193                    // punpcklwd     %xmm9,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,223,47,0,0               // mulps         0x2fdf(%rip),%xmm8        # 4da0 <_sk_callback_sse2+0x537>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_1_float_sse2
.globl _sk_lerp_1_float_sse2
FUNCTION(_sk_lerp_1_float_sse2)
_sk_lerp_1_float_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_sse2
.globl _sk_lerp_u8_sse2
FUNCTION(_sk_lerp_u8_sse2)
_sk_lerp_u8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,110,4,56                  // movd          (%rax,%rdi,1),%xmm8
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,69,15,96,193                    // punpcklbw     %xmm9,%xmm8
  .byte  102,69,15,97,193                    // punpcklwd     %xmm9,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,125,47,0,0               // mulps         0x2f7d(%rip),%xmm8        # 4db0 <_sk_callback_sse2+0x547>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_565_sse2
.globl _sk_lerp_565_sse2
FUNCTION(_sk_lerp_565_sse2)
_sk_lerp_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  243,68,15,126,20,120                // movq          (%rax,%rdi,2),%xmm10
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,69,15,97,208                    // punpcklwd     %xmm8,%xmm10
  .byte  102,68,15,111,5,67,47,0,0           // movdqa        0x2f43(%rip),%xmm8        # 4dc0 <_sk_callback_sse2+0x557>
  .byte  102,69,15,219,194                   // pand          %xmm10,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,66,47,0,0                // mulps         0x2f42(%rip),%xmm8        # 4dd0 <_sk_callback_sse2+0x567>
  .byte  102,68,15,111,13,73,47,0,0          // movdqa        0x2f49(%rip),%xmm9        # 4de0 <_sk_callback_sse2+0x577>
  .byte  102,69,15,219,202                   // pand          %xmm10,%xmm9
  .byte  69,15,91,201                        // cvtdq2ps      %xmm9,%xmm9
  .byte  68,15,89,13,72,47,0,0               // mulps         0x2f48(%rip),%xmm9        # 4df0 <_sk_callback_sse2+0x587>
  .byte  102,68,15,219,21,79,47,0,0          // pand          0x2f4f(%rip),%xmm10        # 4e00 <_sk_callback_sse2+0x597>
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  68,15,89,21,83,47,0,0               // mulps         0x2f53(%rip),%xmm10        # 4e10 <_sk_callback_sse2+0x5a7>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,88,207                        // addps         %xmm7,%xmm9
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,95,203                        // maxps         %xmm3,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_tables_sse2
.globl _sk_load_tables_sse2
FUNCTION(_sk_load_tables_sse2)
_sk_load_tables_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,0                            // mov           (%rax),%r8
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  243,69,15,111,12,184                // movdqu        (%r8,%rdi,4),%xmm9
  .byte  102,68,15,111,5,3,47,0,0            // movdqa        0x2f03(%rip),%xmm8        # 4e20 <_sk_callback_sse2+0x5b7>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,73,15,126,200                   // movq          %xmm1,%r8
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,15,182,216                       // movzbl        %r8b,%r11d
  .byte  73,193,232,30                       // shr           $0x1e,%r8
  .byte  243,65,15,16,12,9                   // movss         (%r9,%rcx,1),%xmm1
  .byte  243,67,15,16,4,1                    // movss         (%r9,%r8,1),%xmm0
  .byte  15,20,200                           // unpcklps      %xmm0,%xmm1
  .byte  243,67,15,16,4,145                  // movss         (%r9,%r10,4),%xmm0
  .byte  243,67,15,16,20,153                 // movss         (%r9,%r11,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,193                           // unpcklps      %xmm1,%xmm0
  .byte  76,139,64,16                        // mov           0x10(%rax),%r8
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,65,15,219,200                   // pand          %xmm8,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,209                   // movq          %xmm2,%r9
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,65,15,16,20,8                   // movss         (%r8,%rcx,1),%xmm2
  .byte  243,67,15,16,12,8                   // movss         (%r8,%r9,1),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,144                 // movss         (%r8,%r10,4),%xmm1
  .byte  243,67,15,16,28,152                 // movss         (%r8,%r11,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,64,24                        // mov           0x18(%rax),%r8
  .byte  102,65,15,111,209                   // movdqa        %xmm9,%xmm2
  .byte  102,15,114,210,16                   // psrld         $0x10,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,72,15,126,217                   // movq          %xmm3,%rcx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,200                       // movzbl        %al,%r9d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  243,69,15,16,4,0                    // movss         (%r8,%rax,1),%xmm8
  .byte  243,65,15,16,20,8                   // movss         (%r8,%rcx,1),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,67,15,16,20,136                 // movss         (%r8,%r9,4),%xmm2
  .byte  243,67,15,16,28,144                 // movss         (%r8,%r10,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  15,89,29,16,46,0,0                  // mulps         0x2e10(%rip),%xmm3        # 4e30 <_sk_callback_sse2+0x5c7>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_tables_u16_be_sse2
.globl _sk_load_tables_u16_be_sse2
FUNCTION(_sk_load_tables_u16_be_sse2)
_sk_load_tables_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,8                            // mov           (%rax),%rcx
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  243,15,111,4,249                    // movdqu        (%rcx,%rdi,8),%xmm0
  .byte  243,15,111,76,249,16                // movdqu        0x10(%rcx,%rdi,8),%xmm1
  .byte  102,68,15,111,200                   // movdqa        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,68,15,111,21,227,45,0,0         // movdqa        0x2de3(%rip),%xmm10        # 4e40 <_sk_callback_sse2+0x5d7>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,194                   // pand          %xmm10,%xmm0
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,65,15,97,192                    // punpcklwd     %xmm8,%xmm0
  .byte  102,15,112,216,78                   // pshufd        $0x4e,%xmm0,%xmm3
  .byte  102,72,15,126,217                   // movq          %xmm3,%rcx
  .byte  68,15,182,201                       // movzbl        %cl,%r9d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  243,67,15,16,28,16                  // movss         (%r8,%r10,1),%xmm3
  .byte  243,65,15,16,4,136                  // movss         (%r8,%rcx,4),%xmm0
  .byte  15,20,216                           // unpcklps      %xmm0,%xmm3
  .byte  243,67,15,16,4,152                  // movss         (%r8,%r11,4),%xmm0
  .byte  243,67,15,16,20,136                 // movss         (%r8,%r9,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,195                           // unpcklps      %xmm3,%xmm0
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  102,15,115,217,8                    // psrldq        $0x8,%xmm1
  .byte  102,65,15,219,202                   // pand          %xmm10,%xmm1
  .byte  102,65,15,97,200                    // punpcklwd     %xmm8,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,208                   // movq          %xmm2,%r8
  .byte  69,15,182,200                       // movzbl        %r8b,%r9d
  .byte  73,193,232,32                       // shr           $0x20,%r8
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  68,15,182,217                       // movzbl        %cl,%r11d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  243,65,15,16,20,10                  // movss         (%r10,%rcx,1),%xmm2
  .byte  243,67,15,16,12,130                 // movss         (%r10,%r8,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,154                 // movss         (%r10,%r11,4),%xmm1
  .byte  243,67,15,16,28,138                 // movss         (%r10,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,69,15,97,208                    // punpcklwd     %xmm8,%xmm10
  .byte  102,65,15,112,210,78                // pshufd        $0x4e,%xmm10,%xmm2
  .byte  102,72,15,126,209                   // movq          %xmm2,%rcx
  .byte  68,15,182,193                       // movzbl        %cl,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,76,15,126,208                   // movq          %xmm10,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  243,69,15,16,20,1                   // movss         (%r9,%rax,1),%xmm10
  .byte  243,65,15,16,20,137                 // movss         (%r9,%rcx,4),%xmm2
  .byte  68,15,20,210                        // unpcklps      %xmm2,%xmm10
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  243,67,15,16,28,129                 // movss         (%r9,%r8,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,210                        // unpcklps      %xmm10,%xmm2
  .byte  102,65,15,112,217,78                // pshufd        $0x4e,%xmm9,%xmm3
  .byte  102,68,15,111,203                   // movdqa        %xmm3,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,217                   // por           %xmm9,%xmm3
  .byte  102,65,15,97,216                    // punpcklwd     %xmm8,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,210,44,0,0                 // mulps         0x2cd2(%rip),%xmm3        # 4e50 <_sk_callback_sse2+0x5e7>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_tables_rgb_u16_be_sse2
.globl _sk_load_tables_rgb_u16_be_sse2
FUNCTION(_sk_load_tables_rgb_u16_be_sse2)
_sk_load_tables_rgb_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,12,127                       // lea           (%rdi,%rdi,2),%r9
  .byte  72,139,8                            // mov           (%rax),%rcx
  .byte  76,139,64,8                         // mov           0x8(%rax),%r8
  .byte  243,70,15,111,28,73                 // movdqu        (%rcx,%r9,2),%xmm11
  .byte  243,66,15,111,68,73,8               // movdqu        0x8(%rcx,%r9,2),%xmm0
  .byte  102,15,115,216,4                    // psrldq        $0x4,%xmm0
  .byte  102,69,15,111,211                   // movdqa        %xmm11,%xmm10
  .byte  102,65,15,115,218,6                 // psrldq        $0x6,%xmm10
  .byte  102,68,15,97,216                    // punpcklwd     %xmm0,%xmm11
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,68,15,97,208                    // punpcklwd     %xmm0,%xmm10
  .byte  102,65,15,111,195                   // movdqa        %xmm11,%xmm0
  .byte  102,65,15,97,194                    // punpcklwd     %xmm10,%xmm0
  .byte  102,68,15,111,5,146,44,0,0          // movdqa        0x2c92(%rip),%xmm8        # 4e60 <_sk_callback_sse2+0x5f7>
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  102,15,112,216,78                   // pshufd        $0x4e,%xmm0,%xmm3
  .byte  102,72,15,126,217                   // movq          %xmm3,%rcx
  .byte  68,15,182,201                       // movzbl        %cl,%r9d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  243,67,15,16,28,16                  // movss         (%r8,%r10,1),%xmm3
  .byte  243,65,15,16,4,136                  // movss         (%r8,%rcx,4),%xmm0
  .byte  15,20,216                           // unpcklps      %xmm0,%xmm3
  .byte  243,67,15,16,4,152                  // movss         (%r8,%r11,4),%xmm0
  .byte  243,67,15,16,20,136                 // movss         (%r8,%r9,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,195                           // unpcklps      %xmm3,%xmm0
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  102,65,15,219,200                   // pand          %xmm8,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,208                   // movq          %xmm2,%r8
  .byte  69,15,182,200                       // movzbl        %r8b,%r9d
  .byte  73,193,232,32                       // shr           $0x20,%r8
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  68,15,182,217                       // movzbl        %cl,%r11d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  243,65,15,16,20,10                  // movss         (%r10,%rcx,1),%xmm2
  .byte  243,67,15,16,12,130                 // movss         (%r10,%r8,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,154                 // movss         (%r10,%r11,4),%xmm1
  .byte  243,67,15,16,28,138                 // movss         (%r10,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,69,15,105,218                   // punpckhwd     %xmm10,%xmm11
  .byte  102,69,15,219,216                   // pand          %xmm8,%xmm11
  .byte  102,69,15,97,217                    // punpcklwd     %xmm9,%xmm11
  .byte  102,65,15,112,211,78                // pshufd        $0x4e,%xmm11,%xmm2
  .byte  102,72,15,126,209                   // movq          %xmm2,%rcx
  .byte  68,15,182,193                       // movzbl        %cl,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,76,15,126,216                   // movq          %xmm11,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  243,69,15,16,4,1                    // movss         (%r9,%rax,1),%xmm8
  .byte  243,65,15,16,20,137                 // movss         (%r9,%rcx,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  243,67,15,16,28,129                 // movss         (%r9,%r8,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,161,43,0,0                 // movaps        0x2ba1(%rip),%xmm3        # 4e70 <_sk_callback_sse2+0x607>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_sse2
.globl _sk_byte_tables_sse2
FUNCTION(_sk_byte_tables_sse2)
_sk_byte_tables_sse2:
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,162,43,0,0               // movaps        0x2ba2(%rip),%xmm8        # 4e80 <_sk_callback_sse2+0x617>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  76,139,48                           // mov           (%rax),%r14
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,22                     // movzbl        (%r14,%r10,1),%r10d
  .byte  67,15,182,28,30                     // movzbl        (%r14,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  71,15,182,4,6                       // movzbl        (%r14,%r8,1),%r8d
  .byte  65,15,182,12,14                     // movzbl        (%r14,%rcx,1),%ecx
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  68,9,193                            // or            %r8d,%ecx
  .byte  102,15,196,193,0                    // pinsrw        $0x0,%ecx,%xmm0
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,96,193                    // punpcklbw     %xmm9,%xmm0
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,21,63,43,0,0               // movaps        0x2b3f(%rip),%xmm10        # 4e90 <_sk_callback_sse2+0x627>
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,15,112,201,78                   // pshufd        $0x4e,%xmm1,%xmm1
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  71,15,182,4,1                       // movzbl        (%r9,%r8,1),%r8d
  .byte  65,15,182,12,9                      // movzbl        (%r9,%rcx,1),%ecx
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  68,9,193                            // or            %r8d,%ecx
  .byte  102,15,196,201,0                    // pinsrw        $0x0,%ecx,%xmm1
  .byte  102,15,196,203,1                    // pinsrw        $0x1,%ebx,%xmm1
  .byte  102,65,15,96,201                    // punpcklbw     %xmm9,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,216                          // mov           %ebx,%r8d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,15,112,210,78                   // pshufd        $0x4e,%xmm2,%xmm2
  .byte  102,72,15,126,209                   // movq          %xmm2,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,12,9                      // movzbl        (%r9,%rcx,1),%ecx
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  68,9,209                            // or            %r10d,%ecx
  .byte  71,15,182,4,1                       // movzbl        (%r9,%r8,1),%r8d
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,195                            // or            %r8d,%ebx
  .byte  102,15,196,211,0                    // pinsrw        $0x0,%ebx,%xmm2
  .byte  102,15,196,209,1                    // pinsrw        $0x1,%ecx,%xmm2
  .byte  102,65,15,96,209                    // punpcklbw     %xmm9,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  102,15,91,219                       // cvtps2dq      %xmm3,%xmm3
  .byte  102,72,15,126,217                   // movq          %xmm3,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,15,112,219,78                   // pshufd        $0x4e,%xmm3,%xmm3
  .byte  102,72,15,126,219                   // movq          %xmm3,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  70,15,182,12,8                      // movzbl        (%rax,%r9,1),%r9d
  .byte  15,182,28,24                        // movzbl        (%rax,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,203                            // or            %r9d,%ebx
  .byte  70,15,182,4,0                       // movzbl        (%rax,%r8,1),%r8d
  .byte  15,182,4,8                          // movzbl        (%rax,%rcx,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,192                            // or            %r8d,%eax
  .byte  102,15,196,216,0                    // pinsrw        $0x0,%eax,%xmm3
  .byte  102,15,196,219,1                    // pinsrw        $0x1,%ebx,%xmm3
  .byte  102,65,15,96,217                    // punpcklbw     %xmm9,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_sse2
.globl _sk_byte_tables_rgb_sse2
FUNCTION(_sk_byte_tables_rgb_sse2)
_sk_byte_tables_rgb_sse2:
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  139,72,24                           // mov           0x18(%rax),%ecx
  .byte  255,201                             // dec           %ecx
  .byte  102,68,15,110,193                   // movd          %ecx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  76,139,48                           // mov           (%rax),%r14
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,22                     // movzbl        (%r14,%r10,1),%r10d
  .byte  67,15,182,28,30                     // movzbl        (%r14,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  71,15,182,4,6                       // movzbl        (%r14,%r8,1),%r8d
  .byte  65,15,182,12,14                     // movzbl        (%r14,%rcx,1),%ecx
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  68,9,193                            // or            %r8d,%ecx
  .byte  102,15,196,193,0                    // pinsrw        $0x0,%ecx,%xmm0
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,96,193                    // punpcklbw     %xmm9,%xmm0
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,21,146,41,0,0              // movaps        0x2992(%rip),%xmm10        # 4ea0 <_sk_callback_sse2+0x637>
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,126,201                   // movq          %xmm1,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,15,112,201,78                   // pshufd        $0x4e,%xmm1,%xmm1
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  71,15,182,4,1                       // movzbl        (%r9,%r8,1),%r8d
  .byte  65,15,182,12,9                      // movzbl        (%r9,%rcx,1),%ecx
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  68,9,193                            // or            %r8d,%ecx
  .byte  102,15,196,201,0                    // pinsrw        $0x0,%ecx,%xmm1
  .byte  102,15,196,203,1                    // pinsrw        $0x1,%ebx,%xmm1
  .byte  102,65,15,96,201                    // punpcklbw     %xmm9,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  72,139,64,16                        // mov           0x10(%rax),%rax
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,126,209                   // movq          %xmm2,%rcx
  .byte  65,137,200                          // mov           %ecx,%r8d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,15,112,210,78                   // pshufd        $0x4e,%xmm2,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  70,15,182,12,8                      // movzbl        (%rax,%r9,1),%r9d
  .byte  15,182,28,24                        // movzbl        (%rax,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,203                            // or            %r9d,%ebx
  .byte  70,15,182,4,0                       // movzbl        (%rax,%r8,1),%r8d
  .byte  15,182,4,8                          // movzbl        (%rax,%rcx,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,192                            // or            %r8d,%eax
  .byte  102,15,196,208,0                    // pinsrw        $0x0,%eax,%xmm2
  .byte  102,15,196,211,1                    // pinsrw        $0x1,%ebx,%xmm2
  .byte  102,65,15,96,209                    // punpcklbw     %xmm9,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_sse2
.globl _sk_table_r_sse2
FUNCTION(_sk_table_r_sse2)
_sk_table_r_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,192,78                // pshufd        $0x4e,%xmm8,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,76,15,126,193                   // movq          %xmm8,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,69,15,16,4,137                  // movss         (%r9,%rcx,4),%xmm8
  .byte  243,65,15,16,4,129                  // movss         (%r9,%rax,4),%xmm0
  .byte  68,15,20,192                        // unpcklps      %xmm0,%xmm8
  .byte  243,67,15,16,4,145                  // movss         (%r9,%r10,4),%xmm0
  .byte  243,71,15,16,12,129                 // movss         (%r9,%r8,4),%xmm9
  .byte  65,15,20,193                        // unpcklps      %xmm9,%xmm0
  .byte  65,15,20,192                        // unpcklps      %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_sse2
.globl _sk_table_g_sse2
FUNCTION(_sk_table_g_sse2)
_sk_table_g_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,200,78                // pshufd        $0x4e,%xmm8,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,76,15,126,193                   // movq          %xmm8,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,69,15,16,4,137                  // movss         (%r9,%rcx,4),%xmm8
  .byte  243,65,15,16,12,129                 // movss         (%r9,%rax,4),%xmm1
  .byte  68,15,20,193                        // unpcklps      %xmm1,%xmm8
  .byte  243,67,15,16,12,145                 // movss         (%r9,%r10,4),%xmm1
  .byte  243,71,15,16,12,129                 // movss         (%r9,%r8,4),%xmm9
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  65,15,20,200                        // unpcklps      %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_sse2
.globl _sk_table_b_sse2
FUNCTION(_sk_table_b_sse2)
_sk_table_b_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,208,78                // pshufd        $0x4e,%xmm8,%xmm2
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,76,15,126,193                   // movq          %xmm8,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,69,15,16,4,137                  // movss         (%r9,%rcx,4),%xmm8
  .byte  243,65,15,16,20,129                 // movss         (%r9,%rax,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  243,71,15,16,12,129                 // movss         (%r9,%r8,4),%xmm9
  .byte  65,15,20,209                        // unpcklps      %xmm9,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_sse2
.globl _sk_table_a_sse2
FUNCTION(_sk_table_a_sse2)
_sk_table_a_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,216,78                // pshufd        $0x4e,%xmm8,%xmm3
  .byte  102,72,15,126,216                   // movq          %xmm3,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,76,15,126,193                   // movq          %xmm8,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,69,15,16,4,137                  // movss         (%r9,%rcx,4),%xmm8
  .byte  243,65,15,16,28,129                 // movss         (%r9,%rax,4),%xmm3
  .byte  68,15,20,195                        // unpcklps      %xmm3,%xmm8
  .byte  243,67,15,16,28,145                 // movss         (%r9,%r10,4),%xmm3
  .byte  243,71,15,16,12,129                 // movss         (%r9,%r8,4),%xmm9
  .byte  65,15,20,217                        // unpcklps      %xmm9,%xmm3
  .byte  65,15,20,216                        // unpcklps      %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_sse2
.globl _sk_parametric_r_sse2
FUNCTION(_sk_parametric_r_sse2)
_sk_parametric_r_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  65,15,194,193,2                     // cmpleps       %xmm9,%xmm0
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,209,38,0,0              // mulps         0x26d1(%rip),%xmm9        # 4eb0 <_sk_callback_sse2+0x647>
  .byte  68,15,84,21,217,38,0,0              // andps         0x26d9(%rip),%xmm10        # 4ec0 <_sk_callback_sse2+0x657>
  .byte  68,15,86,21,225,38,0,0              // orps          0x26e1(%rip),%xmm10        # 4ed0 <_sk_callback_sse2+0x667>
  .byte  68,15,88,13,233,38,0,0              // addps         0x26e9(%rip),%xmm9        # 4ee0 <_sk_callback_sse2+0x677>
  .byte  68,15,40,37,241,38,0,0              // movaps        0x26f1(%rip),%xmm12        # 4ef0 <_sk_callback_sse2+0x687>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,241,38,0,0              // addps         0x26f1(%rip),%xmm10        # 4f00 <_sk_callback_sse2+0x697>
  .byte  68,15,40,37,249,38,0,0              // movaps        0x26f9(%rip),%xmm12        # 4f10 <_sk_callback_sse2+0x6a7>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,227,38,0,0              // movaps        0x26e3(%rip),%xmm10        # 4f20 <_sk_callback_sse2+0x6b7>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,215,38,0,0              // addps         0x26d7(%rip),%xmm9        # 4f30 <_sk_callback_sse2+0x6c7>
  .byte  68,15,40,37,223,38,0,0              // movaps        0x26df(%rip),%xmm12        # 4f40 <_sk_callback_sse2+0x6d7>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,223,38,0,0              // movaps        0x26df(%rip),%xmm12        # 4f50 <_sk_callback_sse2+0x6e7>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,227,38,0,0              // movaps        0x26e3(%rip),%xmm13        # 4f60 <_sk_callback_sse2+0x6f7>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,227,38,0,0              // mulps         0x26e3(%rip),%xmm13        # 4f70 <_sk_callback_sse2+0x707>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,192                        // andps         %xmm0,%xmm8
  .byte  65,15,85,196                        // andnps        %xmm12,%xmm0
  .byte  65,15,86,192                        // orps          %xmm8,%xmm0
  .byte  65,15,95,195                        // maxps         %xmm11,%xmm0
  .byte  65,15,93,194                        // minps         %xmm10,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_sse2
.globl _sk_parametric_g_sse2
FUNCTION(_sk_parametric_g_sse2)
_sk_parametric_g_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  65,15,194,201,2                     // cmpleps       %xmm9,%xmm1
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,99,38,0,0               // mulps         0x2663(%rip),%xmm9        # 4f80 <_sk_callback_sse2+0x717>
  .byte  68,15,84,21,107,38,0,0              // andps         0x266b(%rip),%xmm10        # 4f90 <_sk_callback_sse2+0x727>
  .byte  68,15,86,21,115,38,0,0              // orps          0x2673(%rip),%xmm10        # 4fa0 <_sk_callback_sse2+0x737>
  .byte  68,15,88,13,123,38,0,0              // addps         0x267b(%rip),%xmm9        # 4fb0 <_sk_callback_sse2+0x747>
  .byte  68,15,40,37,131,38,0,0              // movaps        0x2683(%rip),%xmm12        # 4fc0 <_sk_callback_sse2+0x757>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,131,38,0,0              // addps         0x2683(%rip),%xmm10        # 4fd0 <_sk_callback_sse2+0x767>
  .byte  68,15,40,37,139,38,0,0              // movaps        0x268b(%rip),%xmm12        # 4fe0 <_sk_callback_sse2+0x777>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,117,38,0,0              // movaps        0x2675(%rip),%xmm10        # 4ff0 <_sk_callback_sse2+0x787>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,105,38,0,0              // addps         0x2669(%rip),%xmm9        # 5000 <_sk_callback_sse2+0x797>
  .byte  68,15,40,37,113,38,0,0              // movaps        0x2671(%rip),%xmm12        # 5010 <_sk_callback_sse2+0x7a7>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,113,38,0,0              // movaps        0x2671(%rip),%xmm12        # 5020 <_sk_callback_sse2+0x7b7>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,117,38,0,0              // movaps        0x2675(%rip),%xmm13        # 5030 <_sk_callback_sse2+0x7c7>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,117,38,0,0              // mulps         0x2675(%rip),%xmm13        # 5040 <_sk_callback_sse2+0x7d7>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  65,15,85,204                        // andnps        %xmm12,%xmm1
  .byte  65,15,86,200                        // orps          %xmm8,%xmm1
  .byte  65,15,95,203                        // maxps         %xmm11,%xmm1
  .byte  65,15,93,202                        // minps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_sse2
.globl _sk_parametric_b_sse2
FUNCTION(_sk_parametric_b_sse2)
_sk_parametric_b_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  65,15,194,209,2                     // cmpleps       %xmm9,%xmm2
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,245,37,0,0              // mulps         0x25f5(%rip),%xmm9        # 5050 <_sk_callback_sse2+0x7e7>
  .byte  68,15,84,21,253,37,0,0              // andps         0x25fd(%rip),%xmm10        # 5060 <_sk_callback_sse2+0x7f7>
  .byte  68,15,86,21,5,38,0,0                // orps          0x2605(%rip),%xmm10        # 5070 <_sk_callback_sse2+0x807>
  .byte  68,15,88,13,13,38,0,0               // addps         0x260d(%rip),%xmm9        # 5080 <_sk_callback_sse2+0x817>
  .byte  68,15,40,37,21,38,0,0               // movaps        0x2615(%rip),%xmm12        # 5090 <_sk_callback_sse2+0x827>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,21,38,0,0               // addps         0x2615(%rip),%xmm10        # 50a0 <_sk_callback_sse2+0x837>
  .byte  68,15,40,37,29,38,0,0               // movaps        0x261d(%rip),%xmm12        # 50b0 <_sk_callback_sse2+0x847>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,7,38,0,0                // movaps        0x2607(%rip),%xmm10        # 50c0 <_sk_callback_sse2+0x857>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,251,37,0,0              // addps         0x25fb(%rip),%xmm9        # 50d0 <_sk_callback_sse2+0x867>
  .byte  68,15,40,37,3,38,0,0                // movaps        0x2603(%rip),%xmm12        # 50e0 <_sk_callback_sse2+0x877>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,3,38,0,0                // movaps        0x2603(%rip),%xmm12        # 50f0 <_sk_callback_sse2+0x887>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,7,38,0,0                // movaps        0x2607(%rip),%xmm13        # 5100 <_sk_callback_sse2+0x897>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,7,38,0,0                // mulps         0x2607(%rip),%xmm13        # 5110 <_sk_callback_sse2+0x8a7>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,212                        // andnps        %xmm12,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  65,15,95,211                        // maxps         %xmm11,%xmm2
  .byte  65,15,93,210                        // minps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_sse2
.globl _sk_parametric_a_sse2
FUNCTION(_sk_parametric_a_sse2)
_sk_parametric_a_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  65,15,194,217,2                     // cmpleps       %xmm9,%xmm3
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,135,37,0,0              // mulps         0x2587(%rip),%xmm9        # 5120 <_sk_callback_sse2+0x8b7>
  .byte  68,15,84,21,143,37,0,0              // andps         0x258f(%rip),%xmm10        # 5130 <_sk_callback_sse2+0x8c7>
  .byte  68,15,86,21,151,37,0,0              // orps          0x2597(%rip),%xmm10        # 5140 <_sk_callback_sse2+0x8d7>
  .byte  68,15,88,13,159,37,0,0              // addps         0x259f(%rip),%xmm9        # 5150 <_sk_callback_sse2+0x8e7>
  .byte  68,15,40,37,167,37,0,0              // movaps        0x25a7(%rip),%xmm12        # 5160 <_sk_callback_sse2+0x8f7>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,167,37,0,0              // addps         0x25a7(%rip),%xmm10        # 5170 <_sk_callback_sse2+0x907>
  .byte  68,15,40,37,175,37,0,0              // movaps        0x25af(%rip),%xmm12        # 5180 <_sk_callback_sse2+0x917>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,153,37,0,0              // movaps        0x2599(%rip),%xmm10        # 5190 <_sk_callback_sse2+0x927>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,141,37,0,0              // addps         0x258d(%rip),%xmm9        # 51a0 <_sk_callback_sse2+0x937>
  .byte  68,15,40,37,149,37,0,0              // movaps        0x2595(%rip),%xmm12        # 51b0 <_sk_callback_sse2+0x947>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,149,37,0,0              // movaps        0x2595(%rip),%xmm12        # 51c0 <_sk_callback_sse2+0x957>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,153,37,0,0              // movaps        0x2599(%rip),%xmm13        # 51d0 <_sk_callback_sse2+0x967>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,153,37,0,0              // mulps         0x2599(%rip),%xmm13        # 51e0 <_sk_callback_sse2+0x977>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,195                        // andps         %xmm3,%xmm8
  .byte  65,15,85,220                        // andnps        %xmm12,%xmm3
  .byte  65,15,86,216                        // orps          %xmm8,%xmm3
  .byte  65,15,95,219                        // maxps         %xmm11,%xmm3
  .byte  65,15,93,218                        // minps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_sse2
.globl _sk_lab_to_xyz_sse2
FUNCTION(_sk_lab_to_xyz_sse2)
_sk_lab_to_xyz_sse2:
  .byte  15,89,5,118,37,0,0                  // mulps         0x2576(%rip),%xmm0        # 51f0 <_sk_callback_sse2+0x987>
  .byte  68,15,40,5,126,37,0,0               // movaps        0x257e(%rip),%xmm8        # 5200 <_sk_callback_sse2+0x997>
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  68,15,40,13,130,37,0,0              // movaps        0x2582(%rip),%xmm9        # 5210 <_sk_callback_sse2+0x9a7>
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,88,5,127,37,0,0                  // addps         0x257f(%rip),%xmm0        # 5220 <_sk_callback_sse2+0x9b7>
  .byte  15,89,5,136,37,0,0                  // mulps         0x2588(%rip),%xmm0        # 5230 <_sk_callback_sse2+0x9c7>
  .byte  15,89,13,145,37,0,0                 // mulps         0x2591(%rip),%xmm1        # 5240 <_sk_callback_sse2+0x9d7>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,21,151,37,0,0                 // mulps         0x2597(%rip),%xmm2        # 5250 <_sk_callback_sse2+0x9e7>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,21,140,37,0,0                 // movaps        0x258c(%rip),%xmm2        # 5260 <_sk_callback_sse2+0x9f7>
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,194,196,1                     // cmpltps       %xmm12,%xmm8
  .byte  68,15,40,21,139,37,0,0              // movaps        0x258b(%rip),%xmm10        # 5270 <_sk_callback_sse2+0xa07>
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,40,29,143,37,0,0              // movaps        0x258f(%rip),%xmm11        # 5280 <_sk_callback_sse2+0xa17>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  69,15,84,224                        // andps         %xmm8,%xmm12
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,196                        // orps          %xmm12,%xmm8
  .byte  68,15,40,224                        // movaps        %xmm0,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,194,204,1                     // cmpltps       %xmm12,%xmm1
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  68,15,84,225                        // andps         %xmm1,%xmm12
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  65,15,86,204                        // orps          %xmm12,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  15,194,208,1                        // cmpltps       %xmm0,%xmm2
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  15,84,194                           // andps         %xmm2,%xmm0
  .byte  65,15,85,209                        // andnps        %xmm9,%xmm2
  .byte  15,86,208                           // orps          %xmm0,%xmm2
  .byte  68,15,89,5,63,37,0,0                // mulps         0x253f(%rip),%xmm8        # 5290 <_sk_callback_sse2+0xa27>
  .byte  15,89,21,72,37,0,0                  // mulps         0x2548(%rip),%xmm2        # 52a0 <_sk_callback_sse2+0xa37>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_sse2
.globl _sk_load_a8_sse2
FUNCTION(_sk_load_a8_sse2)
_sk_load_a8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,15,110,4,56                     // movd          (%rax,%rdi,1),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,48,37,0,0                  // mulps         0x2530(%rip),%xmm3        # 52b0 <_sk_callback_sse2+0xa47>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_a8_sse2
.globl _sk_gather_a8_sse2
FUNCTION(_sk_gather_a8_sse2)
_sk_gather_a8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,12,9                      // movzbl        (%r9,%rcx,1),%ecx
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  68,9,209                            // or            %r10d,%ecx
  .byte  71,15,182,4,1                       // movzbl        (%r9,%r8,1),%r8d
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,192                            // or            %r8d,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,193,1                    // pinsrw        $0x1,%ecx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,159,36,0,0                 // mulps         0x249f(%rip),%xmm3        # 52c0 <_sk_callback_sse2+0xa57>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_sse2
.globl _sk_store_a8_sse2
FUNCTION(_sk_store_a8_sse2)
_sk_store_a8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,147,36,0,0               // movaps        0x2493(%rip),%xmm8        # 52d0 <_sk_callback_sse2+0xa67>
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  102,68,15,126,4,56                  // movd          %xmm8,(%rax,%rdi,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_g8_sse2
.globl _sk_load_g8_sse2
FUNCTION(_sk_load_g8_sse2)
_sk_load_g8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,15,110,4,56                     // movd          (%rax,%rdi,1),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,90,36,0,0                   // mulps         0x245a(%rip),%xmm0        # 52e0 <_sk_callback_sse2+0xa77>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,97,36,0,0                  // movaps        0x2461(%rip),%xmm3        # 52f0 <_sk_callback_sse2+0xa87>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_g8_sse2
.globl _sk_gather_g8_sse2
FUNCTION(_sk_gather_g8_sse2)
_sk_gather_g8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,12,9                      // movzbl        (%r9,%rcx,1),%ecx
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  68,9,209                            // or            %r10d,%ecx
  .byte  71,15,182,4,1                       // movzbl        (%r9,%r8,1),%r8d
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,192                            // or            %r8d,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,193,1                    // pinsrw        $0x1,%ecx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,214,35,0,0                  // mulps         0x23d6(%rip),%xmm0        # 5300 <_sk_callback_sse2+0xa97>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,221,35,0,0                 // movaps        0x23dd(%rip),%xmm3        # 5310 <_sk_callback_sse2+0xaa7>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_sse2
.globl _sk_gather_i8_sse2
FUNCTION(_sk_gather_i8_sse2)
_sk_gather_i8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,192                          // mov           %rax,%r8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  116,5                               // je            2f4a <_sk_gather_i8_sse2+0xf>
  .byte  76,137,192                          // mov           %r8,%rax
  .byte  235,2                               // jmp           2f4c <_sk_gather_i8_sse2+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,203                          // mov           %ecx,%r11d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  71,15,182,28,26                     // movzbl        (%r10,%r11,1),%r11d
  .byte  65,15,182,12,10                     // movzbl        (%r10,%rcx,1),%ecx
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  68,9,217                            // or            %r11d,%ecx
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,200                            // or            %r9d,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,193,1                    // pinsrw        $0x1,%ecx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  68,15,182,200                       // movzbl        %al,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  77,139,64,8                         // mov           0x8(%r8),%r8
  .byte  68,15,182,209                       // movzbl        %cl,%r10d
  .byte  72,193,233,30                       // shr           $0x1e,%rcx
  .byte  102,65,15,110,4,8                   // movd          (%r8,%rcx,1),%xmm0
  .byte  102,65,15,110,12,128                // movd          (%r8,%rax,4),%xmm1
  .byte  102,15,98,193                       // punpckldq     %xmm1,%xmm0
  .byte  102,71,15,110,12,144                // movd          (%r8,%r10,4),%xmm9
  .byte  102,67,15,110,12,136                // movd          (%r8,%r9,4),%xmm1
  .byte  102,68,15,98,201                    // punpckldq     %xmm1,%xmm9
  .byte  102,68,15,98,200                    // punpckldq     %xmm0,%xmm9
  .byte  102,15,111,21,252,34,0,0            // movdqa        0x22fc(%rip),%xmm2        # 5320 <_sk_callback_sse2+0xab7>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,248,34,0,0               // movaps        0x22f8(%rip),%xmm8        # 5330 <_sk_callback_sse2+0xac7>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,65,15,111,217                   // movdqa        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_sse2
.globl _sk_load_565_sse2
FUNCTION(_sk_load_565_sse2)
_sk_load_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  243,15,126,20,120                   // movq          (%rax,%rdi,2),%xmm2
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,111,5,174,34,0,0             // movdqa        0x22ae(%rip),%xmm0        # 5340 <_sk_callback_sse2+0xad7>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,176,34,0,0                  // mulps         0x22b0(%rip),%xmm0        # 5350 <_sk_callback_sse2+0xae7>
  .byte  102,15,111,13,184,34,0,0            // movdqa        0x22b8(%rip),%xmm1        # 5360 <_sk_callback_sse2+0xaf7>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,186,34,0,0                 // mulps         0x22ba(%rip),%xmm1        # 5370 <_sk_callback_sse2+0xb07>
  .byte  102,15,219,21,194,34,0,0            // pand          0x22c2(%rip),%xmm2        # 5380 <_sk_callback_sse2+0xb17>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,200,34,0,0                 // mulps         0x22c8(%rip),%xmm2        # 5390 <_sk_callback_sse2+0xb27>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,207,34,0,0                 // movaps        0x22cf(%rip),%xmm3        # 53a0 <_sk_callback_sse2+0xb37>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_565_sse2
.globl _sk_gather_565_sse2
FUNCTION(_sk_gather_565_sse2)
_sk_gather_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,196,20,81,0               // pinsrw        $0x0,(%r9,%r10,2),%xmm2
  .byte  102,65,15,196,20,73,1               // pinsrw        $0x1,(%r9,%rcx,2),%xmm2
  .byte  67,15,183,12,65                     // movzwl        (%r9,%r8,2),%ecx
  .byte  102,15,196,209,2                    // pinsrw        $0x2,%ecx,%xmm2
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,208,3                    // pinsrw        $0x3,%eax,%xmm2
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,111,5,88,34,0,0              // movdqa        0x2258(%rip),%xmm0        # 53b0 <_sk_callback_sse2+0xb47>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,90,34,0,0                   // mulps         0x225a(%rip),%xmm0        # 53c0 <_sk_callback_sse2+0xb57>
  .byte  102,15,111,13,98,34,0,0             // movdqa        0x2262(%rip),%xmm1        # 53d0 <_sk_callback_sse2+0xb67>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,100,34,0,0                 // mulps         0x2264(%rip),%xmm1        # 53e0 <_sk_callback_sse2+0xb77>
  .byte  102,15,219,21,108,34,0,0            // pand          0x226c(%rip),%xmm2        # 53f0 <_sk_callback_sse2+0xb87>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,114,34,0,0                 // mulps         0x2272(%rip),%xmm2        # 5400 <_sk_callback_sse2+0xb97>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,121,34,0,0                 // movaps        0x2279(%rip),%xmm3        # 5410 <_sk_callback_sse2+0xba7>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_sse2
.globl _sk_store_565_sse2
FUNCTION(_sk_store_565_sse2)
_sk_store_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,122,34,0,0               // movaps        0x227a(%rip),%xmm8        # 5420 <_sk_callback_sse2+0xbb7>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,11                // pslld         $0xb,%xmm9
  .byte  68,15,40,21,111,34,0,0              // movaps        0x226f(%rip),%xmm10        # 5430 <_sk_callback_sse2+0xbc7>
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,5                 // pslld         $0x5,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,68,15,214,4,120                 // movq          %xmm8,(%rax,%rdi,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_4444_sse2
.globl _sk_load_4444_sse2
FUNCTION(_sk_load_4444_sse2)
_sk_load_4444_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  243,15,126,28,120                   // movq          (%rax,%rdi,2),%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,111,5,40,34,0,0              // movdqa        0x2228(%rip),%xmm0        # 5440 <_sk_callback_sse2+0xbd7>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,42,34,0,0                   // mulps         0x222a(%rip),%xmm0        # 5450 <_sk_callback_sse2+0xbe7>
  .byte  102,15,111,13,50,34,0,0             // movdqa        0x2232(%rip),%xmm1        # 5460 <_sk_callback_sse2+0xbf7>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,52,34,0,0                  // mulps         0x2234(%rip),%xmm1        # 5470 <_sk_callback_sse2+0xc07>
  .byte  102,15,111,21,60,34,0,0             // movdqa        0x223c(%rip),%xmm2        # 5480 <_sk_callback_sse2+0xc17>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,62,34,0,0                  // mulps         0x223e(%rip),%xmm2        # 5490 <_sk_callback_sse2+0xc27>
  .byte  102,15,219,29,70,34,0,0             // pand          0x2246(%rip),%xmm3        # 54a0 <_sk_callback_sse2+0xc37>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,76,34,0,0                  // mulps         0x224c(%rip),%xmm3        # 54b0 <_sk_callback_sse2+0xc47>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_4444_sse2
.globl _sk_gather_4444_sse2
FUNCTION(_sk_gather_4444_sse2)
_sk_gather_4444_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,67,15,196,28,81,0               // pinsrw        $0x0,(%r9,%r10,2),%xmm3
  .byte  102,65,15,196,28,73,1               // pinsrw        $0x1,(%r9,%rcx,2),%xmm3
  .byte  67,15,183,12,65                     // movzwl        (%r9,%r8,2),%ecx
  .byte  102,15,196,217,2                    // pinsrw        $0x2,%ecx,%xmm3
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,216,3                    // pinsrw        $0x3,%eax,%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,111,5,211,33,0,0             // movdqa        0x21d3(%rip),%xmm0        # 54c0 <_sk_callback_sse2+0xc57>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,213,33,0,0                  // mulps         0x21d5(%rip),%xmm0        # 54d0 <_sk_callback_sse2+0xc67>
  .byte  102,15,111,13,221,33,0,0            // movdqa        0x21dd(%rip),%xmm1        # 54e0 <_sk_callback_sse2+0xc77>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,223,33,0,0                 // mulps         0x21df(%rip),%xmm1        # 54f0 <_sk_callback_sse2+0xc87>
  .byte  102,15,111,21,231,33,0,0            // movdqa        0x21e7(%rip),%xmm2        # 5500 <_sk_callback_sse2+0xc97>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,233,33,0,0                 // mulps         0x21e9(%rip),%xmm2        # 5510 <_sk_callback_sse2+0xca7>
  .byte  102,15,219,29,241,33,0,0            // pand          0x21f1(%rip),%xmm3        # 5520 <_sk_callback_sse2+0xcb7>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,247,33,0,0                 // mulps         0x21f7(%rip),%xmm3        # 5530 <_sk_callback_sse2+0xcc7>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_sse2
.globl _sk_store_4444_sse2
FUNCTION(_sk_store_4444_sse2)
_sk_store_4444_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,246,33,0,0               // movaps        0x21f6(%rip),%xmm8        # 5540 <_sk_callback_sse2+0xcd7>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,12                // pslld         $0xc,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,4                 // pslld         $0x4,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,193                    // orpd          %xmm9,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,68,15,214,4,120                 // movq          %xmm8,(%rax,%rdi,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_8888_sse2
.globl _sk_load_8888_sse2
FUNCTION(_sk_load_8888_sse2)
_sk_load_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,16,12,184                     // movups        (%rax,%rdi,4),%xmm9
  .byte  15,40,21,137,33,0,0                 // movaps        0x2189(%rip),%xmm2        # 5550 <_sk_callback_sse2+0xce7>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,84,194                           // andps         %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,135,33,0,0               // movaps        0x2187(%rip),%xmm8        # 5560 <_sk_callback_sse2+0xcf7>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,40,217                        // movaps        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_8888_sse2
.globl _sk_gather_8888_sse2
FUNCTION(_sk_gather_8888_sse2)
_sk_gather_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  102,65,15,110,4,137                 // movd          (%r9,%rcx,4),%xmm0
  .byte  102,65,15,110,12,129                // movd          (%r9,%rax,4),%xmm1
  .byte  102,15,98,193                       // punpckldq     %xmm1,%xmm0
  .byte  102,71,15,110,12,145                // movd          (%r9,%r10,4),%xmm9
  .byte  102,67,15,110,12,129                // movd          (%r9,%r8,4),%xmm1
  .byte  102,68,15,98,201                    // punpckldq     %xmm1,%xmm9
  .byte  102,68,15,98,200                    // punpckldq     %xmm0,%xmm9
  .byte  102,15,111,21,216,32,0,0            // movdqa        0x20d8(%rip),%xmm2        # 5570 <_sk_callback_sse2+0xd07>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,212,32,0,0               // movaps        0x20d4(%rip),%xmm8        # 5580 <_sk_callback_sse2+0xd17>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,65,15,111,217                   // movdqa        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_sse2
.globl _sk_store_8888_sse2
FUNCTION(_sk_store_8888_sse2)
_sk_store_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,151,32,0,0               // movaps        0x2097(%rip),%xmm8        # 5590 <_sk_callback_sse2+0xd27>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,24                // pslld         $0x18,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  102,69,15,235,194                   // por           %xmm10,%xmm8
  .byte  243,68,15,127,4,184                 // movdqu        %xmm8,(%rax,%rdi,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_f16_sse2
.globl _sk_load_f16_sse2
FUNCTION(_sk_load_f16_sse2)
_sk_load_f16_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  243,15,111,4,248                    // movdqu        (%rax,%rdi,8),%xmm0
  .byte  243,15,111,76,248,16                // movdqu        0x10(%rax,%rdi,8),%xmm1
  .byte  102,68,15,111,192                   // movdqa        %xmm0,%xmm8
  .byte  102,68,15,97,193                    // punpcklwd     %xmm1,%xmm8
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,68,15,97,240                    // punpcklwd     %xmm0,%xmm14
  .byte  102,68,15,105,192                   // punpckhwd     %xmm0,%xmm8
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,97,202                    // punpcklwd     %xmm10,%xmm1
  .byte  102,68,15,111,13,7,32,0,0           // movdqa        0x2007(%rip),%xmm9        # 55a0 <_sk_callback_sse2+0xd37>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,193                   // pand          %xmm9,%xmm0
  .byte  102,15,239,200                      // pxor          %xmm0,%xmm1
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,68,15,111,233                   // movdqa        %xmm1,%xmm13
  .byte  102,65,15,114,245,13                // pslld         $0xd,%xmm13
  .byte  102,68,15,235,232                   // por           %xmm0,%xmm13
  .byte  102,68,15,111,29,236,31,0,0         // movdqa        0x1fec(%rip),%xmm11        # 55b0 <_sk_callback_sse2+0xd47>
  .byte  102,69,15,254,235                   // paddd         %xmm11,%xmm13
  .byte  102,68,15,111,37,238,31,0,0         // movdqa        0x1fee(%rip),%xmm12        # 55c0 <_sk_callback_sse2+0xd57>
  .byte  102,65,15,239,204                   // pxor          %xmm12,%xmm1
  .byte  102,15,111,29,241,31,0,0            // movdqa        0x1ff1(%rip),%xmm3        # 55d0 <_sk_callback_sse2+0xd67>
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,102,193                      // pcmpgtd       %xmm1,%xmm0
  .byte  102,65,15,223,197                   // pandn         %xmm13,%xmm0
  .byte  102,65,15,115,222,8                 // psrldq        $0x8,%xmm14
  .byte  102,69,15,97,242                    // punpcklwd     %xmm10,%xmm14
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,219,201                   // pand          %xmm9,%xmm1
  .byte  102,68,15,239,241                   // pxor          %xmm1,%xmm14
  .byte  102,15,114,241,16                   // pslld         $0x10,%xmm1
  .byte  102,65,15,111,214                   // movdqa        %xmm14,%xmm2
  .byte  102,15,114,242,13                   // pslld         $0xd,%xmm2
  .byte  102,15,235,209                      // por           %xmm1,%xmm2
  .byte  102,65,15,254,211                   // paddd         %xmm11,%xmm2
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,65,15,102,206                   // pcmpgtd       %xmm14,%xmm1
  .byte  102,15,223,202                      // pandn         %xmm2,%xmm1
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,234                    // punpcklwd     %xmm10,%xmm13
  .byte  102,65,15,111,213                   // movdqa        %xmm13,%xmm2
  .byte  102,65,15,219,209                   // pand          %xmm9,%xmm2
  .byte  102,68,15,239,234                   // pxor          %xmm2,%xmm13
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,65,15,114,246,13                // pslld         $0xd,%xmm14
  .byte  102,68,15,235,242                   // por           %xmm2,%xmm14
  .byte  102,69,15,254,243                   // paddd         %xmm11,%xmm14
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,65,15,102,213                   // pcmpgtd       %xmm13,%xmm2
  .byte  102,65,15,223,214                   // pandn         %xmm14,%xmm2
  .byte  102,65,15,115,216,8                 // psrldq        $0x8,%xmm8
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,219,200                   // pand          %xmm8,%xmm9
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,114,242,13                // pslld         $0xd,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  102,69,15,254,211                   // paddd         %xmm11,%xmm10
  .byte  102,69,15,239,196                   // pxor          %xmm12,%xmm8
  .byte  102,65,15,102,216                   // pcmpgtd       %xmm8,%xmm3
  .byte  102,65,15,223,218                   // pandn         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_f16_sse2
.globl _sk_gather_f16_sse2
FUNCTION(_sk_gather_f16_sse2)
_sk_gather_f16_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,192                          // mov           %eax,%r8d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,193                   // movq          %xmm0,%rcx
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  243,65,15,126,4,201                 // movq          (%r9,%rcx,8),%xmm0
  .byte  243,67,15,126,12,209                // movq          (%r9,%r10,8),%xmm1
  .byte  102,15,108,200                      // punpcklqdq    %xmm0,%xmm1
  .byte  243,65,15,126,4,193                 // movq          (%r9,%rax,8),%xmm0
  .byte  243,67,15,126,20,193                // movq          (%r9,%r8,8),%xmm2
  .byte  102,15,108,208                      // punpcklqdq    %xmm0,%xmm2
  .byte  102,68,15,111,193                   // movdqa        %xmm1,%xmm8
  .byte  102,68,15,97,194                    // punpcklwd     %xmm2,%xmm8
  .byte  102,15,105,202                      // punpckhwd     %xmm2,%xmm1
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,68,15,97,241                    // punpcklwd     %xmm1,%xmm14
  .byte  102,68,15,105,193                   // punpckhwd     %xmm1,%xmm8
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,97,202                    // punpcklwd     %xmm10,%xmm1
  .byte  102,68,15,111,13,127,30,0,0         // movdqa        0x1e7f(%rip),%xmm9        # 55e0 <_sk_callback_sse2+0xd77>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,193                   // pand          %xmm9,%xmm0
  .byte  102,15,239,200                      // pxor          %xmm0,%xmm1
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,68,15,111,233                   // movdqa        %xmm1,%xmm13
  .byte  102,65,15,114,245,13                // pslld         $0xd,%xmm13
  .byte  102,68,15,235,232                   // por           %xmm0,%xmm13
  .byte  102,68,15,111,29,100,30,0,0         // movdqa        0x1e64(%rip),%xmm11        # 55f0 <_sk_callback_sse2+0xd87>
  .byte  102,69,15,254,235                   // paddd         %xmm11,%xmm13
  .byte  102,68,15,111,37,102,30,0,0         // movdqa        0x1e66(%rip),%xmm12        # 5600 <_sk_callback_sse2+0xd97>
  .byte  102,65,15,239,204                   // pxor          %xmm12,%xmm1
  .byte  102,15,111,29,105,30,0,0            // movdqa        0x1e69(%rip),%xmm3        # 5610 <_sk_callback_sse2+0xda7>
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,102,193                      // pcmpgtd       %xmm1,%xmm0
  .byte  102,65,15,223,197                   // pandn         %xmm13,%xmm0
  .byte  102,65,15,115,222,8                 // psrldq        $0x8,%xmm14
  .byte  102,69,15,97,242                    // punpcklwd     %xmm10,%xmm14
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,219,201                   // pand          %xmm9,%xmm1
  .byte  102,68,15,239,241                   // pxor          %xmm1,%xmm14
  .byte  102,15,114,241,16                   // pslld         $0x10,%xmm1
  .byte  102,65,15,111,214                   // movdqa        %xmm14,%xmm2
  .byte  102,15,114,242,13                   // pslld         $0xd,%xmm2
  .byte  102,15,235,209                      // por           %xmm1,%xmm2
  .byte  102,65,15,254,211                   // paddd         %xmm11,%xmm2
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,65,15,102,206                   // pcmpgtd       %xmm14,%xmm1
  .byte  102,15,223,202                      // pandn         %xmm2,%xmm1
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,234                    // punpcklwd     %xmm10,%xmm13
  .byte  102,65,15,111,213                   // movdqa        %xmm13,%xmm2
  .byte  102,65,15,219,209                   // pand          %xmm9,%xmm2
  .byte  102,68,15,239,234                   // pxor          %xmm2,%xmm13
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,65,15,114,246,13                // pslld         $0xd,%xmm14
  .byte  102,68,15,235,242                   // por           %xmm2,%xmm14
  .byte  102,69,15,254,243                   // paddd         %xmm11,%xmm14
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,65,15,102,213                   // pcmpgtd       %xmm13,%xmm2
  .byte  102,65,15,223,214                   // pandn         %xmm14,%xmm2
  .byte  102,65,15,115,216,8                 // psrldq        $0x8,%xmm8
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,219,200                   // pand          %xmm8,%xmm9
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,114,242,13                // pslld         $0xd,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  102,69,15,254,211                   // paddd         %xmm11,%xmm10
  .byte  102,69,15,239,196                   // pxor          %xmm12,%xmm8
  .byte  102,65,15,102,216                   // pcmpgtd       %xmm8,%xmm3
  .byte  102,65,15,223,218                   // pandn         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_sse2
.globl _sk_store_f16_sse2
FUNCTION(_sk_store_f16_sse2)
_sk_store_f16_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,111,21,145,29,0,0         // movdqa        0x1d91(%rip),%xmm10        # 5620 <_sk_callback_sse2+0xdb7>
  .byte  102,68,15,111,224                   // movdqa        %xmm0,%xmm12
  .byte  102,68,15,111,232                   // movdqa        %xmm0,%xmm13
  .byte  102,69,15,219,234                   // pand          %xmm10,%xmm13
  .byte  102,69,15,239,229                   // pxor          %xmm13,%xmm12
  .byte  102,68,15,111,13,132,29,0,0         // movdqa        0x1d84(%rip),%xmm9        # 5630 <_sk_callback_sse2+0xdc7>
  .byte  102,65,15,114,213,16                // psrld         $0x10,%xmm13
  .byte  102,69,15,111,193                   // movdqa        %xmm9,%xmm8
  .byte  102,69,15,102,196                   // pcmpgtd       %xmm12,%xmm8
  .byte  102,65,15,114,212,13                // psrld         $0xd,%xmm12
  .byte  102,68,15,111,29,117,29,0,0         // movdqa        0x1d75(%rip),%xmm11        # 5640 <_sk_callback_sse2+0xdd7>
  .byte  102,69,15,235,235                   // por           %xmm11,%xmm13
  .byte  102,69,15,254,236                   // paddd         %xmm12,%xmm13
  .byte  102,65,15,114,245,16                // pslld         $0x10,%xmm13
  .byte  102,65,15,114,229,16                // psrad         $0x10,%xmm13
  .byte  102,69,15,223,197                   // pandn         %xmm13,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,68,15,111,233                   // movdqa        %xmm1,%xmm13
  .byte  102,68,15,111,241                   // movdqa        %xmm1,%xmm14
  .byte  102,69,15,219,242                   // pand          %xmm10,%xmm14
  .byte  102,69,15,239,238                   // pxor          %xmm14,%xmm13
  .byte  102,65,15,114,214,16                // psrld         $0x10,%xmm14
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,69,15,102,229                   // pcmpgtd       %xmm13,%xmm12
  .byte  102,65,15,114,213,13                // psrld         $0xd,%xmm13
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,254,245                   // paddd         %xmm13,%xmm14
  .byte  102,65,15,114,246,16                // pslld         $0x10,%xmm14
  .byte  102,65,15,114,230,16                // psrad         $0x10,%xmm14
  .byte  102,69,15,223,230                   // pandn         %xmm14,%xmm12
  .byte  102,69,15,107,228                   // packssdw      %xmm12,%xmm12
  .byte  102,68,15,111,242                   // movdqa        %xmm2,%xmm14
  .byte  102,68,15,111,250                   // movdqa        %xmm2,%xmm15
  .byte  102,69,15,219,250                   // pand          %xmm10,%xmm15
  .byte  102,69,15,239,247                   // pxor          %xmm15,%xmm14
  .byte  102,65,15,114,215,16                // psrld         $0x10,%xmm15
  .byte  102,69,15,111,233                   // movdqa        %xmm9,%xmm13
  .byte  102,69,15,102,238                   // pcmpgtd       %xmm14,%xmm13
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,251                   // por           %xmm11,%xmm15
  .byte  102,69,15,254,254                   // paddd         %xmm14,%xmm15
  .byte  102,65,15,114,247,16                // pslld         $0x10,%xmm15
  .byte  102,65,15,114,231,16                // psrad         $0x10,%xmm15
  .byte  102,69,15,223,239                   // pandn         %xmm15,%xmm13
  .byte  102,69,15,107,237                   // packssdw      %xmm13,%xmm13
  .byte  102,68,15,219,211                   // pand          %xmm3,%xmm10
  .byte  102,68,15,111,243                   // movdqa        %xmm3,%xmm14
  .byte  102,69,15,239,242                   // pxor          %xmm10,%xmm14
  .byte  102,65,15,114,210,16                // psrld         $0x10,%xmm10
  .byte  102,69,15,102,206                   // pcmpgtd       %xmm14,%xmm9
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,211                   // por           %xmm11,%xmm10
  .byte  102,69,15,254,214                   // paddd         %xmm14,%xmm10
  .byte  102,65,15,114,242,16                // pslld         $0x10,%xmm10
  .byte  102,65,15,114,226,16                // psrad         $0x10,%xmm10
  .byte  102,69,15,223,202                   // pandn         %xmm10,%xmm9
  .byte  102,69,15,107,201                   // packssdw      %xmm9,%xmm9
  .byte  102,69,15,97,196                    // punpcklwd     %xmm12,%xmm8
  .byte  102,69,15,97,233                    // punpcklwd     %xmm9,%xmm13
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,69,15,98,205                    // punpckldq     %xmm13,%xmm9
  .byte  243,68,15,127,12,248                // movdqu        %xmm9,(%rax,%rdi,8)
  .byte  102,69,15,106,197                   // punpckhdq     %xmm13,%xmm8
  .byte  243,68,15,127,68,248,16             // movdqu        %xmm8,0x10(%rax,%rdi,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_u16_be_sse2
.globl _sk_load_u16_be_sse2
FUNCTION(_sk_load_u16_be_sse2)
_sk_load_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  243,15,111,4,248                    // movdqu        (%rax,%rdi,8),%xmm0
  .byte  243,15,111,76,248,16                // movdqu        0x10(%rax,%rdi,8),%xmm1
  .byte  102,15,111,208                      // movdqa        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,193                           // cvtdq2ps      %xmm1,%xmm0
  .byte  68,15,40,5,19,28,0,0                // movaps        0x1c13(%rip),%xmm8        # 5650 <_sk_callback_sse2+0xde7>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,203                           // cvtdq2ps      %xmm3,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,68,15,111,210                   // movdqa        %xmm2,%xmm10
  .byte  102,65,15,113,242,8                 // psllw         $0x8,%xmm10
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,65,15,235,210                   // por           %xmm10,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,68,15,111,211                   // movdqa        %xmm3,%xmm10
  .byte  102,65,15,113,242,8                 // psllw         $0x8,%xmm10
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,218                   // por           %xmm10,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgb_u16_be_sse2
.globl _sk_load_rgb_u16_be_sse2
FUNCTION(_sk_load_rgb_u16_be_sse2)
_sk_load_rgb_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,141,12,127                       // lea           (%rdi,%rdi,2),%rcx
  .byte  243,15,111,20,72                    // movdqu        (%rax,%rcx,2),%xmm2
  .byte  243,15,111,68,72,8                  // movdqu        0x8(%rax,%rcx,2),%xmm0
  .byte  102,15,115,216,4                    // psrldq        $0x4,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,115,217,6                    // psrldq        $0x6,%xmm1
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,111,194                      // movdqa        %xmm2,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,112,216,78                   // pshufd        $0x4e,%xmm0,%xmm3
  .byte  102,15,105,209                      // punpckhwd     %xmm1,%xmm2
  .byte  102,15,111,200                      // movdqa        %xmm0,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,208,8                    // psrlw         $0x8,%xmm0
  .byte  102,15,235,193                      // por           %xmm1,%xmm0
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,65,15,97,192                    // punpcklwd     %xmm8,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,13,79,27,0,0               // movaps        0x1b4f(%rip),%xmm9        # 5660 <_sk_callback_sse2+0xdf7>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,65,15,97,216                    // punpcklwd     %xmm8,%xmm3
  .byte  15,91,203                           // cvtdq2ps      %xmm3,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  102,15,111,218                      // movdqa        %xmm2,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,15,235,211                      // por           %xmm3,%xmm2
  .byte  102,65,15,97,208                    // punpcklwd     %xmm8,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,22,27,0,0                  // movaps        0x1b16(%rip),%xmm3        # 5670 <_sk_callback_sse2+0xe07>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_u16_be_sse2
.globl _sk_store_u16_be_sse2
FUNCTION(_sk_store_u16_be_sse2)
_sk_store_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,13,23,27,0,0               // movaps        0x1b17(%rip),%xmm9        # 5680 <_sk_callback_sse2+0xe17>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,113,242,8                 // psllw         $0x8,%xmm10
  .byte  102,65,15,113,208,8                 // psrlw         $0x8,%xmm8
  .byte  102,69,15,235,194                   // por           %xmm10,%xmm8
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,16                // pslld         $0x10,%xmm10
  .byte  102,65,15,114,226,16                // psrad         $0x10,%xmm10
  .byte  102,69,15,107,210                   // packssdw      %xmm10,%xmm10
  .byte  102,69,15,111,218                   // movdqa        %xmm10,%xmm11
  .byte  102,65,15,113,243,8                 // psllw         $0x8,%xmm11
  .byte  102,65,15,113,210,8                 // psrlw         $0x8,%xmm10
  .byte  102,69,15,235,211                   // por           %xmm11,%xmm10
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  102,69,15,91,219                    // cvtps2dq      %xmm11,%xmm11
  .byte  102,65,15,114,243,16                // pslld         $0x10,%xmm11
  .byte  102,65,15,114,227,16                // psrad         $0x10,%xmm11
  .byte  102,69,15,107,219                   // packssdw      %xmm11,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,211,8                 // psrlw         $0x8,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,65,15,114,225,16                // psrad         $0x10,%xmm9
  .byte  102,69,15,107,201                   // packssdw      %xmm9,%xmm9
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,209,8                 // psrlw         $0x8,%xmm9
  .byte  102,69,15,235,204                   // por           %xmm12,%xmm9
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,97,217                    // punpcklwd     %xmm9,%xmm11
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,69,15,98,203                    // punpckldq     %xmm11,%xmm9
  .byte  243,68,15,127,12,248                // movdqu        %xmm9,(%rax,%rdi,8)
  .byte  102,69,15,106,195                   // punpckhdq     %xmm11,%xmm8
  .byte  243,68,15,127,68,248,16             // movdqu        %xmm8,0x10(%rax,%rdi,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_f32_sse2
.globl _sk_load_f32_sse2
FUNCTION(_sk_load_f32_sse2)
_sk_load_f32_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,137,249                          // mov           %rdi,%rcx
  .byte  72,193,225,4                        // shl           $0x4,%rcx
  .byte  68,15,16,4,8                        // movups        (%rax,%rcx,1),%xmm8
  .byte  15,16,68,8,16                       // movups        0x10(%rax,%rcx,1),%xmm0
  .byte  15,16,92,8,32                       // movups        0x20(%rax,%rcx,1),%xmm3
  .byte  68,15,16,76,8,48                    // movups        0x30(%rax,%rcx,1),%xmm9
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,20,208                           // unpcklps      %xmm0,%xmm2
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  68,15,21,192                        // unpckhps      %xmm0,%xmm8
  .byte  65,15,21,217                        // unpckhps      %xmm9,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,202                           // movhlps       %xmm2,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  65,15,18,216                        // movhlps       %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f32_sse2
.globl _sk_store_f32_sse2
FUNCTION(_sk_store_f32_sse2)
_sk_store_f32_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  72,137,249                          // mov           %rdi,%rcx
  .byte  72,193,225,4                        // shl           $0x4,%rcx
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  68,15,20,219                        // unpcklps      %xmm3,%xmm11
  .byte  68,15,21,193                        // unpckhps      %xmm1,%xmm8
  .byte  68,15,21,211                        // unpckhps      %xmm3,%xmm10
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  102,69,15,20,227                    // unpcklpd      %xmm11,%xmm12
  .byte  69,15,18,217                        // movhlps       %xmm9,%xmm11
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  102,69,15,20,202                    // unpcklpd      %xmm10,%xmm9
  .byte  69,15,18,208                        // movhlps       %xmm8,%xmm10
  .byte  102,68,15,17,36,8                   // movupd        %xmm12,(%rax,%rcx,1)
  .byte  68,15,17,92,8,16                    // movups        %xmm11,0x10(%rax,%rcx,1)
  .byte  102,68,15,17,76,8,32                // movupd        %xmm9,0x20(%rax,%rcx,1)
  .byte  68,15,17,84,8,48                    // movups        %xmm10,0x30(%rax,%rcx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_sse2
.globl _sk_clamp_x_sse2
FUNCTION(_sk_clamp_x_sse2)
_sk_clamp_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  68,15,93,192                        // minps         %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_sse2
.globl _sk_clamp_y_sse2
FUNCTION(_sk_clamp_y_sse2)
_sk_clamp_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,193                        // maxps         %xmm1,%xmm8
  .byte  243,15,16,8                         // movss         (%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  68,15,93,193                        // minps         %xmm1,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_sse2
.globl _sk_repeat_x_sse2
FUNCTION(_sk_repeat_x_sse2)
_sk_repeat_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,94,200                        // divps         %xmm8,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,84,13,23,25,0,0               // andps         0x1917(%rip),%xmm9        # 5690 <_sk_callback_sse2+0xe27>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_sse2
.globl _sk_repeat_y_sse2
FUNCTION(_sk_repeat_y_sse2)
_sk_repeat_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,94,200                        // divps         %xmm8,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,84,13,233,24,0,0              // andps         0x18e9(%rip),%xmm9        # 56a0 <_sk_callback_sse2+0xe37>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_sse2
.globl _sk_mirror_x_sse2
FUNCTION(_sk_mirror_x_sse2)
_sk_mirror_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  243,69,15,88,192                    // addss         %xmm8,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  69,15,94,208                        // divps         %xmm8,%xmm10
  .byte  243,69,15,91,218                    // cvttps2dq     %xmm10,%xmm11
  .byte  69,15,91,219                        // cvtdq2ps      %xmm11,%xmm11
  .byte  69,15,194,211,1                     // cmpltps       %xmm11,%xmm10
  .byte  68,15,84,21,169,24,0,0              // andps         0x18a9(%rip),%xmm10        # 56b0 <_sk_callback_sse2+0xe47>
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  65,15,84,196                        // andps         %xmm12,%xmm0
  .byte  65,15,93,193                        // minps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_sse2
.globl _sk_mirror_y_sse2
FUNCTION(_sk_mirror_y_sse2)
_sk_mirror_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  243,69,15,88,192                    // addss         %xmm8,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,94,208                        // divps         %xmm8,%xmm10
  .byte  243,69,15,91,218                    // cvttps2dq     %xmm10,%xmm11
  .byte  69,15,91,219                        // cvtdq2ps      %xmm11,%xmm11
  .byte  69,15,194,211,1                     // cmpltps       %xmm11,%xmm10
  .byte  68,15,84,21,89,24,0,0               // andps         0x1859(%rip),%xmm10        # 56c0 <_sk_callback_sse2+0xe57>
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  65,15,84,204                        // andps         %xmm12,%xmm1
  .byte  65,15,93,201                        // minps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_sse2
.globl _sk_luminance_to_alpha_sse2
FUNCTION(_sk_luminance_to_alpha_sse2)
_sk_luminance_to_alpha_sse2:
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,89,5,59,24,0,0                   // mulps         0x183b(%rip),%xmm0        # 56d0 <_sk_callback_sse2+0xe67>
  .byte  15,89,13,68,24,0,0                  // mulps         0x1844(%rip),%xmm1        # 56e0 <_sk_callback_sse2+0xe77>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,29,74,24,0,0                  // mulps         0x184a(%rip),%xmm3        # 56f0 <_sk_callback_sse2+0xe87>
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_sse2
.globl _sk_matrix_2x3_sse2
FUNCTION(_sk_matrix_2x3_sse2)
_sk_matrix_2x3_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,16                  // movss         0x10(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_sse2
.globl _sk_matrix_3x4_sse2
FUNCTION(_sk_matrix_3x4_sse2)
_sk_matrix_3x4_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,36                  // movss         0x24(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_sse2
.globl _sk_matrix_4x5_sse2
FUNCTION(_sk_matrix_4x5_sse2)
_sk_matrix_4x5_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,32                  // movss         0x20(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,48                  // movss         0x30(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,64                 // movss         0x40(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,20                  // movss         0x14(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,36                  // movss         0x24(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,52                  // movss         0x34(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,68                 // movss         0x44(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,56                 // movss         0x38(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,72                 // movss         0x48(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  243,68,15,16,88,12                  // movss         0xc(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,28                  // movss         0x1c(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,60                 // movss         0x3c(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  243,68,15,16,120,76                 // movss         0x4c(%rax),%xmm15
  .byte  69,15,198,255,0                     // shufps        $0x0,%xmm15,%xmm15
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,247                        // addps         %xmm15,%xmm14
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_sse2
.globl _sk_matrix_perspective_sse2
FUNCTION(_sk_matrix_perspective_sse2)
_sk_matrix_perspective_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  243,68,15,16,80,24                  // movss         0x18(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,83,202                        // rcpps         %xmm10,%xmm1
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_sse2
.globl _sk_gradient_sse2
FUNCTION(_sk_gradient_sse2)
_sk_gradient_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,20                  // movss         0x14(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,28                  // movss         0x1c(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  72,139,8                            // mov           (%rax),%rcx
  .byte  72,133,201                          // test          %rcx,%rcx
  .byte  15,132,15,1,0,0                     // je            4359 <_sk_gradient_sse2+0x149>
  .byte  72,139,64,8                         // mov           0x8(%rax),%rax
  .byte  72,131,192,32                       // add           $0x20,%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  243,68,15,16,112,224                // movss         -0x20(%rax),%xmm14
  .byte  243,68,15,16,104,228                // movss         -0x1c(%rax),%xmm13
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  69,15,40,252                        // movaps        %xmm12,%xmm15
  .byte  68,15,40,224                        // movaps        %xmm0,%xmm12
  .byte  69,15,194,230,1                     // cmpltps       %xmm14,%xmm12
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  69,15,84,196                        // andps         %xmm12,%xmm8
  .byte  69,15,86,198                        // orps          %xmm14,%xmm8
  .byte  243,68,15,16,104,232                // movss         -0x18(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  65,15,84,204                        // andps         %xmm12,%xmm1
  .byte  65,15,86,206                        // orps          %xmm14,%xmm1
  .byte  243,68,15,16,104,236                // movss         -0x14(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  65,15,84,212                        // andps         %xmm12,%xmm2
  .byte  65,15,86,214                        // orps          %xmm14,%xmm2
  .byte  243,68,15,16,104,240                // movss         -0x10(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  65,15,84,220                        // andps         %xmm12,%xmm3
  .byte  65,15,86,222                        // orps          %xmm14,%xmm3
  .byte  243,68,15,16,104,244                // movss         -0xc(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  69,15,84,204                        // andps         %xmm12,%xmm9
  .byte  69,15,86,206                        // orps          %xmm14,%xmm9
  .byte  243,68,15,16,104,248                // movss         -0x8(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  69,15,84,212                        // andps         %xmm12,%xmm10
  .byte  69,15,86,214                        // orps          %xmm14,%xmm10
  .byte  243,68,15,16,104,252                // movss         -0x4(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  69,15,84,220                        // andps         %xmm12,%xmm11
  .byte  69,15,86,222                        // orps          %xmm14,%xmm11
  .byte  243,68,15,16,40                     // movss         (%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  69,15,84,252                        // andps         %xmm12,%xmm15
  .byte  69,15,85,229                        // andnps        %xmm13,%xmm12
  .byte  69,15,86,231                        // orps          %xmm15,%xmm12
  .byte  72,131,192,36                       // add           $0x24,%rax
  .byte  72,255,201                          // dec           %rcx
  .byte  15,133,8,255,255,255                // jne           425f <_sk_gradient_sse2+0x4f>
  .byte  235,13                              // jmp           4366 <_sk_gradient_sse2+0x156>
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_sse2
.globl _sk_evenly_spaced_2_stop_gradient_sse2
FUNCTION(_sk_evenly_spaced_2_stop_gradient_sse2)
_sk_evenly_spaced_2_stop_gradient_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,72,28                  // movss         0x1c(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_sse2
.globl _sk_xy_to_unit_angle_sse2
FUNCTION(_sk_xy_to_unit_angle_sse2)
_sk_xy_to_unit_angle_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,84,200                        // andps         %xmm8,%xmm9
  .byte  69,15,87,210                        // xorps         %xmm10,%xmm10
  .byte  68,15,92,209                        // subps         %xmm1,%xmm10
  .byte  68,15,84,209                        // andps         %xmm1,%xmm10
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,93,218                        // minps         %xmm10,%xmm11
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  69,15,95,226                        // maxps         %xmm10,%xmm12
  .byte  69,15,94,220                        // divps         %xmm12,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,40,45,194,18,0,0              // movaps        0x12c2(%rip),%xmm13        # 5700 <_sk_callback_sse2+0xe97>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,198,18,0,0              // addps         0x12c6(%rip),%xmm13        # 5710 <_sk_callback_sse2+0xea7>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,202,18,0,0              // addps         0x12ca(%rip),%xmm13        # 5720 <_sk_callback_sse2+0xeb7>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,206,18,0,0              // addps         0x12ce(%rip),%xmm13        # 5730 <_sk_callback_sse2+0xec7>
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,40,21,205,18,0,0              // movaps        0x12cd(%rip),%xmm10        # 5740 <_sk_callback_sse2+0xed7>
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  69,15,85,205                        // andnps        %xmm13,%xmm9
  .byte  69,15,86,202                        // orps          %xmm10,%xmm9
  .byte  68,15,194,192,1                     // cmpltps       %xmm0,%xmm8
  .byte  68,15,40,21,192,18,0,0              // movaps        0x12c0(%rip),%xmm10        # 5750 <_sk_callback_sse2+0xee7>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,84,208                        // andps         %xmm8,%xmm10
  .byte  69,15,85,193                        // andnps        %xmm9,%xmm8
  .byte  69,15,86,194                        // orps          %xmm10,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,194,200,1                     // cmpltps       %xmm0,%xmm9
  .byte  68,15,40,21,175,18,0,0              // movaps        0x12af(%rip),%xmm10        # 5760 <_sk_callback_sse2+0xef7>
  .byte  69,15,92,208                        // subps         %xmm8,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  69,15,85,200                        // andnps        %xmm8,%xmm9
  .byte  69,15,86,202                        // orps          %xmm10,%xmm9
  .byte  65,15,194,193,7                     // cmpordps      %xmm9,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_sse2
.globl _sk_xy_to_radius_sse2
FUNCTION(_sk_xy_to_radius_sse2)
_sk_xy_to_radius_sse2:
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  65,15,82,192                        // rsqrtps       %xmm8,%xmm0
  .byte  15,83,192                           // rcpps         %xmm0,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_sse2
.globl _sk_save_xy_sse2
FUNCTION(_sk_save_xy_sse2)
_sk_save_xy_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,126,18,0,0               // movaps        0x127e(%rip),%xmm8        # 5770 <_sk_callback_sse2+0xf07>
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,194,218,1                     // cmpltps       %xmm10,%xmm11
  .byte  68,15,40,37,105,18,0,0              // movaps        0x1269(%rip),%xmm12        # 5780 <_sk_callback_sse2+0xf17>
  .byte  69,15,84,220                        // andps         %xmm12,%xmm11
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  243,69,15,91,208                    // cvttps2dq     %xmm8,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,194,218,1                     // cmpltps       %xmm10,%xmm11
  .byte  69,15,84,220                        // andps         %xmm12,%xmm11
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  15,17,72,32                         // movups        %xmm1,0x20(%rax)
  .byte  68,15,17,72,64                      // movups        %xmm9,0x40(%rax)
  .byte  68,15,17,64,96                      // movups        %xmm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_sse2
.globl _sk_accumulate_sse2
FUNCTION(_sk_accumulate_sse2)
_sk_accumulate_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,16,128,128,0,0,0              // movups        0x80(%rax),%xmm8
  .byte  68,15,16,136,160,0,0,0              // movups        0xa0(%rax),%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  65,15,88,224                        // addps         %xmm8,%xmm4
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  65,15,88,232                        // addps         %xmm8,%xmm5
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,88,240                        // addps         %xmm8,%xmm6
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_sse2
.globl _sk_bilinear_nx_sse2
FUNCTION(_sk_bilinear_nx_sse2)
_sk_bilinear_nx_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,226,17,0,0                  // addps         0x11e2(%rip),%xmm0        # 5790 <_sk_callback_sse2+0xf27>
  .byte  68,15,40,13,234,17,0,0              // movaps        0x11ea(%rip),%xmm9        # 57a0 <_sk_callback_sse2+0xf37>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_sse2
.globl _sk_bilinear_px_sse2
FUNCTION(_sk_bilinear_px_sse2)
_sk_bilinear_px_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,217,17,0,0                  // addps         0x11d9(%rip),%xmm0        # 57b0 <_sk_callback_sse2+0xf47>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_sse2
.globl _sk_bilinear_ny_sse2
FUNCTION(_sk_bilinear_ny_sse2)
_sk_bilinear_ny_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,203,17,0,0                 // addps         0x11cb(%rip),%xmm1        # 57c0 <_sk_callback_sse2+0xf57>
  .byte  68,15,40,13,211,17,0,0              // movaps        0x11d3(%rip),%xmm9        # 57d0 <_sk_callback_sse2+0xf67>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_sse2
.globl _sk_bilinear_py_sse2
FUNCTION(_sk_bilinear_py_sse2)
_sk_bilinear_py_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,193,17,0,0                 // addps         0x11c1(%rip),%xmm1        # 57e0 <_sk_callback_sse2+0xf77>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_sse2
.globl _sk_bicubic_n3x_sse2
FUNCTION(_sk_bicubic_n3x_sse2)
_sk_bicubic_n3x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,180,17,0,0                  // addps         0x11b4(%rip),%xmm0        # 57f0 <_sk_callback_sse2+0xf87>
  .byte  68,15,40,13,188,17,0,0              // movaps        0x11bc(%rip),%xmm9        # 5800 <_sk_callback_sse2+0xf97>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,184,17,0,0              // mulps         0x11b8(%rip),%xmm9        # 5810 <_sk_callback_sse2+0xfa7>
  .byte  68,15,88,13,192,17,0,0              // addps         0x11c0(%rip),%xmm9        # 5820 <_sk_callback_sse2+0xfb7>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_sse2
.globl _sk_bicubic_n1x_sse2
FUNCTION(_sk_bicubic_n1x_sse2)
_sk_bicubic_n1x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,175,17,0,0                  // addps         0x11af(%rip),%xmm0        # 5830 <_sk_callback_sse2+0xfc7>
  .byte  68,15,40,13,183,17,0,0              // movaps        0x11b7(%rip),%xmm9        # 5840 <_sk_callback_sse2+0xfd7>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,187,17,0,0               // movaps        0x11bb(%rip),%xmm8        # 5850 <_sk_callback_sse2+0xfe7>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,191,17,0,0               // addps         0x11bf(%rip),%xmm8        # 5860 <_sk_callback_sse2+0xff7>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,195,17,0,0               // addps         0x11c3(%rip),%xmm8        # 5870 <_sk_callback_sse2+0x1007>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,199,17,0,0               // addps         0x11c7(%rip),%xmm8        # 5880 <_sk_callback_sse2+0x1017>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_sse2
.globl _sk_bicubic_p1x_sse2
FUNCTION(_sk_bicubic_p1x_sse2)
_sk_bicubic_p1x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,193,17,0,0               // movaps        0x11c1(%rip),%xmm8        # 5890 <_sk_callback_sse2+0x1027>
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,72,64                      // movups        0x40(%rax),%xmm9
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,21,189,17,0,0              // movaps        0x11bd(%rip),%xmm10        # 58a0 <_sk_callback_sse2+0x1037>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,193,17,0,0              // addps         0x11c1(%rip),%xmm10        # 58b0 <_sk_callback_sse2+0x1047>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,189,17,0,0              // addps         0x11bd(%rip),%xmm10        # 58c0 <_sk_callback_sse2+0x1057>
  .byte  68,15,17,144,128,0,0,0              // movups        %xmm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_sse2
.globl _sk_bicubic_p3x_sse2
FUNCTION(_sk_bicubic_p3x_sse2)
_sk_bicubic_p3x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,176,17,0,0                  // addps         0x11b0(%rip),%xmm0        # 58d0 <_sk_callback_sse2+0x1067>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,176,17,0,0               // mulps         0x11b0(%rip),%xmm8        # 58e0 <_sk_callback_sse2+0x1077>
  .byte  68,15,88,5,184,17,0,0               // addps         0x11b8(%rip),%xmm8        # 58f0 <_sk_callback_sse2+0x1087>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_sse2
.globl _sk_bicubic_n3y_sse2
FUNCTION(_sk_bicubic_n3y_sse2)
_sk_bicubic_n3y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,166,17,0,0                 // addps         0x11a6(%rip),%xmm1        # 5900 <_sk_callback_sse2+0x1097>
  .byte  68,15,40,13,174,17,0,0              // movaps        0x11ae(%rip),%xmm9        # 5910 <_sk_callback_sse2+0x10a7>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,170,17,0,0              // mulps         0x11aa(%rip),%xmm9        # 5920 <_sk_callback_sse2+0x10b7>
  .byte  68,15,88,13,178,17,0,0              // addps         0x11b2(%rip),%xmm9        # 5930 <_sk_callback_sse2+0x10c7>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_sse2
.globl _sk_bicubic_n1y_sse2
FUNCTION(_sk_bicubic_n1y_sse2)
_sk_bicubic_n1y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,160,17,0,0                 // addps         0x11a0(%rip),%xmm1        # 5940 <_sk_callback_sse2+0x10d7>
  .byte  68,15,40,13,168,17,0,0              // movaps        0x11a8(%rip),%xmm9        # 5950 <_sk_callback_sse2+0x10e7>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,172,17,0,0               // movaps        0x11ac(%rip),%xmm8        # 5960 <_sk_callback_sse2+0x10f7>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,176,17,0,0               // addps         0x11b0(%rip),%xmm8        # 5970 <_sk_callback_sse2+0x1107>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,180,17,0,0               // addps         0x11b4(%rip),%xmm8        # 5980 <_sk_callback_sse2+0x1117>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,184,17,0,0               // addps         0x11b8(%rip),%xmm8        # 5990 <_sk_callback_sse2+0x1127>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_sse2
.globl _sk_bicubic_p1y_sse2
FUNCTION(_sk_bicubic_p1y_sse2)
_sk_bicubic_p1y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,178,17,0,0               // movaps        0x11b2(%rip),%xmm8        # 59a0 <_sk_callback_sse2+0x1137>
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,72,96                      // movups        0x60(%rax),%xmm9
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,21,173,17,0,0              // movaps        0x11ad(%rip),%xmm10        # 59b0 <_sk_callback_sse2+0x1147>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,177,17,0,0              // addps         0x11b1(%rip),%xmm10        # 59c0 <_sk_callback_sse2+0x1157>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,173,17,0,0              // addps         0x11ad(%rip),%xmm10        # 59d0 <_sk_callback_sse2+0x1167>
  .byte  68,15,17,144,160,0,0,0              // movups        %xmm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_sse2
.globl _sk_bicubic_p3y_sse2
FUNCTION(_sk_bicubic_p3y_sse2)
_sk_bicubic_p3y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,159,17,0,0                 // addps         0x119f(%rip),%xmm1        # 59e0 <_sk_callback_sse2+0x1177>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,159,17,0,0               // mulps         0x119f(%rip),%xmm8        # 59f0 <_sk_callback_sse2+0x1187>
  .byte  68,15,88,5,167,17,0,0               // addps         0x11a7(%rip),%xmm8        # 5a00 <_sk_callback_sse2+0x1197>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_sse2
.globl _sk_callback_sse2
FUNCTION(_sk_callback_sse2)
_sk_callback_sse2:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,236,72                       // sub           $0x48,%rsp
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%rsp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%rsp)
  .byte  15,41,108,36,16                     // movaps        %xmm5,0x10(%rsp)
  .byte  15,41,36,36                         // movaps        %xmm4,(%rsp)
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  73,137,255                          // mov           %rdi,%r15
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,137,195                          // mov           %rax,%rbx
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,20,225                           // unpcklps      %xmm1,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,20,235                           // unpcklps      %xmm3,%xmm5
  .byte  15,21,193                           // unpckhps      %xmm1,%xmm0
  .byte  15,21,211                           // unpckhps      %xmm3,%xmm2
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  102,15,20,205                       // unpcklpd      %xmm5,%xmm1
  .byte  15,18,236                           // movhlps       %xmm4,%xmm5
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  102,15,20,218                       // unpcklpd      %xmm2,%xmm3
  .byte  15,18,208                           // movhlps       %xmm0,%xmm2
  .byte  102,15,17,75,8                      // movupd        %xmm1,0x8(%rbx)
  .byte  15,17,107,24                        // movups        %xmm5,0x18(%rbx)
  .byte  102,15,17,91,40                     // movupd        %xmm3,0x28(%rbx)
  .byte  15,17,83,56                         // movups        %xmm2,0x38(%rbx)
  .byte  190,4,0,0,0                         // mov           $0x4,%esi
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  255,19                              // callq         *(%rbx)
  .byte  72,139,131,136,0,0,0                // mov           0x88(%rbx),%rax
  .byte  15,16,32                            // movups        (%rax),%xmm4
  .byte  15,16,64,16                         // movups        0x10(%rax),%xmm0
  .byte  15,16,88,32                         // movups        0x20(%rax),%xmm3
  .byte  15,16,80,48                         // movups        0x30(%rax),%xmm2
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,20,232                           // unpcklps      %xmm0,%xmm5
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  15,21,224                           // unpckhps      %xmm0,%xmm4
  .byte  15,21,218                           // unpckhps      %xmm2,%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,205                           // movhlps       %xmm5,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  15,18,220                           // movhlps       %xmm4,%xmm3
  .byte  76,137,230                          // mov           %r12,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,255                          // mov           %r15,%rdi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  15,40,36,36                         // movaps        (%rsp),%xmm4
  .byte  15,40,108,36,16                     // movaps        0x10(%rsp),%xmm5
  .byte  15,40,116,36,32                     // movaps        0x20(%rsp),%xmm6
  .byte  15,40,124,36,48                     // movaps        0x30(%rsp),%xmm7
  .byte  72,131,196,72                       // add           $0x48,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

BALIGN16
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%rdi)
  .byte  0,224                               // add           %ah,%al
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  224,64                              // loopne        4b18 <.literal16+0x1d8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        4b1c <.literal16+0x1dc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        4b20 <.literal16+0x1e0>
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4b41 <.literal16+0x201>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4b45 <.literal16+0x205>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4b49 <.literal16+0x209>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4b4d <.literal16+0x20d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4b81 <.literal16+0x241>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4b85 <.literal16+0x245>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4b89 <.literal16+0x249>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4b8d <.literal16+0x24d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4bc1 <.literal16+0x281>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4bc5 <.literal16+0x285>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4bc9 <.literal16+0x289>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4bcd <.literal16+0x28d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4c01 <.literal16+0x2c1>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4c05 <.literal16+0x2c5>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4c09 <.literal16+0x2c9>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 4c0d <.literal16+0x2cd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,145                          // cmpb          $0x91,(%rdi)
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  41,92,71,65                         // sub           %ebx,0x41(%rdi,%rax,2)
  .byte  41,92,71,65                         // sub           %ebx,0x41(%rdi,%rax,2)
  .byte  41,92,71,65                         // sub           %ebx,0x41(%rdi,%rax,2)
  .byte  41,92,71,65                         // sub           %ebx,0x41(%rdi,%rax,2)
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  206                                 // (bad)
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  48,63                               // xor           %bh,(%rdi)
  .byte  168,87                              // test          $0x57,%al
  .byte  202,189,168                         // lret          $0xa8bd
  .byte  87                                  // push          %rdi
  .byte  202,189,168                         // lret          $0xa8bd
  .byte  87                                  // push          %rdi
  .byte  202,189,168                         // lret          $0xa8bd
  .byte  87                                  // push          %rdi
  .byte  202,189,194                         // lret          $0xc2bd
  .byte  135,210                             // xchg          %edx,%edx
  .byte  62,194,135,210                      // ds            retq $0xd287
  .byte  62,194,135,210                      // ds            retq $0xd287
  .byte  62,194,135,210                      // ds            retq $0xd287
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,4                            // cmpb          $0x4,(%rdi)
  .byte  231,140                             // out           %eax,$0x8c
  .byte  59,4,231                            // cmp           (%rdi,%riz,8),%eax
  .byte  140,59                              // mov           %?,(%rbx)
  .byte  4,231                               // add           $0xe7,%al
  .byte  140,59                              // mov           %?,(%rbx)
  .byte  4,231                               // add           $0xe7,%al
  .byte  140,59                              // mov           %?,(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,171                          // cmpb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4de9 <.literal16+0x4a9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4ded <.literal16+0x4ad>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4df1 <.literal16+0x4b1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        4df5 <.literal16+0x4b5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,255,0              // addb          $0x0,-0xff00c5(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4ecb <.literal16+0x58b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4ecf <.literal16+0x58f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            4ed3 <.literal16+0x593>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4ec4 <.literal16+0x584>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4ec8 <.literal16+0x588>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4ecc <.literal16+0x58c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4ed0 <.literal16+0x590>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4f55 <.literal16+0x615>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           4eb9 <.literal16+0x579>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a38efa <_sk_callback_sse2+0xffffffffe9a34691>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4f94 <.literal16+0x654>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4f98 <.literal16+0x658>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4f9c <.literal16+0x65c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4fa0 <.literal16+0x660>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5025 <.literal16+0x6e5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           4f89 <.literal16+0x649>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a38fca <_sk_callback_sse2+0xffffffffe9a34761>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5064 <.literal16+0x724>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5068 <.literal16+0x728>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            506c <.literal16+0x72c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5070 <.literal16+0x730>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            50f5 <.literal16+0x7b5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5059 <.literal16+0x719>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3909a <_sk_callback_sse2+0xffffffffe9a34831>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5134 <.literal16+0x7f4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5138 <.literal16+0x7f8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            513c <.literal16+0x7fc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5140 <.literal16+0x800>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            51c5 <.literal16+0x885>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5129 <.literal16+0x7e9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3916a <_sk_callback_sse2+0xffffffffe9a34901>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  127,67                              // jg            5247 <.literal16+0x907>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            524b <.literal16+0x90b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            524f <.literal16+0x90f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5253 <.literal16+0x913>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,203,61,13                     // or            $0xd3dcb3c,%eax
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,60,203,61                     // cmp           $0x3dcb3c0d,%eax
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  18,3                                // adc           (%rbx),%al
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  163,59,10,215,163,59,10,215,163     // movabs        %eax,0xa3d70a3ba3d70a3b
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,194,24,17       // movabs        %eax,0x1118c23c1118c23b
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,190,203,61                    // cmp           $0x3dcbbe0d,%eax
  .byte  13,190,203,61,13                    // or            $0xd3dcbbe,%eax
  .byte  190,203,61,13,190                   // mov           $0xbe0d3dcb,%esi
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           52d3 <.literal16+0x993>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           52d7 <.literal16+0x997>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           52db <.literal16+0x99b>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           52df <.literal16+0x99f>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            531b <.literal16+0x9db>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            531f <.literal16+0x9df>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5323 <.literal16+0x9e3>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5369 <.literal16+0xa29>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        536d <.literal16+0xa2d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5371 <.literal16+0xa31>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5375 <.literal16+0xa35>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        53d9 <.literal16+0xa99>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        53dd <.literal16+0xa9d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        53e1 <.literal16+0xaa1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        53e5 <.literal16+0xaa5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,248                               // add           %bh,%al
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            5476 <.literal16+0xb36>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            547a <.literal16+0xb3a>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            547e <.literal16+0xb3e>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            5482 <.literal16+0xb42>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5585 <.literal16+0xc45>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5589 <.literal16+0xc49>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            558d <.literal16+0xc4d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5591 <.literal16+0xc51>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,127,67               // addb          $0x43,0x7f00003b(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            55db <.literal16+0xc9b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            55df <.literal16+0xc9f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            55e3 <.literal16+0xca3>
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,4                             // addb          $0x4,(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,4                             // addb          $0x4,(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,56,0                            // cmpb          $0x0,(%rax)
  .byte  0,128,56,0,0,128                    // add           %al,-0x7fffffc8(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,128,56,0,64,254                   // add           %al,-0x1bfffc8(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            56cb <.literal16+0xd8b>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            56cf <.literal16+0xd8f>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            56d3 <.literal16+0xd93>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            56d7 <.literal16+0xd97>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,208                          // cmpb          $0xd0,(%rdi)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,152,221,147              // fstl          -0x6c2267c3(%rbx)
  .byte  61,152,221,147,61                   // cmp           $0x3d93dd98,%eax
  .byte  152                                 // cwtl
  .byte  221,147,61,111,43,231               // fstl          -0x18d490c3(%rbx)
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  159                                 // lahf
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,212                          // lret          $0xd43c
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,128,62,0,0,128                    // add           %al,-0x7fffffc2(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  191,0,0,0,191                       // mov           $0xbf000000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         5832 <.literal16+0xef2>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5836 <.literal16+0xef6>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         583a <.literal16+0xefa>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63e6c5 <_sk_callback_sse2+0x3d639e5c>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63e705 <_sk_callback_sse2+0x3d639e9c>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            58fe <.literal16+0xfbe>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5902 <.literal16+0xfc2>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5906 <.literal16+0xfc6>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         590a <.literal16+0xfca>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         5942 <.literal16+0x1002>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5946 <.literal16+0x1006>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         594a <.literal16+0x100a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63e7d5 <_sk_callback_sse2+0x3d639f6c>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63e815 <_sk_callback_sse2+0x3d639fac>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            5a0e <.literal16+0x10ce>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5a12 <_sk_callback_sse2+0x11a9>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5a16 <_sk_callback_sse2+0x11ad>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         5a1a <_sk_callback_sse2+0x11b1>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
#endif
